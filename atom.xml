<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-10T16:32:22.467Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ugly Number</title>
    <link href="http://example.com/2021/04/10/Ugly-Number/"/>
    <id>http://example.com/2021/04/10/Ugly-Number/</id>
    <published>2021-04-10T02:12:43.000Z</published>
    <updated>2021-04-10T16:32:22.467Z</updated>
    
    <content type="html"><![CDATA[<h1>Definition</h1><hr><p><strong>Ugly number</strong> is a positive number whose prime factors only include 2, 3, and/or 5.</p><h1>Leetcode</h1><h2 id="263-Ugly-Number">263. Ugly Number</h2><hr><p><strong>Description</strong></p><p>Given an integer <code>n</code>, return true if <code>n</code> is an ugly number.</p><p><strong>Input and output</strong></p><pre><code>Input: n = 6Output: trueExplanation: 6 = 2 × 3</code></pre><p><strong>Solution</strong></p><p>From the ugly number definition, we can know that the ugly number is combined with at most three factors that are 2, 3 and/or 5. Therefore, every ugly number <code>n</code> can be rewritten as <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="15.864ex" height="2.23ex" role="img" focusable="false" viewBox="0 -903.7 7012 985.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(877.8, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1933.6, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(500, 413) scale(0.707)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g></g><g data-mml-node="mo" transform="translate(3079.8, 0)"><use xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="msup" transform="translate(4080.1, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-1-TEX-N-33"></use></g><g data-mml-node="mi" transform="translate(500, 413) scale(0.707)"><use xlink:href="#MJX-1-TEX-I-1D44F"></use></g></g><g data-mml-node="mo" transform="translate(5155.6, 0)"><use xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="msup" transform="translate(6155.9, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-1-TEX-N-35"></use></g><g data-mml-node="mi" transform="translate(500, 413) scale(0.707)"><use xlink:href="#MJX-1-TEX-I-1D450"></use></g></g></g></g></svg></mjx-container>and <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="17.604ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 7781 888" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(806.8, 0)"><use xlink:href="#MJX-1-TEX-N-2265"></use></g><g data-mml-node="mn" transform="translate(1862.6, 0)"><use xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(2362.6, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2807.2, 0)"><use xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(3514, 0)"><use xlink:href="#MJX-1-TEX-N-2265"></use></g><g data-mml-node="mn" transform="translate(4569.8, 0)"><use xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(5069.8, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(5514.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="mo" transform="translate(6225.2, 0)"><use xlink:href="#MJX-1-TEX-N-2265"></use></g><g data-mml-node="mn" transform="translate(7281, 0)"><use xlink:href="#MJX-1-TEX-N-30"></use></g></g></g></svg></mjx-container>.</p><p>In order to judge whether target number is ugly number. We  can divisor 2, 3 and 5 until the number cannot be divisor by 2, 3 and 5. If the remaining number equals to 1, it indicates that the target number is ugly number and vice versa.</p><pre><code>class Solution:    def isUgly(self, n: int) -&gt; bool:        if n &lt;= 0: return False        factors = [2, 3, 5]        for factor in factors:            while n % factor == 0:                n //= factor                return n == 1</code></pre><h2 id="264-Ugly-Number-II">264. Ugly Number II</h2><hr><p><strong>Description</strong></p><p>Given an integer <code>n</code>, return the $n^{th}$ <strong>ugly number</strong>.</p><p><strong>Input and output</strong></p><pre><code>Input: n = 10Output: 12Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.</code></pre><p><strong>Solution</strong></p><p>The factors of ugly number are 2, 3 and/or 5, therefore, every ugly number comes from former ugly number multiply by 2, 3 and/or 5. For example, 1 is the first ugly number and 2, 3 and 5 have qualification to be multiplied by 1. Taking the mines one, that is 2 and put 2 into ugly number sequence. 2 lose the qualification to be multiplied by 1 and 2 has qualification to be multiplied by 2. Therefore, 3 and 5 has qualification to be multiplied by 1 and 2 can be multiplied by 2 and then continue to take mines number and so on.</p><pre><code>class Solution:    def nthUglyNumber(self, n):        dp = [0] * (n+1)        dp[1] = 1        p2, p3, p5 = 1, 1, 1        for i in range(2, n+1):            target = min(dp[p2] * 2, dp[p3] * 3, dp[p5] * 5)            dp[i] = target            if target == dp[p2] * 2: p2 += 1            elif target == dp[p3] * 3: p3 += 1            else: p5 += 1        return dp[n]</code></pre><h2 id="313-Super-Ugly-Number">313. Super Ugly Number</h2><hr><p><strong>Description</strong></p><p>Given an integer <code>n</code> and an array of integers primes, return the <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.97ex" height="2.07ex" role="img" focusable="false" viewBox="0 -903.7 1312.6 914.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-1-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(600, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(361, 0)"><use xlink:href="#MJX-1-TEX-I-210E"></use></g></g></g></g></g></svg></mjx-container> <strong>super ugly number</strong>.</p><p><strong>Super ugly number</strong> is a positive number whose all prime factors are in the array <code>primes</code>.</p><p>The <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.97ex" height="2.07ex" role="img" focusable="false" viewBox="0 -903.7 1312.6 914.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-1-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(600, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(361, 0)"><use xlink:href="#MJX-1-TEX-I-210E"></use></g></g></g></g></g></svg></mjx-container> <strong>super ugly number</strong> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> signed integer.</p><p><strong>Input and output</strong></p><pre><code>Input: n = 12, primes = [2,7,13,19]Output: 32Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19].</code></pre><p><strong>Solution</strong></p><p>The solution is similar with the former one. The only difference is that the factors are not 2, 3 and/or 5, but given primes.</p><pre><code>class Solution:    def nthSuperUglyNumber(self, n, primes):        nums = [1]        k = len(primse)        i_index = [0] * k        for i in range(1, n):            ugly = min([primes[j] * nums[i_index[j]] for j in range(k)])            nums.append(ugly)            for j in range(k):                if ugly == primes[j] * nums[i_index[j]]:                    i_index[j] += 1                        return nums[n - 1]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Definition&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Ugly number&lt;/strong&gt; is a positive number whose prime factors only include 2, 3, and/or 5.&lt;/p&gt;
&lt;h1&gt;Leetc</summary>
      
    
    
    
    <category term="Data structure and algorithm" scheme="http://example.com/categories/Data-structure-and-algorithm/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Sliding window</title>
    <link href="http://example.com/2021/04/08/Sliding-window/"/>
    <id>http://example.com/2021/04/08/Sliding-window/</id>
    <published>2021-04-08T01:12:39.000Z</published>
    <updated>2021-04-10T02:18:19.099Z</updated>
    
    <content type="html"><![CDATA[<h1>Sliding Window Algorithm</h1><hr><p>Sliding window algorithm is a kind of two pointers. This algorithm mostly used in string match.</p><h2 id="template">template</h2><hr><pre><code>def slidingWindow(s, t):    need, window, valid = {}, {}, 0    left, right = 0, 0    while right &lt; len(s):        node = s[right]        right += 1        // update date        ...        while (window needs shrink):            deleteNode = s[left]            left += 1            // update data            ...</code></pre><h2 id="Notice">Notice</h2><hr><p>There are 4 questions need to be thought in sliding window algorithm</p><ol><li><p>When move <code>right</code> to expand window indicating add characters, which data need to update?</p></li><li><p>Under what conditions, the window should pause to expand, and start to move <code>left</code> to shrink the window?</p></li><li><p>When move <code>left</code>, which means delete characters, which data need to update?</p></li><li><p>Should the result we want be updated when the window is enlarged or when the window is reduced?</p></li></ol><h2 id="Example">Example</h2><hr><h3 id="leetcode-76-Minimum-Window-Substring-hard">leetcode 76 Minimum Window Substring (hard)</h3><h4 id="Description">Description</h4><p>Given two strings <code>s</code> and <code>t</code>, return the minimum window in <code>s</code> which will contain all the characters in <code>t</code>. If there is no such window in <code>s</code> that covers all characters in <code>t</code>, return the empty string <code>"".</code></p><p><strong>Note</strong> that If there is such a window, it is guaranteed that there will always be only one unique minimum window in <code>s</code>.</p><h4 id="Example-2">Example</h4><pre><code>Input: s = "ADOBECODEBANC", t = "ABC"Output: "BANC"</code></pre><h4 id="Code">Code</h4><pre><code>def minWindow(self, s, t):    need, window, valid, length = {}, {}, 0, float('inf')    for node in t:        if node not in need:            need[node] = 1        else:            need[node] += 1    left, right = 0, 0    while right &lt; len(s):        node = s[right]        right += 1        if node in need.keys():            if node not in window:                window[node] = 1            else:                window[node] += 1            if window[node] == need[node]:                valid += 1        while valid == len(need):            if right - left &lt; length:                start = left                length = right - left            deleteNode = s[left]            left += 1            if deleteNode in need.keys():                if window[deleteNode] == need[deleteNode]:                    valid -= 1                window[deleteNode] -= 1    return '' if length == float('inf') else s[start: start+length]</code></pre><h3 id="leetcode-567-Permutation-in-String-Medium">leetcode 567 Permutation in String (Medium)</h3><h4 id="Description-2">Description:</h4><p>Given two strings <strong>s1</strong> and <strong>s2</strong>, write a function to return true if <strong>s2</strong> contains the permutation of <strong>s1</strong>. In other words, one of the first string’s permutations is the <strong>substring</strong> of the second string.</p><h4 id="Example-3">Example</h4><pre><code>Input: s1 = "ab" s2 = "eidbaooo"Output: TrueExplanation: s2 contains one permutation of s1 ("ba").</code></pre><h4 id="Code-2">Code</h4><pre><code>def checkInclusion(self, s1, s2):    need, window, valid, = {}, {}, 0    for node in s1:        if node not in need:            need[node] = 1        else:            need[node] += 1    left, right = 0, 0    while right &lt; len(s2):        node = s2[right]        right += 1        if node in need.keys():            if node not in window:                window[node] = 1            else:                window[node] += 1            if window[node] == need[node]:                valid += 1        while right - left &gt;= len(s1):            if valid == len(need):                return True            deleteNode = s2[left]            left += 1            if deleteNode in need.keys():                if window[deleteNode] == need[deleteNode]:                    valid -= 1                window[deleteNode] -= 1    return False</code></pre><h3 id="leetcode-438-Find-All-Anagrams-in-a-String-Medium">leetcode 438 Find All Anagrams in a String (Medium)</h3><h4 id="Description-3">Description:</h4><p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p><p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p><p>The order of output does not matter.</p><h4 id="Example-4">Example</h4><pre><code>Input:s: "cbaebabacd" p: "abc"Output:[0, 6]Explanation:The substring with start index = 0 is "cba", which is an anagram of "abc".The substring with start index = 6 is "bac", which is an anagram of "abc".</code></pre><h4 id="Code-3">Code</h4><pre><code>def findAnagrams(self, s, p):    need, window, valid, res = {}, {}, 0, []    for node in p:        if node not in need:            need[node] = 1        else:            need[node] += 1    left, right = 0, 0    while right &lt; len(s):        node = s[right]        right += 1        if node in need.keys():            if node not in window:                window[node] = 1            else:                window[node] += 1            if window[node] == need[node]:                valid += 1        while right - left &gt;= len(p):            if valid == len(need):                res.append(left)            deleteNode = s[left]            left += 1            if deleteNode in need.keys():                if window[deleteNode] == need[deleteNode]:                    valid -= 1                window[deleteNode] -= 1    return res</code></pre><h3 id="leetcode-3-Longest-Substring-Without-Repeating-Characters-Medium">leetcode 3 Longest Substring Without Repeating Characters (Medium)</h3><h4 id="Description-4">Description:</h4><p>Given a string s, find the length of the longest substring without repeating characters.</p><h4 id="Example-5">Example</h4><pre><code>Input: s = "abcabcbb"Output: 3Explanation: The answer is "abc", with the length of 3.</code></pre><h4 id="Code-4">Code</h4><pre><code>def lengthOfLongestSubstring(self, s):    if not s: return 0    left, right, res, window = 0, 0, 0, {}    while right &lt; len(s):        node = s[right]        right += 1        if node not in window:            window[node] = 1        else:            window[node] += 1        while window[node] &gt; 1:            deleteNode = s[left]            left += 1            window[deleteNode] -= 1        res = max(res, right - left)    return res</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Sliding Window Algorithm&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Sliding window algorithm is a kind of two pointers. This algorithm mostly used in string match.&lt;/p</summary>
      
    
    
    
    <category term="Data structure and algorithm" scheme="http://example.com/categories/Data-structure-and-algorithm/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Heap and heapSort</title>
    <link href="http://example.com/2021/04/07/Heap-and-heapSort/"/>
    <id>http://example.com/2021/04/07/Heap-and-heapSort/</id>
    <published>2021-04-07T12:05:48.000Z</published>
    <updated>2021-04-09T02:06:33.772Z</updated>
    
    <content type="html"><![CDATA[<h1>Definition</h1><p>Heap is a kind of complete binary tree. A complete binary tree is a binary tree in which every level, except maybe last level, is full, and all nodes are as far as left as possible.</p><p>Commonly, there are two kinds of heap, the one is max-heap, and the other is min-heap.</p><p>Max-heap is the heap that parent’s value is greater than their children’s value, and the parent’s value of min-heap is less than their children.</p><h1>Operations</h1><h2 id="Insert-a-node">Insert a node</h2><ol><li><p>Make a new node in the last level, as far left as possible. If the last level is full, make a new one;</p></li><li><p>If the new one breaks heap property, swap with its parent node;</p></li><li><p>Repeat former two steps until every node is satisfied with heap property;</p></li><li><p>Time complexity <code>O(log H)</code> H is the height of tree</p></li></ol><h2 id="Delete-a-node">Delete a node</h2><ol><li><p>Remove the root node, and bring the last node (rightmost node in the last level) to the root;</p></li><li><p>If the root breaks heap property, look at its children and swap it with the larger one;</p></li><li><p>Repeat former two steps until no nodes conflict heap property;</p></li><li><p>Time complexity <code>O(log H)</code> H is the height of tree</p></li></ol><h1>Implement Max-heap with python</h1><pre><code>class MaxHeap:    def __init__(self, maxSize=None):        self.maxSize = maxSize        self.elements = []        self.count = 0    def addNode(self, value):        if self.count &gt; self.maxSize:            raise Exception('The heap is full.')        self.elements.append(value)        self.siftUp(self.count)        self.count += 1    def popNode(self):        if self.count == 0:            raise Exception('The heap is empty.')        value = self.elements[0]        self.count -= 1        self.elements[0] = self.elements[self.count]        self.siftDown(0)        return value    def siftUp(self, index):        if index &gt; 0:            parent = (index - 1) // 2            if self.elements[index] &gt; self.elements[parent]:                self.elements[index], self.elements[parent] = self.elements[parent], self.elements[index]                self.siftUp(parent)    def siftDown(self, index):        left = 2 * index + 1        right = 2 * index + 2        largest = index        if (left &lt;= self.count                and self.elements[left] &gt;= self.elements[largest]                and self.elements[left] &gt;= self.elements[right]):            largest = left        elif (right &lt; self.count              and self.elements[right] &gt;= self.elements[largest]):            largest = right        if largest != index:            self.elements[index], self.elements[largest] = self.elements[largest], self.elements[index]            self.siftDown(largest)</code></pre><h1>Heap sort</h1><p>From the above narrate, it is not hard to find no matter max-heap and min-heap, the top of heap is largest or least value of the whole heap, therefore, it</p><pre><code>    def heapSort(arr):      length = len(arr)      heap = MaxHeap(length)      for item in arr:        heap.addNode(item)      res = []      count = heap.count      while count &gt; 0:        node = heap.popNode()        res.insert(0, node)        count -= 1      return res</code></pre><p>Time complexity <code>O(N)</code> N is the length of array<br>Space complexity <code>O(N)</code> N is the length of array</p><p>Reference:</p><ol><li><p><a href="https://web.stanford.edu/class/cs97si/03-data-structures.pdf">https://web.stanford.edu/class/cs97si/03-data-structures.pdf</a></p></li><li><p><a href="https://python-data-structures-and-algorithms.readthedocs.io/zh/latest/15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/">https://python-data-structures-and-algorithms.readthedocs.io/zh/latest/15_堆与堆排序/heap_and_heapsort/</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Definition&lt;/h1&gt;
&lt;p&gt;Heap is a kind of complete binary tree. A complete binary tree is a binary tree in which every level, except maybe la</summary>
      
    
    
    
    <category term="Data structure and algorithm" scheme="http://example.com/categories/Data-structure-and-algorithm/"/>
    
    
    <category term="Data structure" scheme="http://example.com/tags/Data-structure/"/>
    
  </entry>
  
  <entry>
    <title>Stack and queue</title>
    <link href="http://example.com/2021/04/07/Stack-and-queue/"/>
    <id>http://example.com/2021/04/07/Stack-and-queue/</id>
    <published>2021-04-07T12:03:06.000Z</published>
    <updated>2021-04-09T02:06:33.779Z</updated>
    
    <content type="html"><![CDATA[<h1>Definition</h1><p><strong>Stack</strong>: Last in, first out (LIFO)</p><p><strong>Queue</strong>: First in, first out (FIFO)</p><h1>Operations</h1><h2 id="Stack">Stack</h2><ol><li><p>push(x): inserts x into a stack.</p></li><li><p>pop(): removes the newest item from a stack.</p></li><li><p>top(): returns the newest item from a stack.</p></li></ol><h2 id="Queue">Queue</h2><ol><li><p>Enqueue(x): inserts x into the queue.</p></li><li><p>Dequeue(): removes the oldest item from the queue.</p></li><li><p>Front(): returns the oldest item from the queue.</p></li></ol><h1>Implement with python</h1><h2 id="Stack-2">Stack</h2><pre><code>class Stack:    def __init__(self):        self.stack = []    def _push(self, value):        self.stack.append(value)    def _pop(self):        if not self.stack:            raise Exception('The stack is empty.')        return self.stack.pop()    def _top(self):        if not self.stack:            raise Exception('The stack is empty.')        return self.stack[-1]</code></pre><h2 id="Queue-2">Queue</h2><pre><code>class Queue:    def __init__(self):        self.queue = []    def enqueue(self, value):        self.queue.append(value)    def dequeue(self):        if not self.queue:            raise Exception('The queue is empty.')        return self.queue.pop(0)    def front(self):        if not self.queue:            raise Exception('The queue is empty.')        return self.queue[0]</code></pre><p>Reference:</p><ol><li><a href="https://web.stanford.edu/class/cs97si/03-data-structures.pdf">https://web.stanford.edu/class/cs97si/03-data-structures.pdf</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Definition&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;: Last in, first out (LIFO)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Queue&lt;/strong&gt;: First in, first out (FIFO)&lt;/p&gt;
&lt;h1&gt;O</summary>
      
    
    
    
    <category term="Data structure and algorithm" scheme="http://example.com/categories/Data-structure-and-algorithm/"/>
    
    
    <category term="Data structure" scheme="http://example.com/tags/Data-structure/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-15T05:56:00.937Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>House Robber II</title>
    <link href="http://example.com/2021/04/15/House-Robber-II/"/>
    <id>http://example.com/2021/04/15/House-Robber-II/</id>
    <published>2021-04-15T05:41:31.000Z</published>
    <updated>2021-04-15T05:56:00.937Z</updated>
    
    <content type="html"><![CDATA[<h1>213. House Robber II</h1><hr><p><strong>Description</strong></p><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle</strong>. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it <strong>will automatically contact the police if two adjacent houses were broken into on the same night.</strong></p><p>Given an integer array <code>nums</code> representing the amount of money of each house, return the maximum amount of money you can rob tonight <strong>without alerting the police.</strong></p><p><strong>Input and output</strong></p><pre><code>Input: nums = [2,3,2]Output: 3Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.</code></pre><p><strong>Solution</strong></p><p>It is a classical <strong>dp</strong> question, if all houses are not arranged in a circle(Leetcode 198). Making a list <code>dp</code> and <code>dp[i]</code> means most money can be achieved in position <code>i</code>. From the description, the state transition equation is:</p><center><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="41.617ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 18394.6 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-1-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-1-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(520, 0)"><use xlink:href="#MJX-1-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(1023, 0)"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1301, 0)"><use xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(1646, 0)"><use xlink:href="#MJX-1-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2201.8, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3257.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(4135.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(4664.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(5236.6, 0)"><use xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(5625.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(6145.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(6648.6, 0)"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(6926.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(7493.8, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(8494, 0)"><use xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(8994, 0)"><use xlink:href="#MJX-1-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(9494.2, 0)"><use xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(10494.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(11094.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D462"></use></g><g data-mml-node="mi" transform="translate(11666.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(12544.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(13013.4, 0)"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(13291.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(13636.4, 0)"><use xlink:href="#MJX-1-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(13914.4, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(14359.1, 0)"><use xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(14879.1, 0)"><use xlink:href="#MJX-1-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(15382.1, 0)"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(15660.1, 0)"><use xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(16227.3, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(17227.6, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(17727.6, 0)"><use xlink:href="#MJX-1-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(18005.6, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container></center><p>and the boundary condition is:</p><center><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex" xmlns="http://www.w3.org/2000/svg" width="38.422ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 16982.4 2399" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-1-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-1-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-S3-7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(520, 0)"><use xlink:href="#MJX-1-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(1023, 0)"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1301, 0)"><use xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(1646, 0)"><use xlink:href="#MJX-1-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2201.8, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(3257.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-S3-7B"></use></g><g data-mml-node="mtable" transform="translate(750, 0)"><g data-mml-node="mtr" transform="translate(0, 600)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(600, 0)"><use xlink:href="#MJX-1-TEX-I-1D462"></use></g><g data-mml-node="mi" transform="translate(1172, 0)"><use xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(2050, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(2519, 0)"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(2797, 0)"><use xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(3297, 0)"><use xlink:href="#MJX-1-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(3575, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(4019.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(4642.4, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(5698.2, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -600)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(878, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(1407, 0)"><use xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(1979, 0)"><use xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2368, 0)"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(2968, 0)"><use xlink:href="#MJX-1-TEX-I-1D462"></use></g><g data-mml-node="mi" transform="translate(3540, 0)"><use xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(4418, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(4887, 0)"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(5165, 0)"><use xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(5665, 0)"><use xlink:href="#MJX-1-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(5943, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(6387.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(6987.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D462"></use></g><g data-mml-node="mi" transform="translate(7559.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(8437.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(8906.7, 0)"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(9184.7, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(9684.7, 0)"><use xlink:href="#MJX-1-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(9962.7, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(10351.7, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(10796.3, 0)"><use xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(11419.1, 0)"><use xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(12474.9, 0)"><use xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></g><g data-mml-node="mo" transform="translate(13724.9, 0)"></g></g></g></g></svg></mjx-container></center><p>And in order to avoid stolen the first, and the last house at the same time, we can split this question into two conditions. When stealing the first house, the last one cannot be stolen, thus, the range is the first to the last second house. When stealing the last house, the first one cannot be stolen, therefore, the range is the second to the last house.</p><p>If the length of array is <code>n</code>, the first condition’s range is <code>[0, n-2]</code> and the other’s range is <code>[1, n-1]</code>. After determining the ranges, the method mentioned above can be used to get highest stolen value respectively. The maximum value is the maximum total amount that can be stolen in <code>n</code> houses</p><pre><code>class Solution:    def rob(self, nums: List[int]) -&gt; int:        if not nums:            return 0        elif len(nums) == 1:            return nums[0]        return max(self.rob2(nums[1:]), self.rob2(nums[: len(nums) - 1]))        def rob2(self, nums):        if not nums:            return 0        elif len(nums) == 1:            return nums[0]        first, second = nums[0], max(nums[0], nums[1])        for i in range(2, len(nums)):            first, second = second, max(second, first + nums[i])        return max(first, second)</code></pre><p><strong>Time and space complexity</strong></p><p>Time complexity: <code>O(n)</code>, <code>n</code> is the length of nums, it need traverse array twice.</p><p>Space complexity: <code>O(1)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;213. House Robber II&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You are a professional robber planning to rob houses along a stree</summary>
      
    
    
    
    <category term="Data structure and algorithm" scheme="http://example.com/categories/Data-structure-and-algorithm/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Ugly Number</title>
    <link href="http://example.com/2021/04/10/Ugly-Number/"/>
    <id>http://example.com/2021/04/10/Ugly-Number/</id>
    <published>2021-04-10T02:12:43.000Z</published>
    <updated>2021-04-10T21:09:02.518Z</updated>
    
    <content type="html"><![CDATA[<h1>Definition</h1><hr><p><strong>Ugly number</strong> is a positive number whose prime factors only include 2, 3, and/or 5.</p><h1>Leetcode</h1><h2 id="263-Ugly-Number">263. Ugly Number</h2><hr><p><strong>Description</strong></p><p>Given an integer <code>n</code>, return true if <code>n</code> is an ugly number.</p><p><strong>Input and output</strong></p><pre><code>Input: n = 6Output: trueExplanation: 6 = 2 × 3</code></pre><p><strong>Solution</strong></p><p>From the ugly number definition, we can know that the ugly number is combined with at most three factors that are 2, 3 and/or 5. Therefore, every ugly number <code>n</code> can be rewritten as <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="15.864ex" height="2.23ex" role="img" focusable="false" viewBox="0 -903.7 7012 985.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-2-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-2-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-2-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-2-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-2-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(877.8, 0)"><use xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1933.6, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-2-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(500, 413) scale(0.707)"><use xlink:href="#MJX-2-TEX-I-1D44E"></use></g></g><g data-mml-node="mo" transform="translate(3079.8, 0)"><use xlink:href="#MJX-2-TEX-N-2B"></use></g><g data-mml-node="msup" transform="translate(4080.1, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-2-TEX-N-33"></use></g><g data-mml-node="mi" transform="translate(500, 413) scale(0.707)"><use xlink:href="#MJX-2-TEX-I-1D44F"></use></g></g><g data-mml-node="mo" transform="translate(5155.6, 0)"><use xlink:href="#MJX-2-TEX-N-2B"></use></g><g data-mml-node="msup" transform="translate(6155.9, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-2-TEX-N-35"></use></g><g data-mml-node="mi" transform="translate(500, 413) scale(0.707)"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g></g></g></g></svg></mjx-container>and <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="17.604ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 7781 888" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-2-TEX-N-2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-2-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-2-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-2-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-2-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(806.8, 0)"><use xlink:href="#MJX-2-TEX-N-2265"></use></g><g data-mml-node="mn" transform="translate(1862.6, 0)"><use xlink:href="#MJX-2-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(2362.6, 0)"><use xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2807.2, 0)"><use xlink:href="#MJX-2-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(3514, 0)"><use xlink:href="#MJX-2-TEX-N-2265"></use></g><g data-mml-node="mn" transform="translate(4569.8, 0)"><use xlink:href="#MJX-2-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(5069.8, 0)"><use xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(5514.4, 0)"><use xlink:href="#MJX-2-TEX-I-1D450"></use></g><g data-mml-node="mo" transform="translate(6225.2, 0)"><use xlink:href="#MJX-2-TEX-N-2265"></use></g><g data-mml-node="mn" transform="translate(7281, 0)"><use xlink:href="#MJX-2-TEX-N-30"></use></g></g></g></svg></mjx-container>.</p><p>In order to judge whether target number is ugly number. We  can divisor 2, 3 and 5 until the number cannot be divisor by 2, 3 and 5. If the remaining number equals to 1, it indicates that the target number is ugly number and vice versa.</p><pre><code>class Solution:    def isUgly(self, n: int) -&gt; bool:        if n &lt;= 0: return False        factors = [2, 3, 5]        for factor in factors:            while n % factor == 0:                n //= factor                return n == 1</code></pre><h2 id="264-Ugly-Number-II">264. Ugly Number II</h2><hr><p><strong>Description</strong></p><p>Given an integer <code>n</code>, return the $n^{th}$ <strong>ugly number</strong>.</p><p><strong>Input and output</strong></p><pre><code>Input: n = 10Output: 12Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.</code></pre><p><strong>Solution</strong></p><p>The factors of ugly number are 2, 3 and/or 5, therefore, every ugly number comes from former ugly number multiply by 2, 3 and/or 5. For example, 1 is the first ugly number and 2, 3 and 5 have qualification to be multiplied by 1. Taking the mines one, that is 2 and put 2 into ugly number sequence. 2 lose the qualification to be multiplied by 1 and 2 has qualification to be multiplied by 2. Therefore, 3 and 5 has qualification to be multiplied by 1 and 2 can be multiplied by 2 and then continue to take mines number and so on.</p><pre><code>class Solution:    def nthUglyNumber(self, n):        dp = [0] * (n+1)        dp[1] = 1        p2, p3, p5 = 1, 1, 1        for i in range(2, n+1):            target = min(dp[p2] * 2, dp[p3] * 3, dp[p5] * 5)            dp[i] = target            if target == dp[p2] * 2: p2 += 1            if target == dp[p3] * 3: p3 += 1            if target == dp[p5] * 5: p5 += 1        return dp[n]</code></pre><h2 id="313-Super-Ugly-Number">313. Super Ugly Number</h2><hr><p><strong>Description</strong></p><p>Given an integer <code>n</code> and an array of integers primes, return the <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.97ex" height="2.07ex" role="img" focusable="false" viewBox="0 -903.7 1312.6 914.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-1-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(600, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(361, 0)"><use xlink:href="#MJX-1-TEX-I-210E"></use></g></g></g></g></g></svg></mjx-container> <strong>super ugly number</strong>.</p><p><strong>Super ugly number</strong> is a positive number whose all prime factors are in the array <code>primes</code>.</p><p>The <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.97ex" height="2.07ex" role="img" focusable="false" viewBox="0 -903.7 1312.6 914.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-1-TEX-I-210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(600, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(361, 0)"><use xlink:href="#MJX-1-TEX-I-210E"></use></g></g></g></g></g></svg></mjx-container> <strong>super ugly number</strong> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> signed integer.</p><p><strong>Input and output</strong></p><pre><code>Input: n = 12, primes = [2,7,13,19]Output: 32Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19].</code></pre><p><strong>Solution</strong></p><p>The solution is similar with the former one. The only difference is that the factors are not 2, 3 and/or 5, but given primes.</p><pre><code>class Solution:    def nthSuperUglyNumber(self, n, primes):        nums = [1]        k = len(primse)        i_index = [0] * k        for i in range(1, n):            ugly = min([primes[j] * nums[i_index[j]] for j in range(k)])            nums.append(ugly)            for j in range(k):                if ugly == primes[j] * nums[i_index[j]]:                    i_index[j] += 1                        return nums[n - 1]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Definition&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Ugly number&lt;/strong&gt; is a positive number whose prime factors only include 2, 3, and/or 5.&lt;/p&gt;
&lt;h1&gt;Leetc</summary>
      
    
    
    
    <category term="Data structure and algorithm" scheme="http://example.com/categories/Data-structure-and-algorithm/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Sliding window</title>
    <link href="http://example.com/2021/04/08/Sliding-window/"/>
    <id>http://example.com/2021/04/08/Sliding-window/</id>
    <published>2021-04-08T01:12:39.000Z</published>
    <updated>2021-04-10T02:18:19.099Z</updated>
    
    <content type="html"><![CDATA[<h1>Sliding Window Algorithm</h1><hr><p>Sliding window algorithm is a kind of two pointers. This algorithm mostly used in string match.</p><h2 id="template">template</h2><hr><pre><code>def slidingWindow(s, t):    need, window, valid = {}, {}, 0    left, right = 0, 0    while right &lt; len(s):        node = s[right]        right += 1        // update date        ...        while (window needs shrink):            deleteNode = s[left]            left += 1            // update data            ...</code></pre><h2 id="Notice">Notice</h2><hr><p>There are 4 questions need to be thought in sliding window algorithm</p><ol><li><p>When move <code>right</code> to expand window indicating add characters, which data need to update?</p></li><li><p>Under what conditions, the window should pause to expand, and start to move <code>left</code> to shrink the window?</p></li><li><p>When move <code>left</code>, which means delete characters, which data need to update?</p></li><li><p>Should the result we want be updated when the window is enlarged or when the window is reduced?</p></li></ol><h2 id="Example">Example</h2><hr><h3 id="leetcode-76-Minimum-Window-Substring-hard">leetcode 76 Minimum Window Substring (hard)</h3><h4 id="Description">Description</h4><p>Given two strings <code>s</code> and <code>t</code>, return the minimum window in <code>s</code> which will contain all the characters in <code>t</code>. If there is no such window in <code>s</code> that covers all characters in <code>t</code>, return the empty string <code>"".</code></p><p><strong>Note</strong> that If there is such a window, it is guaranteed that there will always be only one unique minimum window in <code>s</code>.</p><h4 id="Example-2">Example</h4><pre><code>Input: s = "ADOBECODEBANC", t = "ABC"Output: "BANC"</code></pre><h4 id="Code">Code</h4><pre><code>def minWindow(self, s, t):    need, window, valid, length = {}, {}, 0, float('inf')    for node in t:        if node not in need:            need[node] = 1        else:            need[node] += 1    left, right = 0, 0    while right &lt; len(s):        node = s[right]        right += 1        if node in need.keys():            if node not in window:                window[node] = 1            else:                window[node] += 1            if window[node] == need[node]:                valid += 1        while valid == len(need):            if right - left &lt; length:                start = left                length = right - left            deleteNode = s[left]            left += 1            if deleteNode in need.keys():                if window[deleteNode] == need[deleteNode]:                    valid -= 1                window[deleteNode] -= 1    return '' if length == float('inf') else s[start: start+length]</code></pre><h3 id="leetcode-567-Permutation-in-String-Medium">leetcode 567 Permutation in String (Medium)</h3><h4 id="Description-2">Description:</h4><p>Given two strings <strong>s1</strong> and <strong>s2</strong>, write a function to return true if <strong>s2</strong> contains the permutation of <strong>s1</strong>. In other words, one of the first string’s permutations is the <strong>substring</strong> of the second string.</p><h4 id="Example-3">Example</h4><pre><code>Input: s1 = "ab" s2 = "eidbaooo"Output: TrueExplanation: s2 contains one permutation of s1 ("ba").</code></pre><h4 id="Code-2">Code</h4><pre><code>def checkInclusion(self, s1, s2):    need, window, valid, = {}, {}, 0    for node in s1:        if node not in need:            need[node] = 1        else:            need[node] += 1    left, right = 0, 0    while right &lt; len(s2):        node = s2[right]        right += 1        if node in need.keys():            if node not in window:                window[node] = 1            else:                window[node] += 1            if window[node] == need[node]:                valid += 1        while right - left &gt;= len(s1):            if valid == len(need):                return True            deleteNode = s2[left]            left += 1            if deleteNode in need.keys():                if window[deleteNode] == need[deleteNode]:                    valid -= 1                window[deleteNode] -= 1    return False</code></pre><h3 id="leetcode-438-Find-All-Anagrams-in-a-String-Medium">leetcode 438 Find All Anagrams in a String (Medium)</h3><h4 id="Description-3">Description:</h4><p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p><p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p><p>The order of output does not matter.</p><h4 id="Example-4">Example</h4><pre><code>Input:s: "cbaebabacd" p: "abc"Output:[0, 6]Explanation:The substring with start index = 0 is "cba", which is an anagram of "abc".The substring with start index = 6 is "bac", which is an anagram of "abc".</code></pre><h4 id="Code-3">Code</h4><pre><code>def findAnagrams(self, s, p):    need, window, valid, res = {}, {}, 0, []    for node in p:        if node not in need:            need[node] = 1        else:            need[node] += 1    left, right = 0, 0    while right &lt; len(s):        node = s[right]        right += 1        if node in need.keys():            if node not in window:                window[node] = 1            else:                window[node] += 1            if window[node] == need[node]:                valid += 1        while right - left &gt;= len(p):            if valid == len(need):                res.append(left)            deleteNode = s[left]            left += 1            if deleteNode in need.keys():                if window[deleteNode] == need[deleteNode]:                    valid -= 1                window[deleteNode] -= 1    return res</code></pre><h3 id="leetcode-3-Longest-Substring-Without-Repeating-Characters-Medium">leetcode 3 Longest Substring Without Repeating Characters (Medium)</h3><h4 id="Description-4">Description:</h4><p>Given a string s, find the length of the longest substring without repeating characters.</p><h4 id="Example-5">Example</h4><pre><code>Input: s = "abcabcbb"Output: 3Explanation: The answer is "abc", with the length of 3.</code></pre><h4 id="Code-4">Code</h4><pre><code>def lengthOfLongestSubstring(self, s):    if not s: return 0    left, right, res, window = 0, 0, 0, {}    while right &lt; len(s):        node = s[right]        right += 1        if node not in window:            window[node] = 1        else:            window[node] += 1        while window[node] &gt; 1:            deleteNode = s[left]            left += 1            window[deleteNode] -= 1        res = max(res, right - left)    return res</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Sliding Window Algorithm&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Sliding window algorithm is a kind of two pointers. This algorithm mostly used in string match.&lt;/p</summary>
      
    
    
    
    <category term="Data structure and algorithm" scheme="http://example.com/categories/Data-structure-and-algorithm/"/>
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
    <category term="Leetcode" scheme="http://example.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Heap and heapSort</title>
    <link href="http://example.com/2021/04/07/Heap-and-heapSort/"/>
    <id>http://example.com/2021/04/07/Heap-and-heapSort/</id>
    <published>2021-04-07T12:05:48.000Z</published>
    <updated>2021-04-09T02:06:33.772Z</updated>
    
    <content type="html"><![CDATA[<h1>Definition</h1><p>Heap is a kind of complete binary tree. A complete binary tree is a binary tree in which every level, except maybe last level, is full, and all nodes are as far as left as possible.</p><p>Commonly, there are two kinds of heap, the one is max-heap, and the other is min-heap.</p><p>Max-heap is the heap that parent’s value is greater than their children’s value, and the parent’s value of min-heap is less than their children.</p><h1>Operations</h1><h2 id="Insert-a-node">Insert a node</h2><ol><li><p>Make a new node in the last level, as far left as possible. If the last level is full, make a new one;</p></li><li><p>If the new one breaks heap property, swap with its parent node;</p></li><li><p>Repeat former two steps until every node is satisfied with heap property;</p></li><li><p>Time complexity <code>O(log H)</code> H is the height of tree</p></li></ol><h2 id="Delete-a-node">Delete a node</h2><ol><li><p>Remove the root node, and bring the last node (rightmost node in the last level) to the root;</p></li><li><p>If the root breaks heap property, look at its children and swap it with the larger one;</p></li><li><p>Repeat former two steps until no nodes conflict heap property;</p></li><li><p>Time complexity <code>O(log H)</code> H is the height of tree</p></li></ol><h1>Implement Max-heap with python</h1><pre><code>class MaxHeap:    def __init__(self, maxSize=None):        self.maxSize = maxSize        self.elements = []        self.count = 0    def addNode(self, value):        if self.count &gt; self.maxSize:            raise Exception('The heap is full.')        self.elements.append(value)        self.siftUp(self.count)        self.count += 1    def popNode(self):        if self.count == 0:            raise Exception('The heap is empty.')        value = self.elements[0]        self.count -= 1        self.elements[0] = self.elements[self.count]        self.siftDown(0)        return value    def siftUp(self, index):        if index &gt; 0:            parent = (index - 1) // 2            if self.elements[index] &gt; self.elements[parent]:                self.elements[index], self.elements[parent] = self.elements[parent], self.elements[index]                self.siftUp(parent)    def siftDown(self, index):        left = 2 * index + 1        right = 2 * index + 2        largest = index        if (left &lt;= self.count                and self.elements[left] &gt;= self.elements[largest]                and self.elements[left] &gt;= self.elements[right]):            largest = left        elif (right &lt; self.count              and self.elements[right] &gt;= self.elements[largest]):            largest = right        if largest != index:            self.elements[index], self.elements[largest] = self.elements[largest], self.elements[index]            self.siftDown(largest)</code></pre><h1>Heap sort</h1><p>From the above narrate, it is not hard to find no matter max-heap and min-heap, the top of heap is largest or least value of the whole heap, therefore, it</p><pre><code>    def heapSort(arr):      length = len(arr)      heap = MaxHeap(length)      for item in arr:        heap.addNode(item)      res = []      count = heap.count      while count &gt; 0:        node = heap.popNode()        res.insert(0, node)        count -= 1      return res</code></pre><p>Time complexity <code>O(N)</code> N is the length of array<br>Space complexity <code>O(N)</code> N is the length of array</p><p>Reference:</p><ol><li><p><a href="https://web.stanford.edu/class/cs97si/03-data-structures.pdf">https://web.stanford.edu/class/cs97si/03-data-structures.pdf</a></p></li><li><p><a href="https://python-data-structures-and-algorithms.readthedocs.io/zh/latest/15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/">https://python-data-structures-and-algorithms.readthedocs.io/zh/latest/15_堆与堆排序/heap_and_heapsort/</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Definition&lt;/h1&gt;
&lt;p&gt;Heap is a kind of complete binary tree. A complete binary tree is a binary tree in which every level, except maybe la</summary>
      
    
    
    
    <category term="Data structure and algorithm" scheme="http://example.com/categories/Data-structure-and-algorithm/"/>
    
    
    <category term="Data structure" scheme="http://example.com/tags/Data-structure/"/>
    
  </entry>
  
  <entry>
    <title>Stack and queue</title>
    <link href="http://example.com/2021/04/07/Stack-and-queue/"/>
    <id>http://example.com/2021/04/07/Stack-and-queue/</id>
    <published>2021-04-07T12:03:06.000Z</published>
    <updated>2021-04-09T02:06:33.779Z</updated>
    
    <content type="html"><![CDATA[<h1>Definition</h1><p><strong>Stack</strong>: Last in, first out (LIFO)</p><p><strong>Queue</strong>: First in, first out (FIFO)</p><h1>Operations</h1><h2 id="Stack">Stack</h2><ol><li><p>push(x): inserts x into a stack.</p></li><li><p>pop(): removes the newest item from a stack.</p></li><li><p>top(): returns the newest item from a stack.</p></li></ol><h2 id="Queue">Queue</h2><ol><li><p>Enqueue(x): inserts x into the queue.</p></li><li><p>Dequeue(): removes the oldest item from the queue.</p></li><li><p>Front(): returns the oldest item from the queue.</p></li></ol><h1>Implement with python</h1><h2 id="Stack-2">Stack</h2><pre><code>class Stack:    def __init__(self):        self.stack = []    def _push(self, value):        self.stack.append(value)    def _pop(self):        if not self.stack:            raise Exception('The stack is empty.')        return self.stack.pop()    def _top(self):        if not self.stack:            raise Exception('The stack is empty.')        return self.stack[-1]</code></pre><h2 id="Queue-2">Queue</h2><pre><code>class Queue:    def __init__(self):        self.queue = []    def enqueue(self, value):        self.queue.append(value)    def dequeue(self):        if not self.queue:            raise Exception('The queue is empty.')        return self.queue.pop(0)    def front(self):        if not self.queue:            raise Exception('The queue is empty.')        return self.queue[0]</code></pre><p>Reference:</p><ol><li><a href="https://web.stanford.edu/class/cs97si/03-data-structures.pdf">https://web.stanford.edu/class/cs97si/03-data-structures.pdf</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Definition&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;: Last in, first out (LIFO)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Queue&lt;/strong&gt;: First in, first out (FIFO)&lt;/p&gt;
&lt;h1&gt;O</summary>
      
    
    
    
    <category term="Data structure and algorithm" scheme="http://example.com/categories/Data-structure-and-algorithm/"/>
    
    
    <category term="Data structure" scheme="http://example.com/tags/Data-structure/"/>
    
  </entry>
  
</feed>

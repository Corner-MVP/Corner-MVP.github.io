{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/about/about.png","path":"about/about.png","modified":0,"renderable":0},{"_id":"source/images/house-robber.jpg","path":"images/house-robber.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-Claudia/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/js/common.js","path":"js/common.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/js/highlight.pack.js","path":"js/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/js/post.js","path":"js/post.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/about.scss","path":"style/about.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/archive.scss","path":"style/archive.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/base.scss","path":"style/base.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/post.scss","path":"style/post.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/widget-header.scss","path":"style/widget-header.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/widget-post-list.scss","path":"style/widget-post-list.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/common/bulma.css","path":"style/common/bulma.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/common/helper.scss","path":"style/common/helper.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/common/variable.scss","path":"style/common/variable.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/themes/default-dark.scss","path":"style/themes/default-dark.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/themes/default-light.scss","path":"style/themes/default-light.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/themes/highlight-theme-light.css","path":"style/themes/highlight-theme-light.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Claudia/source/style/themes/theme.scss","path":"style/themes/theme.scss","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Capacity-To-Ship-Packages-Within-D-Days.md","hash":"f4cc3aad802101cb624d87f613f948e3cf86bf8d","modified":1619446617000},{"_id":"source/_posts/1109-Corporate-Flight-Bookings.md","hash":"0ecac7e5614c6dcf54ba1e57f292d1273adcff35","modified":1630463874235},{"_id":"source/.DS_Store","hash":"1bdf7b404af7bf2b9da03a73e2ef4e1140f4b877","modified":1630467003258},{"_id":"source/_posts/Heap-and-heapSort.md","hash":"5f29e4e0d1cd22503a7ac9d72e19d24404bd8fea","modified":1617933993000},{"_id":"source/_posts/Leetcode-165-Compare-Version-Number.md","hash":"aa7b82d311a908391d4b5424fe871e054c8b8832","modified":1630636399781},{"_id":"source/_posts/Leetcode-430-Flatten-a-Multilevel-Doubly-Linked-List.md","hash":"3da3bbaa898824f39eba12af85c5bde7770951ac","modified":1632461435913},{"_id":"source/_posts/Leetcode-725-Split-Linked-List-in-Parts.md","hash":"27ac8b8da8cc6fca5e12bdbae555f98e0b783a9b","modified":1632288406869},{"_id":"source/_posts/881-Boats-to-Save-People.md","hash":"702ef327fa433f35ac77037e60b99d528fde78b7","modified":1630463986785},{"_id":"source/_posts/House-Robber-II.md","hash":"f308eceaa900fd8ce191c2dc979fb95b6a2988ce","modified":1618467709000},{"_id":"source/_posts/Sliding-window.md","hash":"f29e88d46efa89c268f6161565b66871f6a6e505","modified":1618021099000},{"_id":"source/_posts/Leetcode-19-Remove-Nth-Node-From-End-of-List.md","hash":"60931528bbf361a9c79faf22ce96330fbbc3b37a","modified":1630636399781},{"_id":"source/_posts/Stack-and-queue.md","hash":"459f590e2b0faa7ba120b08ae99bff8640fc9f77","modified":1617933993000},{"_id":"source/_posts/Ugly-Number.md","hash":"b2f3977f836e01d253eecb5cecb40463e775955c","modified":1618088942000},{"_id":"source/categories/index.md","hash":"dc9e7dcea7c6f4a1e8027ec784218982fef7ee0d","modified":1617889379000},{"_id":"source/about/index.md","hash":"b604b50c0a9697d1d967a6bc1a8f403797a28daa","modified":1630585860033},{"_id":"source/images/house-robber.jpg","hash":"69cae07f3ddbbb848157eb8c428989cd29f0f7de","modified":1618466988000},{"_id":"source/resume/index.md","hash":"50d6e193cbe7876d3523974b472277d9a2199a57","modified":1630465895585},{"_id":"themes/hexo-theme-Claudia/CODE_OF_CONDUCT.md","hash":"787b987cd6079f93c7846b69c3b4dfa41cb3ac03","modified":1630464658143},{"_id":"themes/hexo-theme-Claudia/CHANGELOG.md","hash":"6a2a5c3e4399d19fa06c175bc7e78c9b18413251","modified":1630464658143},{"_id":"themes/hexo-theme-Claudia/.DS_Store","hash":"a3a6eaa0620d51558b236413a0eca80f97458d8a","modified":1630467003215},{"_id":"themes/hexo-theme-Claudia/LICENSE","hash":"9812afb9d0aa8596067b6fd30cf6089345b7b678","modified":1630464658143},{"_id":"themes/hexo-theme-Claudia/CONTRIBUTING.md","hash":"618215987cc9a774c37cc70efa1cb8545457a49c","modified":1630464658143},{"_id":"themes/hexo-theme-Claudia/README.md","hash":"17911c948337830658d8322b6b9e37e8431b7b64","modified":1630464658144},{"_id":"themes/hexo-theme-Claudia/README-CN.md","hash":"2dddb18f2761b5e495d6f71ab9880797af839926","modified":1630464658144},{"_id":"themes/hexo-theme-Claudia/languages/en.yml","hash":"a2476669bc4171cd4f343e47c8dc6821b779aaff","modified":1630464658144},{"_id":"themes/hexo-theme-Claudia/languages/zh-CN.yml","hash":"9d8b1f0a337f56907aadddf406c5977435d34fc1","modified":1630464658144},{"_id":"themes/hexo-theme-Claudia/layout/about.pug","hash":"98dea176f76053d5deaf35ed25518d218d70be7d","modified":1630464658145},{"_id":"themes/hexo-theme-Claudia/layout/archive.pug","hash":"68c709495bc39a659d9c4b19216714a5ac2b5579","modified":1630464658145},{"_id":"themes/hexo-theme-Claudia/layout/category.pug","hash":"2147f3d66640bc6604c9b15325a480d196a4df3d","modified":1630464658145},{"_id":"themes/hexo-theme-Claudia/package.json","hash":"c59cb2089c51ed56deb2df69171d7adc63c1148f","modified":1630464658147},{"_id":"themes/hexo-theme-Claudia/layout/index.pug","hash":"b84b3b89b3ecd0f3c604c2517ccd694d6a8489f4","modified":1630464658145},{"_id":"themes/hexo-theme-Claudia/_config.yml","hash":"e051af0b6e7f468aa93414b0ecc180a53a5568dc","modified":1630464797238},{"_id":"themes/hexo-theme-Claudia/layout/page.pug","hash":"6c5db904a03adb4794b7ada222389da12d395bc7","modified":1630464658145},{"_id":"themes/hexo-theme-Claudia/layout/post.pug","hash":"c76194840b5d6b7b881651cb492ab4b6963d1725","modified":1630464658145},{"_id":"themes/hexo-theme-Claudia/layout/tag.pug","hash":"16dac6e0a6ef939ceb6adb21dfbe0276538ff269","modified":1630464658145},{"_id":"themes/hexo-theme-Claudia/layout/widget/base.pug","hash":"21a5eab68859adedc9997581fc54e848693c17d4","modified":1630464658146},{"_id":"themes/hexo-theme-Claudia/layout/widget/methods.pug","hash":"fa62f6ad95d1a4cda5038595d19d4d11b4b39e17","modified":1630464658146},{"_id":"themes/hexo-theme-Claudia/layout/resume.pug","hash":"9f931932a1b5cb0faac0b3eeb057125af0b469fe","modified":1630466148024},{"_id":"themes/hexo-theme-Claudia/layout/widget/widget-categories.pug","hash":"ea3bcd5f5fb06e26d8b67f30f224e7c129672980","modified":1630464658146},{"_id":"themes/hexo-theme-Claudia/layout/widget/widget-archives.pug","hash":"e6bcf8b09a5e06119baf3f97f7798ef7600ab65c","modified":1630464658146},{"_id":"themes/hexo-theme-Claudia/layout/widget/widget-post-list.pug","hash":"f034a4b8231f7933d06e364671b11847c74b9a5c","modified":1630464658146},{"_id":"themes/hexo-theme-Claudia/layout/widget/widget-header.pug","hash":"5e9b2035b31372c2bb11db6efe0e36b7df64d884","modified":1630464658146},{"_id":"themes/hexo-theme-Claudia/layout/widget/widget-profile.pug","hash":"fbe18f3dd5e8d2850f8e6510da4fbd499d5096f0","modified":1630464658147},{"_id":"themes/hexo-theme-Claudia/layout/widget/widget-recent.pug","hash":"7512dceae690ea219d562a6e450d633e29916072","modified":1630464658147},{"_id":"themes/hexo-theme-Claudia/layout/widget/widget-search.pug","hash":"c17612dd4ae2d439d757818ec0e4215d71dd9ad5","modified":1630464658147},{"_id":"themes/hexo-theme-Claudia/layout/widget/widget-sns.pug","hash":"8ec154d321b36a5f3bf5974c75668b45ec660c1d","modified":1630464658147},{"_id":"themes/hexo-theme-Claudia/layout/widget/widget-tag.pug","hash":"714a05148758e1e3cc12635c875cb6ef1753c6ab","modified":1630464658147},{"_id":"themes/hexo-theme-Claudia/source/js/common.js","hash":"7f62c8c148ee0b528a2bea47b248b2a7f5501142","modified":1630464658155},{"_id":"themes/hexo-theme-Claudia/source/images/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1630464817730},{"_id":"themes/hexo-theme-Claudia/source/js/post.js","hash":"04edd583f103ba444d8174d55e7f45e27b8f2549","modified":1630464658156},{"_id":"themes/hexo-theme-Claudia/source/style/about.scss","hash":"4a1beebb317c598b11fc4815e70b07bbb6d2aed7","modified":1630464658157},{"_id":"themes/hexo-theme-Claudia/source/style/archive.scss","hash":"cd1dc16dfa7c482cc88ddabaf8c9a459299a98cf","modified":1630464658157},{"_id":"themes/hexo-theme-Claudia/source/style/base.scss","hash":"da7457c952b6b433f273d7ecc562d24dcd4aa431","modified":1630464658157},{"_id":"themes/hexo-theme-Claudia/source/style/post.scss","hash":"8a3520a0ceb22a2fde35b09485e2df6dd5a23b6f","modified":1630464658159},{"_id":"themes/hexo-theme-Claudia/source/style/widget-header.scss","hash":"18782c2ab206abbeb0ee59632864251acfd20d85","modified":1630464658161},{"_id":"themes/hexo-theme-Claudia/source/style/common/helper.scss","hash":"7cd0982fe839e760523f8f85ea6f06f2b5d2111a","modified":1630464658159},{"_id":"themes/hexo-theme-Claudia/source/style/widget-post-list.scss","hash":"db24becef1636806767dfaa33b3f90c40450de8d","modified":1630464658161},{"_id":"themes/hexo-theme-Claudia/source/style/common/variable.scss","hash":"fffe6eacfa4d814626a1e1d84dc651233eded060","modified":1630464658159},{"_id":"themes/hexo-theme-Claudia/source/style/themes/default-dark.scss","hash":"0cbdc5738503f55e5b84e1bd00e445c98c7d56d2","modified":1630464658160},{"_id":"themes/hexo-theme-Claudia/source/style/themes/default-light.scss","hash":"23e7c1f87e252db80d34d36a2129e98dde7b1b55","modified":1630464658160},{"_id":"themes/hexo-theme-Claudia/source/style/themes/highlight-theme-light.css","hash":"f7b19080f00e10723bc86e6819fc25143a0137c5","modified":1630464658160},{"_id":"themes/hexo-theme-Claudia/source/style/themes/theme.scss","hash":"caf7517c9200bbf7152a7f5edba4298fbf9ae629","modified":1630464658160},{"_id":"themes/hexo-theme-Claudia/source/js/highlight.pack.js","hash":"2ef9bbbc688ce413686ce0eb64d0b25af4ea34e2","modified":1630464658156},{"_id":"themes/hexo-theme-Claudia/source/style/common/bulma.css","hash":"7ede761951c6f274850a1038416559a8f648c493","modified":1630464658159},{"_id":"source/about/about.png","hash":"46bf48af356754d9b1fb22eff620856ea1e60bb6","modified":1603255837000},{"_id":"themes/hexo-theme-Claudia/screenshot/claudia-cover.png","hash":"757680cd3648e3569d6a18abaf33180dc427d620","modified":1630464658155},{"_id":"themes/hexo-theme-Claudia/screenshot/claudia-cover-v2.png","hash":"f477d90d327a638a46b3caa172332e931955a532","modified":1630464658152},{"_id":"themes/hexo-theme-Claudia/source/images/avatar.jpg","hash":"fc9c639ee578bce7fff69e0b7beadf8adfbbbd8d","modified":1603256398000},{"_id":"public/search.xml","hash":"64e0c2f161639292e26f8acfe3ea4891d3539704","modified":1632461496388},{"_id":"public/atom.xml","hash":"a866ccb98a4ca452cedefdc3c5e2a746c1fc117f","modified":1632461496388},{"_id":"public/about/index.html","hash":"dfece7ebd300e1f3bc19194c22d7fd828dda2cb0","modified":1632461496388},{"_id":"public/categories/index.html","hash":"5c646b723005c41774d1f0bb715266f81ca88725","modified":1632461496388},{"_id":"public/resume/index.html","hash":"fd2b7d5648a543622b1bb37c12a7200055550c6b","modified":1632461496388},{"_id":"public/2021/04/08/Sliding-window/index.html","hash":"99ca8000a81c35095e2196f0c5b1e041afd471fc","modified":1632461496388},{"_id":"public/2021/04/07/Heap-and-heapSort/index.html","hash":"aca3ec28a63079bdede9050fbf71bcd41efd94b2","modified":1632461496388},{"_id":"public/2021/04/07/Stack-and-queue/index.html","hash":"d9b5fd1f5b82de35cf1a1b4d0b59a34e1f9b9d7d","modified":1632461496388},{"_id":"public/archives/page/2/index.html","hash":"1e2b6a81d946fa1cb1e2f3b8d989dcce2ee68387","modified":1632461496388},{"_id":"public/archives/2021/page/2/index.html","hash":"835a5f768f52338efa2049c364c460db10e34a1e","modified":1632461496388},{"_id":"public/archives/2021/04/index.html","hash":"bd03dc9851c9d4210aa67e8c790284e08741aa59","modified":1632461496388},{"_id":"public/archives/2021/08/index.html","hash":"3783bc588201d1ff118b903b883ab837804c1cae","modified":1632461496388},{"_id":"public/archives/2021/09/index.html","hash":"622fe8a179d1327d58a9e08cd74e8841c4899c90","modified":1632461496388},{"_id":"public/categories/Data-structure-and-algorithm/page/2/index.html","hash":"c3ff7a9c3d11d8877b7877b97dcb1dcdde60da6a","modified":1632461496388},{"_id":"public/categories/Data-structure-adn-algorithm/index.html","hash":"63b017386e97841eebccd7dab9e60151c159de4c","modified":1632461496388},{"_id":"public/page/2/index.html","hash":"94c7634b124ca9dee75975e53e40b26bd86e95d7","modified":1632461496388},{"_id":"public/tags/two-pointers/index.html","hash":"c215db938c083f9c018aeae67f0c718a1b64293b","modified":1632461496388},{"_id":"public/tags/greedy-algorithm/index.html","hash":"a72389a1e2877e9a11e5405778ed97678e76e8b3","modified":1632461496388},{"_id":"public/tags/Data-structure/index.html","hash":"be6f35de14dfb3a65913b2a94030c29ef39058e4","modified":1632461496388},{"_id":"public/tags/Linked-list/index.html","hash":"2c6420cba408d99f9bf255eab5eec394874319ad","modified":1632461496388},{"_id":"public/tags/DFS/index.html","hash":"0ca204e5e3412c63c70235e9fa8d21098f9920c4","modified":1632461496388},{"_id":"public/2021/09/24/Leetcode-430-Flatten-a-Multilevel-Doubly-Linked-List/index.html","hash":"b00a486f59e156b1d2cc8cc6580e473af36674c4","modified":1632461496388},{"_id":"public/2021/09/22/Leetcode-725-Split-Linked-List-in-Parts/index.html","hash":"43f8d62f28c7cca55696d677cb12838ea2105510","modified":1632461496388},{"_id":"public/2021/09/03/Leetcode-165-Compare-Version-Number/index.html","hash":"352a09334a9c98921a656c14cb5ba2ddd48abb39","modified":1632461496388},{"_id":"public/2021/09/02/Leetcode-19-Remove-Nth-Node-From-End-of-List/index.html","hash":"8264c7b4b98a2ec065748b2ee044853cfb4732d7","modified":1632461496388},{"_id":"public/2021/08/31/1109-Corporate-Flight-Bookings/index.html","hash":"3996a99196eb458a6bcccdbb9b3a570229490040","modified":1632461496388},{"_id":"public/2021/08/26/881-Boats-to-Save-People/index.html","hash":"49cf6484b422a2474a850cb4535ff34e0f1f6f61","modified":1632461496388},{"_id":"public/2021/04/26/Capacity-To-Ship-Packages-Within-D-Days/index.html","hash":"b182b5c7c3ceb94994a5aa0a18f8fcd0a4c1af14","modified":1632461496388},{"_id":"public/2021/04/15/House-Robber-II/index.html","hash":"36f440d42b3c157d68ada943e51d03bfbb1b3b02","modified":1632461496388},{"_id":"public/2021/04/10/Ugly-Number/index.html","hash":"845f96d2089b9000fbcf7846ce9b7afcaf4a4043","modified":1632461496388},{"_id":"public/archives/index.html","hash":"bef74ac9fba3bf0d6c4d08fb24c157adab451ad8","modified":1632461496388},{"_id":"public/archives/2021/index.html","hash":"03bf8f8ef61ee38b272fc50ed11e97ee87cb0a5a","modified":1632461496388},{"_id":"public/categories/Data-structure-and-algorithm/index.html","hash":"468d20bfa2368bde70f10df1953b9cfc1c453b3b","modified":1632461496388},{"_id":"public/index.html","hash":"99bc6f162ea06b7deb579c740fbcf86fc8c40298","modified":1632461496388},{"_id":"public/tags/algorithm/index.html","hash":"8548c1a78de6b6b595505e2bb5a2c8e3ca1e84b6","modified":1632461496388},{"_id":"public/tags/Leetcode/index.html","hash":"4fdf3aa94e34ec4dee812ed461378d4d740d1f71","modified":1632461496388},{"_id":"public/images/house-robber.jpg","hash":"69cae07f3ddbbb848157eb8c428989cd29f0f7de","modified":1632461496388},{"_id":"public/images/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1632461496388},{"_id":"public/js/common.js","hash":"7f62c8c148ee0b528a2bea47b248b2a7f5501142","modified":1632461496388},{"_id":"public/js/post.js","hash":"04edd583f103ba444d8174d55e7f45e27b8f2549","modified":1632461496388},{"_id":"public/style/base.css","hash":"d0f9a4993684c1026976433005914e7f34ddee3f","modified":1632461496388},{"_id":"public/style/post.css","hash":"42057cd7a90821105728c7f5959f455ec1cf0337","modified":1632461496388},{"_id":"public/style/widget-header.css","hash":"03af4d4589354d7eb4a04b0e81df98a783eaa31b","modified":1632461496388},{"_id":"public/style/widget-post-list.css","hash":"54596cc20c2149e5ae564eee166d6066275f38d2","modified":1632461496388},{"_id":"public/style/common/helper.css","hash":"072cd37d6e2878dca4ccd96c3fb5e19165b9edac","modified":1632461496388},{"_id":"public/style/common/variable.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632461496388},{"_id":"public/style/themes/default-dark.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632461496388},{"_id":"public/style/themes/default-light.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632461496388},{"_id":"public/style/themes/highlight-theme-light.css","hash":"f7b19080f00e10723bc86e6819fc25143a0137c5","modified":1632461496388},{"_id":"public/style/themes/theme.css","hash":"648ba0b6192e0af74afc5fb66a87c630daab674c","modified":1632461496388},{"_id":"public/style/about.css","hash":"be77ba5f4a125b94a487884cd66aaf2d10dbd8cd","modified":1632461496388},{"_id":"public/style/archive.css","hash":"d18a9c8eef4f28c787462a0718c5afec865553a1","modified":1632461496388},{"_id":"public/js/highlight.pack.js","hash":"2ef9bbbc688ce413686ce0eb64d0b25af4ea34e2","modified":1632461496388},{"_id":"public/about/about.png","hash":"46bf48af356754d9b1fb22eff620856ea1e60bb6","modified":1632461496388},{"_id":"public/images/avatar.jpg","hash":"fc9c639ee578bce7fff69e0b7beadf8adfbbbd8d","modified":1632461496388},{"_id":"public/style/common/bulma.css","hash":"7ede761951c6f274850a1038416559a8f648c493","modified":1632461496388}],"Category":[{"name":"Data structure and algorithm","_id":"cktxxet6n0004o24m9ecy1ri4"},{"name":"Data structure adn algorithm","_id":"cktxxet6z000qo24m61k29lx1"}],"Data":[],"Page":[{"title":"about","date":"2021-04-08T13:08:32.000Z","layout":"about","_content":"\nI create web applications for the Internet and mobile platforms. Both in the front-end and in the back-end. Specialised in **JavaScript, Vue, React, Node.js**, TypeScript and modern front-end.\n\nMy name is **Steven**, an full stack web developer located in China. Opinionated, always ready for a discussion, and to help build something great.\n\nMy passion is to creat *the best for the web*, and to always keep up with the latest technologies and trends.\n\nIn a nutshell: **I create simple solutions to complex problems.**\n\n**What I AM GOOD AT**\n\nThe main value I provide is that I can take a **complex subject** and turn it into something **understandable.** This way even starting programmers can follow what the complex parts of your product are doing.\n\nI love **sharing my knowlege** and like to **teach and mentor developers** while I work on projects. This way the team I am working with will get a bit of my experience transferred to them.\n\nMy belief is that I **bring more value** to the product if I teach my ways to the current development team.","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-04-08 21:08:32\nlayout: about\n---\n\nI create web applications for the Internet and mobile platforms. Both in the front-end and in the back-end. Specialised in **JavaScript, Vue, React, Node.js**, TypeScript and modern front-end.\n\nMy name is **Steven**, an full stack web developer located in China. Opinionated, always ready for a discussion, and to help build something great.\n\nMy passion is to creat *the best for the web*, and to always keep up with the latest technologies and trends.\n\nIn a nutshell: **I create simple solutions to complex problems.**\n\n**What I AM GOOD AT**\n\nThe main value I provide is that I can take a **complex subject** and turn it into something **understandable.** This way even starting programmers can follow what the complex parts of your product are doing.\n\nI love **sharing my knowlege** and like to **teach and mentor developers** while I work on projects. This way the team I am working with will get a bit of my experience transferred to them.\n\nMy belief is that I **bring more value** to the product if I teach my ways to the current development team.","updated":"2021-09-02T12:31:00.033Z","path":"about/index.html","comments":1,"_id":"cktxxet6h0000o24m997ockc6","content":"<p>I create web applications for the Internet and mobile platforms. Both in the front-end and in the back-end. Specialised in <strong>JavaScript, Vue, React, Node.js</strong>, TypeScript and modern front-end.</p>\n<p>My name is <strong>Steven</strong>, an full stack web developer located in China. Opinionated, always ready for a discussion, and to help build something great.</p>\n<p>My passion is to creat <em>the best for the web</em>, and to always keep up with the latest technologies and trends.</p>\n<p>In a nutshell: <strong>I create simple solutions to complex problems.</strong></p>\n<p><strong>What I AM GOOD AT</strong></p>\n<p>The main value I provide is that I can take a <strong>complex subject</strong> and turn it into something <strong>understandable.</strong> This way even starting programmers can follow what the complex parts of your product are doing.</p>\n<p>I love <strong>sharing my knowlege</strong> and like to <strong>teach and mentor developers</strong> while I work on projects. This way the team I am working with will get a bit of my experience transferred to them.</p>\n<p>My belief is that I <strong>bring more value</strong> to the product if I teach my ways to the current development team.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I create web applications for the Internet and mobile platforms. Both in the front-end and in the back-end. Specialised in <strong>JavaScript, Vue, React, Node.js</strong>, TypeScript and modern front-end.</p>\n<p>My name is <strong>Steven</strong>, an full stack web developer located in China. Opinionated, always ready for a discussion, and to help build something great.</p>\n<p>My passion is to creat <em>the best for the web</em>, and to always keep up with the latest technologies and trends.</p>\n<p>In a nutshell: <strong>I create simple solutions to complex problems.</strong></p>\n<p><strong>What I AM GOOD AT</strong></p>\n<p>The main value I provide is that I can take a <strong>complex subject</strong> and turn it into something <strong>understandable.</strong> This way even starting programmers can follow what the complex parts of your product are doing.</p>\n<p>I love <strong>sharing my knowlege</strong> and like to <strong>teach and mentor developers</strong> while I work on projects. This way the team I am working with will get a bit of my experience transferred to them.</p>\n<p>My belief is that I <strong>bring more value</strong> to the product if I teach my ways to the current development team.</p>\n"},{"title":"categories","date":"2021-04-08T13:09:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-04-08 21:09:39\ntype: categories\n---\n","updated":"2021-04-08T13:42:59.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cktxxet6m0002o24mfc76bzix","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"resume","date":"2021-09-01T03:10:47.000Z","layout":"resume","_content":"\nThis is my resume","source":"resume/index.md","raw":"---\ntitle: resume\ndate: 2021-09-01 11:10:47\nlayout: resume\n---\n\nThis is my resume","updated":"2021-09-01T03:11:35.585Z","path":"resume/index.html","comments":1,"_id":"cktxxet6p0006o24m0x42f443","content":"<p>This is my resume</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is my resume</p>\n"}],"Post":[{"title":"1109. Corporate Flight Bookings","date":"2021-08-31T00:24:36.000Z","_content":"\n## Description\nThere are `n` flights that are labeled from `1` to `n`.\n\nYou are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (**inclusive**) with `seatsi` seats reserved for **each flight** in the range.\n\nReturn *an array* `answer` *of length* `n`*, where* `answer[i]` *is the total number of seats reserved for flight* `i`.\n\n## Examples\n### example 1\n```\nInput: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\nOutput: [10,55,45,25,25]\nExplanation:\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = [10,55,45,25,25]\n```\n\n### example 2\n```\nInput: bookings = [[1,2,10],[2,2,15]], n = 2\nOutput: [10,25]\nExplanation:\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = [10,25]\n```\n\n### constraints\n- {% mathjax %}1 <= n <= 2 * 10^4{% endmathjax %}\n- {% mathjax %}1 <= bookings.length <= 2 * 10^4{% endmathjax %}\n- `bookings[i].length == 3`\n- {% mathjax %}1 <= first_i <= lasti <= n{% endmathjax %}\n- {% mathjax %}1 <= seats_i <= 10^4{% endmathjax %}\n\n## Idea\nA booking record is increment of an interval, therefore we can make use of difference array to solve similiar problems.\n\nWhen an interval `[l ,r]` need to add `value`, the change of difference array `d` is:\n\n- `d[l] += value`, which means starting from `l`, `l` has a `value` geater than `l - 1`;\n- `d[r + 1] -= value`, it means ending from `r`, `r` has a `value` geater than `r + 1`\n\nAnd finally, the result is the prefix sum of each index.\n\n## Code\n### Python\n```\nclass Solution:\n    def corpFlightBookings(self, bookings, n):\n\n        res = [0 for _ in range(n)]\n\n        for start, end, value in bookings:\n            res[start - 1] += value\n            if end < n:\n                res[end] -= value\n        \n        for i in range(1, n):\n            res[i] += res[i - 1]\n        \n        return res\n```\n\n### JavaScript\n```\n/**\n * @param {number[][]} bookings\n * @param {number} n\n * @return {number[]}\n */\nvar corpFlightBookings = function(bookings, n) {\n  const res = new Array(n).fill(0);\n  \n  for (const pair of bookings) {\n      const start = pair[0], end = pair[1], value = pair[2];\n      res[start - 1] += value;\n      if (end < n) res[end] -= value;\n  }\n  \n  for (let i = 1; i < n; i++) {\n      res[i] += res[i - 1];\n  }\n  return res\n};\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(m+n){% endmathjax %}, `n` is the length of `fights`, `m` is the length of `bookings`, it needs traverse `fights` and `bookings` respectively;\n- space complexity: {% mathjax %}O(1){% endmathjax %}.\n","source":"_posts/1109-Corporate-Flight-Bookings.md","raw":"---\ntitle: 1109. Corporate Flight Bookings\ndate: 2021-08-31 08:24:36\ntags:\n    - algorithm\n    - Leetcode\ncategories:\n    - Data structure and algorithm\n---\n\n## Description\nThere are `n` flights that are labeled from `1` to `n`.\n\nYou are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (**inclusive**) with `seatsi` seats reserved for **each flight** in the range.\n\nReturn *an array* `answer` *of length* `n`*, where* `answer[i]` *is the total number of seats reserved for flight* `i`.\n\n## Examples\n### example 1\n```\nInput: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\nOutput: [10,55,45,25,25]\nExplanation:\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = [10,55,45,25,25]\n```\n\n### example 2\n```\nInput: bookings = [[1,2,10],[2,2,15]], n = 2\nOutput: [10,25]\nExplanation:\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = [10,25]\n```\n\n### constraints\n- {% mathjax %}1 <= n <= 2 * 10^4{% endmathjax %}\n- {% mathjax %}1 <= bookings.length <= 2 * 10^4{% endmathjax %}\n- `bookings[i].length == 3`\n- {% mathjax %}1 <= first_i <= lasti <= n{% endmathjax %}\n- {% mathjax %}1 <= seats_i <= 10^4{% endmathjax %}\n\n## Idea\nA booking record is increment of an interval, therefore we can make use of difference array to solve similiar problems.\n\nWhen an interval `[l ,r]` need to add `value`, the change of difference array `d` is:\n\n- `d[l] += value`, which means starting from `l`, `l` has a `value` geater than `l - 1`;\n- `d[r + 1] -= value`, it means ending from `r`, `r` has a `value` geater than `r + 1`\n\nAnd finally, the result is the prefix sum of each index.\n\n## Code\n### Python\n```\nclass Solution:\n    def corpFlightBookings(self, bookings, n):\n\n        res = [0 for _ in range(n)]\n\n        for start, end, value in bookings:\n            res[start - 1] += value\n            if end < n:\n                res[end] -= value\n        \n        for i in range(1, n):\n            res[i] += res[i - 1]\n        \n        return res\n```\n\n### JavaScript\n```\n/**\n * @param {number[][]} bookings\n * @param {number} n\n * @return {number[]}\n */\nvar corpFlightBookings = function(bookings, n) {\n  const res = new Array(n).fill(0);\n  \n  for (const pair of bookings) {\n      const start = pair[0], end = pair[1], value = pair[2];\n      res[start - 1] += value;\n      if (end < n) res[end] -= value;\n  }\n  \n  for (let i = 1; i < n; i++) {\n      res[i] += res[i - 1];\n  }\n  return res\n};\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(m+n){% endmathjax %}, `n` is the length of `fights`, `m` is the length of `bookings`, it needs traverse `fights` and `bookings` respectively;\n- space complexity: {% mathjax %}O(1){% endmathjax %}.\n","slug":"1109-Corporate-Flight-Bookings","published":1,"updated":"2021-09-01T02:37:54.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet6j0001o24m738f8g5q","content":"<h2 id=\"Description\">Description</h2>\n<p>There are&nbsp;<code>n</code>&nbsp;flights that are labeled from&nbsp;<code>1</code>&nbsp;to&nbsp;<code>n</code>.</p>\n<p>You are given an array of flight bookings&nbsp;<code>bookings</code>, where&nbsp;<code>bookings[i] = [firsti, lasti, seatsi]</code>&nbsp;represents a booking for flights&nbsp;<code>firsti</code>&nbsp;through&nbsp;<code>lasti</code>&nbsp;(<strong>inclusive</strong>) with&nbsp;<code>seatsi</code>&nbsp;seats reserved for&nbsp;<strong>each flight</strong>&nbsp;in the range.</p>\n<p>Return&nbsp;<em>an array</em>&nbsp;<code>answer</code>&nbsp;<em>of length</em>&nbsp;<code>n</code><em>, where</em>&nbsp;<code>answer[i]</code>&nbsp;<em>is the total number of seats reserved for flight</em>&nbsp;<code>i</code>.</p>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<pre><code>Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\nOutput: [10,55,45,25,25]\nExplanation:\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = [10,55,45,25,25]\n</code></pre>\n<h3 id=\"example-2\">example 2</h3>\n<pre><code>Input: bookings = [[1,2,10],[2,2,15]], n = 2\nOutput: [10,25]\nExplanation:\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = [10,25]\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.487ex\" height=\"2.203ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 8171.1 973.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-1-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-1-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path><path id=\"MJX-1-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-1-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3489.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(5323.1, 0)\"><use xlink:href=\"#MJX-1-TEX-N-32\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6045.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2217\"></use></g><g data-mml-node=\"msup\" transform=\"translate(6767.6, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use><use xlink:href=\"#MJX-1-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1000, 413) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-N-34\"></use></g></g></g></g></svg></mjx-container>\n</li>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.464ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.042ex\" height=\"2.481ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 14604.8 1096.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-1-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-1-TEX-I-1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path><path id=\"MJX-1-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-1-TEX-I-1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-1-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-1-TEX-N-2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-1-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-1-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-1-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path><path id=\"MJX-1-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-1-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path><path id=\"MJX-1-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-1-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3040.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3525.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4010.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D458\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4531.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4876.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5476.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5953.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6422.6, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6867.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7165.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7631.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8231.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8708.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(9069.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-210E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9923, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(11756.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-32\"></use></g><g data-mml-node=\"mo\" transform=\"translate(12479, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2217\"></use></g><g data-mml-node=\"msup\" transform=\"translate(13201.2, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use><use xlink:href=\"#MJX-1-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1000, 413) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-N-34\"></use></g></g></g></g></svg></mjx-container>\n</li>\n<li><code>bookings[i].length == 3</code></li>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.464ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"26.938ex\" height=\"2.059ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 11906.6 910\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-1-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-1-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-1-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-1-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D453\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3161.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3506.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3957.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D460\"></use></g><g data-mml-node=\"msub\" transform=\"translate(4426.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(361, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(5359.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7193.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7491.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8020.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D460\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8489.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8850.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9472.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(11306.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g></g></g></svg></mjx-container>\n</li>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.357ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"19.716ex\" height=\"2.374ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 8714.6 1049.5\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-1-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-1-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-1-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-1-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-1-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-1-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D460\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3080.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3546.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4075.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"></use></g><g data-mml-node=\"msub\" transform=\"translate(4436.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D460\"></use></g><g data-mml-node=\"mi\" transform=\"translate(469, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(5477.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"msup\" transform=\"translate(7311.1, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use><use xlink:href=\"#MJX-1-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1000, 413) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-N-34\"></use></g></g></g></g></svg></mjx-container>\n</li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>A booking record is increment of an interval, therefore we can make use of difference array to solve similiar problems.</p>\n<p>When an interval <code>[l ,r]</code> need to add <code>value</code>, the change of difference array <code>d</code> is:</p>\n<ul>\n<li><code>d[l] += value</code>, which means starting from <code>l</code>, <code>l</code> has a <code>value</code> geater than <code>l - 1</code>;</li>\n<li><code>d[r + 1] -= value</code>, it means ending from <code>r</code>, <code>r</code> has a <code>value</code> geater than <code>r + 1</code></li>\n</ul>\n<p>And finally, the result is the prefix sum of each index.</p>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code>class Solution:\n    def corpFlightBookings(self, bookings, n):\n\n        res = [0 for _ in range(n)]\n\n        for start, end, value in bookings:\n            res[start - 1] += value\n            if end &lt; n:\n                res[end] -= value\n        \n        for i in range(1, n):\n            res[i] += res[i - 1]\n        \n        return res\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>/**\n * @param {number[][]} bookings\n * @param {number} n\n * @return {number[]}\n */\nvar corpFlightBookings = function(bookings, n) {\n  const res = new Array(n).fill(0);\n  \n  for (const pair of bookings) {\n      const start = pair[0], end = pair[1], value = pair[2];\n      res[start - 1] += value;\n      if (end &lt; n) res[end] -= value;\n  }\n  \n  for (let i = 1; i &lt; n; i++) {\n      res[i] += res[i - 1];\n  }\n  return res\n};\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.596ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4241.4 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45A\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2252.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3252.4, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3852.4, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>n</code> is the length of <code>fights</code>, <code>m</code> is the length of <code>bookings</code>, it needs traverse <code>fights</code> and <code>bookings</code> respectively;</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.618ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2041 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1652, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container>.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Description\">Description</h2>\n<p>There are <code>n</code> flights that are labeled from <code>1</code> to <code>n</code>.</p>\n<p>You are given an array of flight bookings <code>bookings</code>, where <code>bookings[i] = [firsti, lasti, seatsi]</code> represents a booking for flights <code>firsti</code> through <code>lasti</code> (<strong>inclusive</strong>) with <code>seatsi</code> seats reserved for <strong>each flight</strong> in the range.</p>\n<p>Return <em>an array</em> <code>answer</code> <em>of length</em> <code>n</code><em>, where</em> <code>answer[i]</code> <em>is the total number of seats reserved for flight</em> <code>i</code>.</p>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<pre><code>Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\nOutput: [10,55,45,25,25]\nExplanation:\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = [10,55,45,25,25]\n</code></pre>\n<h3 id=\"example-2\">example 2</h3>\n<pre><code>Input: bookings = [[1,2,10],[2,2,15]], n = 2\nOutput: [10,25]\nExplanation:\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = [10,25]\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.487ex\" height=\"2.203ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 8171.1 973.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-1-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-1-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path><path id=\"MJX-1-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-1-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3489.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(5323.1, 0)\"><use xlink:href=\"#MJX-1-TEX-N-32\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6045.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2217\"></use></g><g data-mml-node=\"msup\" transform=\"translate(6767.6, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use><use xlink:href=\"#MJX-1-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1000, 413) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-N-34\"></use></g></g></g></g></svg></mjx-container>\n</li>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.464ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.042ex\" height=\"2.481ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 14604.8 1096.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-1-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-1-TEX-I-1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path><path id=\"MJX-1-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-1-TEX-I-1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-1-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-1-TEX-N-2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-1-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-1-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-1-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path><path id=\"MJX-1-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-1-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path><path id=\"MJX-1-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-1-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3040.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3525.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4010.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D458\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4531.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4876.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5476.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5953.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6422.6, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6867.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7165.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7631.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8231.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8708.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(9069.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-210E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9923, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(11756.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-32\"></use></g><g data-mml-node=\"mo\" transform=\"translate(12479, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2217\"></use></g><g data-mml-node=\"msup\" transform=\"translate(13201.2, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use><use xlink:href=\"#MJX-1-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1000, 413) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-N-34\"></use></g></g></g></g></svg></mjx-container>\n</li>\n<li><code>bookings[i].length == 3</code></li>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.464ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"26.938ex\" height=\"2.059ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 11906.6 910\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-1-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-1-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-1-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-1-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D453\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3161.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3506.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3957.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D460\"></use></g><g data-mml-node=\"msub\" transform=\"translate(4426.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(361, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(5359.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7193.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7491.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8020.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D460\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8489.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8850.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9472.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(11306.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g></g></g></svg></mjx-container>\n</li>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.357ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"19.716ex\" height=\"2.374ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 8714.6 1049.5\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-1-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-1-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-1-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-1-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-1-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-1-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D460\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3080.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3546.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4075.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"></use></g><g data-mml-node=\"msub\" transform=\"translate(4436.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D460\"></use></g><g data-mml-node=\"mi\" transform=\"translate(469, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(5477.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3C\"></use><use xlink:href=\"#MJX-1-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"msup\" transform=\"translate(7311.1, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use><use xlink:href=\"#MJX-1-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1000, 413) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-N-34\"></use></g></g></g></g></svg></mjx-container>\n</li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>A booking record is increment of an interval, therefore we can make use of difference array to solve similiar problems.</p>\n<p>When an interval <code>[l ,r]</code> need to add <code>value</code>, the change of difference array <code>d</code> is:</p>\n<ul>\n<li><code>d[l] += value</code>, which means starting from <code>l</code>, <code>l</code> has a <code>value</code> geater than <code>l - 1</code>;</li>\n<li><code>d[r + 1] -= value</code>, it means ending from <code>r</code>, <code>r</code> has a <code>value</code> geater than <code>r + 1</code></li>\n</ul>\n<p>And finally, the result is the prefix sum of each index.</p>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code>class Solution:\n    def corpFlightBookings(self, bookings, n):\n\n        res = [0 for _ in range(n)]\n\n        for start, end, value in bookings:\n            res[start - 1] += value\n            if end &lt; n:\n                res[end] -= value\n        \n        for i in range(1, n):\n            res[i] += res[i - 1]\n        \n        return res\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>/**\n * @param &#123;number[][]&#125; bookings\n * @param &#123;number&#125; n\n * @return &#123;number[]&#125;\n */\nvar corpFlightBookings = function(bookings, n) &#123;\n  const res = new Array(n).fill(0);\n  \n  for (const pair of bookings) &#123;\n      const start = pair[0], end = pair[1], value = pair[2];\n      res[start - 1] += value;\n      if (end &lt; n) res[end] -= value;\n  &#125;\n  \n  for (let i = 1; i &lt; n; i++) &#123;\n      res[i] += res[i - 1];\n  &#125;\n  return res\n&#125;;\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.596ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4241.4 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45A\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2252.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3252.4, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3852.4, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>n</code> is the length of <code>fights</code>, <code>m</code> is the length of <code>bookings</code>, it needs traverse <code>fights</code> and <code>bookings</code> respectively;</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.618ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2041 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1652, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container>.</li>\n</ul>\n"},{"title":"881. Boats to Save People.md","date":"2021-08-26T14:56:28.000Z","_content":"\n## Description\nYou are given an array `people` where `people[i]` is the weight of the `ith` person, and an **infinite number of boats** where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`.\n\nReturn *the minimum number of boats to carry every given person*.\n\n## Examples\n### example 1\n```\nInput: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)\n```\n\n### example 2\n```\nInput: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)\n```\n\n### example 3\n```\nInput: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)\n```\n\n### constraints\n- {% mathjax %}1 <= people.length <= 5 * 10^4{% endmathjax %}\n- {% mathjax %}1 <= people[i] <= limit <= 3 * 10^4{% endmathjax %}\n\n## Idea\nIn order to take all people with less boats, it must let more boats to take two people.\n\n`n` is the length of array `people`, `res` is the final answer and {% mathjax %}f(){% endmathjax %} is the function to solve this problem. To consider people with lightest weight.\n- if the lightest weight people cannot take boat with heaviest people, it indicates that the heaviest cannot take the same boats with other people and he(she) need take boat alone. And the following question is to consider how many boats that `n-1` people need. Therefore, we can know that {% mathjax %}res += 1 + f(n-1){% endmathjax %};\n- if the total weight of lightest and heaviest people is less than `limit`, it means they can take boat together, namely, `res += 1` and the follwing question is to consider how many boats that `n-2` people need. And {% mathjax %}res += 1 + f(n-2){% endmathjax %}.\n\n## Code\n### Python\n```\nclass Solution:\n    def numRescueBoats(self, people, limit):\n        res = 0\n        people.sort()\n        light, heavy = 0, len(people) - 1\n\n        while light <= heavy:\n            if people[light] + people[heavy] > limit:\n                heavy -= 1\n            else:\n                light += 1\n                heavy -= 1\n            res += 1\n        \n        return res\n```\n\n### JavaScript\n```\n/**\n * @param {number[]} people\n * @param {number} limit\n * @return {number}\n */\nvar numRescueBoats = function(people, limit) {\n  let res = 0;\n  people.sort((a, b) => a - b)\n  let light = 0, heavy = people.length - 1\n  while (light <= heavy) {\n      if (people[light] + people[heavy] > limit) {\n          heavy -= 1\n      } else {\n          heavy -= 1\n          light += 1\n      }\n      res += 1\n  }\n  return res\n};\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(nlog(n)){% endmathjax %}, `n` is the length of array `people`, sort array `people` need {% mathjax %}O(nlog(n)){% endmathjax %};\n- space complexity: {% mathjax %}O(log(n)){% endmathjax %}, sorting need {% mathjax %}O(log(n)){% endmathjax %} extra space.\n","source":"_posts/881-Boats-to-Save-People.md","raw":"---\ntitle: 881. Boats to Save People.md\ndate: 2021-08-26 22:56:28\ntags:\n    - algorithm\n    - Leetcode\n    - two-pointers\n    - greedy-algorithm\ncategories:\n    - Data structure and algorithm\n---\n\n## Description\nYou are given an array `people` where `people[i]` is the weight of the `ith` person, and an **infinite number of boats** where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`.\n\nReturn *the minimum number of boats to carry every given person*.\n\n## Examples\n### example 1\n```\nInput: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)\n```\n\n### example 2\n```\nInput: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)\n```\n\n### example 3\n```\nInput: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)\n```\n\n### constraints\n- {% mathjax %}1 <= people.length <= 5 * 10^4{% endmathjax %}\n- {% mathjax %}1 <= people[i] <= limit <= 3 * 10^4{% endmathjax %}\n\n## Idea\nIn order to take all people with less boats, it must let more boats to take two people.\n\n`n` is the length of array `people`, `res` is the final answer and {% mathjax %}f(){% endmathjax %} is the function to solve this problem. To consider people with lightest weight.\n- if the lightest weight people cannot take boat with heaviest people, it indicates that the heaviest cannot take the same boats with other people and he(she) need take boat alone. And the following question is to consider how many boats that `n-1` people need. Therefore, we can know that {% mathjax %}res += 1 + f(n-1){% endmathjax %};\n- if the total weight of lightest and heaviest people is less than `limit`, it means they can take boat together, namely, `res += 1` and the follwing question is to consider how many boats that `n-2` people need. And {% mathjax %}res += 1 + f(n-2){% endmathjax %}.\n\n## Code\n### Python\n```\nclass Solution:\n    def numRescueBoats(self, people, limit):\n        res = 0\n        people.sort()\n        light, heavy = 0, len(people) - 1\n\n        while light <= heavy:\n            if people[light] + people[heavy] > limit:\n                heavy -= 1\n            else:\n                light += 1\n                heavy -= 1\n            res += 1\n        \n        return res\n```\n\n### JavaScript\n```\n/**\n * @param {number[]} people\n * @param {number} limit\n * @return {number}\n */\nvar numRescueBoats = function(people, limit) {\n  let res = 0;\n  people.sort((a, b) => a - b)\n  let light = 0, heavy = people.length - 1\n  while (light <= heavy) {\n      if (people[light] + people[heavy] > limit) {\n          heavy -= 1\n      } else {\n          heavy -= 1\n          light += 1\n      }\n      res += 1\n  }\n  return res\n};\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(nlog(n)){% endmathjax %}, `n` is the length of array `people`, sort array `people` need {% mathjax %}O(nlog(n)){% endmathjax %};\n- space complexity: {% mathjax %}O(log(n)){% endmathjax %}, sorting need {% mathjax %}O(log(n)){% endmathjax %} extra space.\n","slug":"881-Boats-to-Save-People","published":1,"updated":"2021-09-01T02:39:46.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet6m0003o24m423ee9aa","content":"<h2 id=\"Description\">Description</h2>\n<p>You are given an array&nbsp;<code>people</code>&nbsp;where&nbsp;<code>people[i]</code>&nbsp;is the weight of the&nbsp;<code>ith</code>&nbsp;person, and an&nbsp;<strong>infinite number of boats</strong>&nbsp;where each boat can carry a maximum weight of&nbsp;<code>limit</code>. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most&nbsp;<code>limit</code>.</p>\n<p>Return&nbsp;<em>the minimum number of boats to carry every given person</em>.</p>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<pre><code>Input: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)\n</code></pre>\n<h3 id=\"example-2\">example 2</h3>\n<pre><code>Input: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)\n</code></pre>\n<h3 id=\"example-3\">example 3</h3>\n<pre><code>Input: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.464ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"30.576ex\" height=\"2.481ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 13514.8 1096.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-2-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-2-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-2-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path><path id=\"MJX-2-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-2-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-2-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-2-TEX-N-2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path><path id=\"MJX-2-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-2-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-2-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path><path id=\"MJX-2-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-2-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path><path id=\"MJX-2-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-2-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3C\"></use><use xlink:href=\"#MJX-2-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45D\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3114.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3580.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4065.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45D\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4568.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4866.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5332.6, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5777.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6075.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6541.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7141.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D454\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7618.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7979.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-210E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8833, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3C\"></use><use xlink:href=\"#MJX-2-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(10666.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-35\"></use></g><g data-mml-node=\"mo\" transform=\"translate(11389, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2217\"></use></g><g data-mml-node=\"msup\" transform=\"translate(12111.2, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use><use xlink:href=\"#MJX-2-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1000, 413) scale(0.707)\"><use xlink:href=\"#MJX-2-TEX-N-34\"></use></g></g></g></g></svg></mjx-container>\n</li>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"35.14ex\" height=\"2.583ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 15531.7 1141.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-2-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-2-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-2-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path><path id=\"MJX-2-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-2-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-2-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-2-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path><path id=\"MJX-2-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-N-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path><path id=\"MJX-2-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-2-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-2-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path><path id=\"MJX-2-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-2-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3C\"></use><use xlink:href=\"#MJX-2-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45D\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3114.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3580.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4065.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45D\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4568.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4866.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5332.6, 0)\"><use xlink:href=\"#MJX-2-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5610.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5955.6, 0)\"><use xlink:href=\"#MJX-2-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6511.3, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3C\"></use><use xlink:href=\"#MJX-2-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8345.1, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8643.1, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D456\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8988.1, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(9866.1, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D456\"></use></g><g data-mml-node=\"mi\" transform=\"translate(10211.1, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D461\"></use></g><g data-mml-node=\"mo\" transform=\"translate(10849.9, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3C\"></use><use xlink:href=\"#MJX-2-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(12683.7, 0)\"><use xlink:href=\"#MJX-2-TEX-N-33\"></use></g><g data-mml-node=\"mo\" transform=\"translate(13405.9, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2217\"></use></g><g data-mml-node=\"msup\" transform=\"translate(14128.1, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use><use xlink:href=\"#MJX-2-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1000, 413) scale(0.707)\"><use xlink:href=\"#MJX-2-TEX-N-34\"></use></g></g></g></g></svg></mjx-container>\n</li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>In order to take all people with less boats, it must let more boats to take two people.</p>\n<p><code>n</code> is the length of array <code>people</code>, <code>res</code> is the final answer and <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.005ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 1328 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D453\"></use></g><g data-mml-node=\"mo\" transform=\"translate(550, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mo\" transform=\"translate(939, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container> is the function to solve this problem. To consider people with lightest weight.</p>\n<ul>\n<li>if the lightest weight people cannot take boat with heaviest people, it indicates that the heaviest cannot take the same boats with other people and he(she) need take boat alone. And the following question is to consider how many boats that <code>n-1</code> people need. Therefore, we can know that <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.069ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8870.4 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-2-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-2-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-2-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-2-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-2-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(451, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(917, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1386, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2441.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3497.6, 0)\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4219.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5220, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D453\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5770, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6159, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6981.2, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(7981.4, 0)\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8481.4, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container>;</li>\n<li>if the total weight of lightest and heaviest people is less than <code>limit</code>, it means they can take boat together, namely, <code>res += 1</code> and the follwing question is to consider how many boats that <code>n-2</code> people need. And <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.069ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8870.4 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-2-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-2-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-2-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-2-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-2-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-2-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(451, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(917, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1386, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2441.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3497.6, 0)\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4219.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5220, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D453\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5770, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6159, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6981.2, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(7981.4, 0)\"><use xlink:href=\"#MJX-2-TEX-N-32\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8481.4, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container>.</li>\n</ul>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code>class Solution:\n    def numRescueBoats(self, people, limit):\n        res = 0\n        people.sort()\n        light, heavy = 0, len(people) - 1\n\n        while light &lt;= heavy:\n            if people[light] + people[heavy] &gt; limit:\n                heavy -= 1\n            else:\n                light += 1\n                heavy -= 1\n            res += 1\n        \n        return res\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>/**\n * @param {number[]} people\n * @param {number} limit\n * @return {number}\n */\nvar numRescueBoats = function(people, limit) {\n  let res = 0;\n  people.sort((a, b) =&gt; a - b)\n  let light = 0, heavy = people.length - 1\n  while (light &lt;= heavy) {\n      if (people[light] + people[heavy] &gt; limit) {\n          heavy -= 1\n      } else {\n          heavy -= 1\n          light += 1\n      }\n      res += 1\n  }\n  return res\n};\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.812ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4779 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-2-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-2-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2050, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2535, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3012, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3401, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4001, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4390, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>n</code> is the length of array <code>people</code>, sort array <code>people</code> need <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.812ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4779 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-1-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-1-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2050, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2535, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3012, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3401, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4001, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4390, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container>;</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.455ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4179 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-1-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-1-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1450, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1935, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2412, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2801, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3401, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3790, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container>, sorting need <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.455ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4179 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-1-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-1-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1450, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1935, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2412, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2801, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3401, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3790, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container> extra space.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Description\">Description</h2>\n<p>You are given an array <code>people</code> where <code>people[i]</code> is the weight of the <code>ith</code> person, and an <strong>infinite number of boats</strong> where each boat can carry a maximum weight of <code>limit</code>. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most <code>limit</code>.</p>\n<p>Return <em>the minimum number of boats to carry every given person</em>.</p>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<pre><code>Input: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)\n</code></pre>\n<h3 id=\"example-2\">example 2</h3>\n<pre><code>Input: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)\n</code></pre>\n<h3 id=\"example-3\">example 3</h3>\n<pre><code>Input: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.464ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"30.576ex\" height=\"2.481ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 13514.8 1096.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-2-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-2-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-2-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path><path id=\"MJX-2-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-2-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-2-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-2-TEX-N-2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path><path id=\"MJX-2-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-2-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-2-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path><path id=\"MJX-2-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-2-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path><path id=\"MJX-2-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-2-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3C\"></use><use xlink:href=\"#MJX-2-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45D\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3114.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3580.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4065.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45D\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4568.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4866.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5332.6, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5777.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6075.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6541.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7141.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D454\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7618.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7979.2, 0)\"><use xlink:href=\"#MJX-2-TEX-I-210E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8833, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3C\"></use><use xlink:href=\"#MJX-2-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(10666.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-35\"></use></g><g data-mml-node=\"mo\" transform=\"translate(11389, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2217\"></use></g><g data-mml-node=\"msup\" transform=\"translate(12111.2, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use><use xlink:href=\"#MJX-2-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1000, 413) scale(0.707)\"><use xlink:href=\"#MJX-2-TEX-N-34\"></use></g></g></g></g></svg></mjx-container>\n</li>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"35.14ex\" height=\"2.583ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 15531.7 1141.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-2-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-2-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-2-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path><path id=\"MJX-2-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-2-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-2-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-2-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path><path id=\"MJX-2-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-N-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path><path id=\"MJX-2-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-2-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-2-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path><path id=\"MJX-2-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-2-TEX-N-34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3C\"></use><use xlink:href=\"#MJX-2-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45D\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3114.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3580.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4065.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45D\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4568.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4866.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5332.6, 0)\"><use xlink:href=\"#MJX-2-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5610.6, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5955.6, 0)\"><use xlink:href=\"#MJX-2-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6511.3, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3C\"></use><use xlink:href=\"#MJX-2-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8345.1, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8643.1, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D456\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8988.1, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(9866.1, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D456\"></use></g><g data-mml-node=\"mi\" transform=\"translate(10211.1, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D461\"></use></g><g data-mml-node=\"mo\" transform=\"translate(10849.9, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3C\"></use><use xlink:href=\"#MJX-2-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(12683.7, 0)\"><use xlink:href=\"#MJX-2-TEX-N-33\"></use></g><g data-mml-node=\"mo\" transform=\"translate(13405.9, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2217\"></use></g><g data-mml-node=\"msup\" transform=\"translate(14128.1, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use><use xlink:href=\"#MJX-2-TEX-N-30\" transform=\"translate(500, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1000, 413) scale(0.707)\"><use xlink:href=\"#MJX-2-TEX-N-34\"></use></g></g></g></g></svg></mjx-container>\n</li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>In order to take all people with less boats, it must let more boats to take two people.</p>\n<p><code>n</code> is the length of array <code>people</code>, <code>res</code> is the final answer and <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.005ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 1328 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D453\"></use></g><g data-mml-node=\"mo\" transform=\"translate(550, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mo\" transform=\"translate(939, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container> is the function to solve this problem. To consider people with lightest weight.</p>\n<ul>\n<li>if the lightest weight people cannot take boat with heaviest people, it indicates that the heaviest cannot take the same boats with other people and he(she) need take boat alone. And the following question is to consider how many boats that <code>n-1</code> people need. Therefore, we can know that <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.069ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8870.4 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-2-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-2-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-2-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-2-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-2-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(451, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(917, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1386, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2441.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3497.6, 0)\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4219.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5220, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D453\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5770, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6159, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6981.2, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(7981.4, 0)\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8481.4, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container>;</li>\n<li>if the total weight of lightest and heaviest people is less than <code>limit</code>, it means they can take boat together, namely, <code>res += 1</code> and the follwing question is to consider how many boats that <code>n-2</code> people need. And <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.069ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 8870.4 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-2-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-2-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-2-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-2-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-2-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-2-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(451, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(917, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1386, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2441.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(3497.6, 0)\"><use xlink:href=\"#MJX-2-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4219.8, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5220, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D453\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5770, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6159, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6981.2, 0)\"><use xlink:href=\"#MJX-2-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(7981.4, 0)\"><use xlink:href=\"#MJX-2-TEX-N-32\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8481.4, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container>.</li>\n</ul>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code>class Solution:\n    def numRescueBoats(self, people, limit):\n        res = 0\n        people.sort()\n        light, heavy = 0, len(people) - 1\n\n        while light &lt;= heavy:\n            if people[light] + people[heavy] &gt; limit:\n                heavy -= 1\n            else:\n                light += 1\n                heavy -= 1\n            res += 1\n        \n        return res\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>/**\n * @param &#123;number[]&#125; people\n * @param &#123;number&#125; limit\n * @return &#123;number&#125;\n */\nvar numRescueBoats = function(people, limit) &#123;\n  let res = 0;\n  people.sort((a, b) =&gt; a - b)\n  let light = 0, heavy = people.length - 1\n  while (light &lt;= heavy) &#123;\n      if (people[light] + people[heavy] &gt; limit) &#123;\n          heavy -= 1\n      &#125; else &#123;\n          heavy -= 1\n          light += 1\n      &#125;\n      res += 1\n  &#125;\n  return res\n&#125;;\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.812ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4779 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-2-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-2-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2050, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2535, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3012, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3401, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4001, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4390, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>n</code> is the length of array <code>people</code>, sort array <code>people</code> need <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.812ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4779 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-1-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-1-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2050, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2535, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3012, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3401, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4001, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4390, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container>;</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.455ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4179 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-1-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-1-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1450, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1935, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2412, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2801, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3401, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3790, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container>, sorting need <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.455ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 4179 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-1-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-1-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1450, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1935, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2412, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2801, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3401, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3790, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"></use></g></g></g></svg></mjx-container> extra space.</li>\n</ul>\n"},{"title":"Capacity To Ship Packages Within D Days","date":"2021-04-26T14:04:53.000Z","_content":"\n![delivery](https://raw.githubusercontent.com/Corner-MVP/hexo-picture/main/delivery.jpg)\n\n# 1011. Capacity To Ship Packages Within D Days\n---\n\n**Description**\n\nA conveyor belt has packages that must be shipped from one port to another within `D` days.\n\nThe {% mathjax %}i^{th}{% endmathjax %} package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship.\n\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `D` days.\n\n**Input and output**\n\n```\nInput: weights = [1,2,3,4,5,6,7,8,9,10], D = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n```\n\n```\nInput: weights = [3,2,2,4,1,4], D = 3\nOutput: 6\nExplanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n```\n\n**Solution**\n\nThere exists a lower limit {% mathjax %}x_{res}{% endmathjax %} that when {% mathjax %}x \\geq x_{res}{% endmathjax %}, we can deliver packages in `D` days and vice versa. At the same time, {% mathjax %}x_{res}{% endmathjax %} is the result. Therefore, this is a binary search problem. The left boundary is maximum of weights, and the right boundary is total weights. During binary search, we need to judge whether current capacity meets to the day requirement. And we can solve it by greedy algorithm.\n\n```\nclass Solution:\n    def shipWithinDays(self, weights, D):\n        \n        left, right = max(weights), sum(weights)\n        \n        while left < right:\n            \n            mid = left + (right - left) // 2\n            \n            days, curr = 1, 0\n            for weight in weights:\n                \n                if curr + weight > mid:\n                    curr = 0\n                    days += 1\n                \n                curr += weight\n            \n            if days > D:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left\n```\n\n# Time and space complexity\n\nTime complexity {% mathjax %}O(nlog\\sum w){% endmathjax %}, `n` is the length of array weights. {% mathjax %}\\sum w{% endmathjax %} is sum of elements in array weights. The number of times the binary search needs to be performed is {% mathjax %}O(log(\\sum w){% endmathjax %}. In every binary search, array need to be traversed and time is `O(n)`. So the total time is {% mathjax %}O(nlog\\sum w){% endmathjax %}\n\nSpace complexity `O(n)`\n","source":"_posts/Capacity-To-Ship-Packages-Within-D-Days.md","raw":"---\ntitle: Capacity To Ship Packages Within D Days\ndate: 2021-04-26 22:04:53\ntags:\n    - algorithm\n    - Leetcode\ncategories:\n    - Data structure and algorithm\n---\n\n![delivery](https://raw.githubusercontent.com/Corner-MVP/hexo-picture/main/delivery.jpg)\n\n# 1011. Capacity To Ship Packages Within D Days\n---\n\n**Description**\n\nA conveyor belt has packages that must be shipped from one port to another within `D` days.\n\nThe {% mathjax %}i^{th}{% endmathjax %} package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship.\n\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `D` days.\n\n**Input and output**\n\n```\nInput: weights = [1,2,3,4,5,6,7,8,9,10], D = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n```\n\n```\nInput: weights = [3,2,2,4,1,4], D = 3\nOutput: 6\nExplanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n```\n\n**Solution**\n\nThere exists a lower limit {% mathjax %}x_{res}{% endmathjax %} that when {% mathjax %}x \\geq x_{res}{% endmathjax %}, we can deliver packages in `D` days and vice versa. At the same time, {% mathjax %}x_{res}{% endmathjax %} is the result. Therefore, this is a binary search problem. The left boundary is maximum of weights, and the right boundary is total weights. During binary search, we need to judge whether current capacity meets to the day requirement. And we can solve it by greedy algorithm.\n\n```\nclass Solution:\n    def shipWithinDays(self, weights, D):\n        \n        left, right = max(weights), sum(weights)\n        \n        while left < right:\n            \n            mid = left + (right - left) // 2\n            \n            days, curr = 1, 0\n            for weight in weights:\n                \n                if curr + weight > mid:\n                    curr = 0\n                    days += 1\n                \n                curr += weight\n            \n            if days > D:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left\n```\n\n# Time and space complexity\n\nTime complexity {% mathjax %}O(nlog\\sum w){% endmathjax %}, `n` is the length of array weights. {% mathjax %}\\sum w{% endmathjax %} is sum of elements in array weights. The number of times the binary search needs to be performed is {% mathjax %}O(log(\\sum w){% endmathjax %}. In every binary search, array need to be traversed and time is `O(n)`. So the total time is {% mathjax %}O(nlog\\sum w){% endmathjax %}\n\nSpace complexity `O(n)`\n","slug":"Capacity-To-Ship-Packages-Within-D-Days","published":1,"updated":"2021-04-26T14:16:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet6p0007o24m9t6s0yyn","content":"<p><img src=\"https://raw.githubusercontent.com/Corner-MVP/hexo-picture/main/delivery.jpg\" alt=\"delivery\"></p>\n<h1>1011. Capacity To Ship Packages Within D Days</h1>\n<hr>\n<p><strong>Description</strong></p>\n<p>A conveyor belt has packages that must be shipped from one port to another within <code>D</code> days.</p>\n<p>The <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.025ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.393ex\" height=\"2.07ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -903.7 1057.6 914.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-3-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D456\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(345, 413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(361, 0)\"><use xlink:href=\"#MJX-3-TEX-I-210E\"></use></g></g></g></g></g></svg></mjx-container> package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p>\n<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>D</code> days.</p>\n<p><strong>Input and output</strong></p>\n<pre><code>Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n</code></pre>\n<pre><code>Input: weights = [3,2,2,4,1,4], D = 3\nOutput: 6\nExplanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n</code></pre>\n<p><strong>Solution</strong></p>\n<p>There exists a lower limit <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.357ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.625ex\" height=\"1.357ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1602 599.8\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-3-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D465\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(572, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(451, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(917, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D460\"></use></g></g></g></g></g></svg></mjx-container> that when <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.357ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.936ex\" height=\"1.796ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -636 3507.6 793.8\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3-TEX-N-2265\" d=\"M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path><path id=\"MJX-3-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-3-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(849.8, 0)\"><use xlink:href=\"#MJX-3-TEX-N-2265\"></use></g><g data-mml-node=\"msub\" transform=\"translate(1905.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D465\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(572, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(451, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(917, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D460\"></use></g></g></g></g></g></svg></mjx-container>, we can deliver packages in <code>D</code> days and vice versa. At the same time, <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.357ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.625ex\" height=\"1.357ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1602 599.8\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-3-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D465\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(572, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(451, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(917, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D460\"></use></g></g></g></g></g></svg></mjx-container> is the result. Therefore, this is a binary search problem. The left boundary is maximum of weights, and the right boundary is total weights. During binary search, we need to judge whether current capacity meets to the day requirement. And we can solve it by greedy algorithm.</p>\n<pre><code>class Solution:\n    def shipWithinDays(self, weights, D):\n        \n        left, right = max(weights), sum(weights)\n        \n        while left &lt; right:\n            \n            mid = left + (right - left) // 2\n            \n            days, curr = 1, 0\n            for weight in weights:\n                \n                if curr + weight &gt; mid:\n                    curr = 0\n                    days += 1\n                \n                curr += weight\n            \n            if days &gt; D:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left\n</code></pre>\n<h1>Time and space complexity</h1>\n<p>Time complexity <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.018ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.336ex\" height=\"3.167ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 5894.3 1400\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-3-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-3-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-3-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-3-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-3-TEX-LO-2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path><path id=\"MJX-3-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path><path id=\"MJX-3-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-3-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2050, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2535, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3178.7, 0)\"><use xlink:href=\"#MJX-3-TEX-LO-2211\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4789.3, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D464\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5505.3, 0)\"><use xlink:href=\"#MJX-3-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>n</code> is the length of array weights. <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.018ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.264ex\" height=\"3.167ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 2326.7 1400\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-LO-2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path><path id=\"MJX-3-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3-TEX-LO-2211\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1610.7, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D464\"></use></g></g></g></svg></mjx-container> is sum of elements in array weights. The number of times the binary search needs to be performed is <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.018ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.481ex\" height=\"3.167ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 5516.7 1400\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-2-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-2-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-2-TEX-LO-2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path><path id=\"MJX-2-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1450, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1935, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2412, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2801, 0)\"><use xlink:href=\"#MJX-2-TEX-LO-2211\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4411.7, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D464\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5127.7, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container>. In every binary search, array need to be traversed and time is <code>O(n)</code>. So the total time is <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.018ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.336ex\" height=\"3.167ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 5894.3 1400\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-2-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-2-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-2-TEX-LO-2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path><path id=\"MJX-2-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2050, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2535, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3178.7, 0)\"><use xlink:href=\"#MJX-2-TEX-LO-2211\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4789.3, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D464\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5505.3, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container></p>\n<p>Space complexity <code>O(n)</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/Corner-MVP/hexo-picture/main/delivery.jpg\" alt=\"delivery\"></p>\n<h1>1011. Capacity To Ship Packages Within D Days</h1>\n<hr>\n<p><strong>Description</strong></p>\n<p>A conveyor belt has packages that must be shipped from one port to another within <code>D</code> days.</p>\n<p>The <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.025ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.393ex\" height=\"2.07ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -903.7 1057.6 914.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-3-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D456\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(345, 413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(361, 0)\"><use xlink:href=\"#MJX-3-TEX-I-210E\"></use></g></g></g></g></g></svg></mjx-container> package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p>\n<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>D</code> days.</p>\n<p><strong>Input and output</strong></p>\n<pre><code>Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n</code></pre>\n<pre><code>Input: weights = [3,2,2,4,1,4], D = 3\nOutput: 6\nExplanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n</code></pre>\n<p><strong>Solution</strong></p>\n<p>There exists a lower limit <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.357ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.625ex\" height=\"1.357ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1602 599.8\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-3-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D465\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(572, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(451, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(917, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D460\"></use></g></g></g></g></g></svg></mjx-container> that when <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.357ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.936ex\" height=\"1.796ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -636 3507.6 793.8\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3-TEX-N-2265\" d=\"M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path><path id=\"MJX-3-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-3-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(849.8, 0)\"><use xlink:href=\"#MJX-3-TEX-N-2265\"></use></g><g data-mml-node=\"msub\" transform=\"translate(1905.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D465\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(572, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(451, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(917, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D460\"></use></g></g></g></g></g></svg></mjx-container>, we can deliver packages in <code>D</code> days and vice versa. At the same time, <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.357ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.625ex\" height=\"1.357ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1602 599.8\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-3-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-3-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D465\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(572, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D45F\"></use></g><g data-mml-node=\"mi\" transform=\"translate(451, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(917, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D460\"></use></g></g></g></g></g></svg></mjx-container> is the result. Therefore, this is a binary search problem. The left boundary is maximum of weights, and the right boundary is total weights. During binary search, we need to judge whether current capacity meets to the day requirement. And we can solve it by greedy algorithm.</p>\n<pre><code>class Solution:\n    def shipWithinDays(self, weights, D):\n        \n        left, right = max(weights), sum(weights)\n        \n        while left &lt; right:\n            \n            mid = left + (right - left) // 2\n            \n            days, curr = 1, 0\n            for weight in weights:\n                \n                if curr + weight &gt; mid:\n                    curr = 0\n                    days += 1\n                \n                curr += weight\n            \n            if days &gt; D:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left\n</code></pre>\n<h1>Time and space complexity</h1>\n<p>Time complexity <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.018ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.336ex\" height=\"3.167ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 5894.3 1400\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-3-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-3-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-3-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-3-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-3-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-3-TEX-LO-2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path><path id=\"MJX-3-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path><path id=\"MJX-3-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-3-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-3-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2050, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2535, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3178.7, 0)\"><use xlink:href=\"#MJX-3-TEX-LO-2211\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4789.3, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D464\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5505.3, 0)\"><use xlink:href=\"#MJX-3-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>n</code> is the length of array weights. <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.018ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.264ex\" height=\"3.167ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 2326.7 1400\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-3-TEX-LO-2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path><path id=\"MJX-3-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-3-TEX-LO-2211\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1610.7, 0)\"><use xlink:href=\"#MJX-3-TEX-I-1D464\"></use></g></g></g></svg></mjx-container> is sum of elements in array weights. The number of times the binary search needs to be performed is <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.018ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.481ex\" height=\"3.167ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 5516.7 1400\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-2-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-2-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-2-TEX-LO-2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path><path id=\"MJX-2-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1450, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1935, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2412, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2801, 0)\"><use xlink:href=\"#MJX-2-TEX-LO-2211\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4411.7, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D464\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5127.7, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container>. In every binary search, array need to be traversed and time is <code>O(n)</code>. So the total time is <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.018ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.336ex\" height=\"3.167ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -950 5894.3 1400\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-2-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-2-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-2-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-2-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-2-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-2-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-2-TEX-LO-2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path><path id=\"MJX-2-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path><path id=\"MJX-2-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-2-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-2-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2050, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2535, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D454\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3178.7, 0)\"><use xlink:href=\"#MJX-2-TEX-LO-2211\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4789.3, 0)\"><use xlink:href=\"#MJX-2-TEX-I-1D464\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5505.3, 0)\"><use xlink:href=\"#MJX-2-TEX-N-29\"></use></g></g></g></svg></mjx-container></p>\n<p>Space complexity <code>O(n)</code></p>\n"},{"title":"Heap and heapSort","date":"2021-04-07T12:05:48.000Z","_content":"\n# Definition\n\nHeap is a kind of complete binary tree. A complete binary tree is a binary tree in which every level, except maybe last level, is full, and all nodes are as far as left as possible.\n\nCommonly, there are two kinds of heap, the one is max-heap, and the other is min-heap.\n\nMax-heap is the heap that parent's value is greater than their children's value, and the parent's value of min-heap is less than their children.\n\n# Operations\n\n## Insert a node\n\n1. Make a new node in the last level, as far left as possible. If the last level is full, make a new one;\n\n2. If the new one breaks heap property, swap with its parent node;\n\n3. Repeat former two steps until every node is satisfied with heap property;\n\n4. Time complexity `O(log H)` H is the height of tree\n\n## Delete a node\n\n1. Remove the root node, and bring the last node (rightmost node in the last level) to the root;\n\n2. If the root breaks heap property, look at its children and swap it with the larger one;\n\n3. Repeat former two steps until no nodes conflict heap property;\n\n4. Time complexity `O(log H)` H is the height of tree\n\n\n# Implement Max-heap with python\n\n```\nclass MaxHeap:\n    def __init__(self, maxSize=None):\n        self.maxSize = maxSize\n        self.elements = []\n        self.count = 0\n\n    def addNode(self, value):\n\n        if self.count > self.maxSize:\n            raise Exception('The heap is full.')\n\n        self.elements.append(value)\n        self.siftUp(self.count)\n        self.count += 1\n\n    def popNode(self):\n\n        if self.count == 0:\n            raise Exception('The heap is empty.')\n\n        value = self.elements[0]\n        self.count -= 1\n        self.elements[0] = self.elements[self.count]\n        self.siftDown(0)\n        return value\n\n    def siftUp(self, index):\n\n        if index > 0:\n            parent = (index - 1) // 2\n            if self.elements[index] > self.elements[parent]:\n                self.elements[index], self.elements[parent] = self.elements[parent], self.elements[index]\n                self.siftUp(parent)\n\n    def siftDown(self, index):\n\n        left = 2 * index + 1\n        right = 2 * index + 2\n        largest = index\n        if (left <= self.count\n                and self.elements[left] >= self.elements[largest]\n                and self.elements[left] >= self.elements[right]):\n            largest = left\n\n        elif (right < self.count\n              and self.elements[right] >= self.elements[largest]):\n            largest = right\n\n        if largest != index:\n            self.elements[index], self.elements[largest] = self.elements[largest], self.elements[index]\n            self.siftDown(largest)\n```\n\n# Heap sort\n\nFrom the above narrate, it is not hard to find no matter max-heap and min-heap, the top of heap is largest or least value of the whole heap, therefore, it\n\n```\n\n    def heapSort(arr):\n\n      length = len(arr)\n      heap = MaxHeap(length)\n\n      for item in arr:\n        heap.addNode(item)\n\n      res = []\n      count = heap.count\n      while count > 0:\n        node = heap.popNode()\n        res.insert(0, node)\n        count -= 1\n\n      return res\n\n```\n\nTime complexity `O(N)` N is the length of array\nSpace complexity `O(N)` N is the length of array\n\n\nReference:\n\n1. https://web.stanford.edu/class/cs97si/03-data-structures.pdf\n\n2. https://python-data-structures-and-algorithms.readthedocs.io/zh/latest/15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/\n","source":"_posts/Heap-and-heapSort.md","raw":"---\ntitle: Heap and heapSort\ndate: 2021-04-07 20:05:48\ntags: \n    - Data structure\ncategories:\n    - Data structure and algorithm\n---\n\n# Definition\n\nHeap is a kind of complete binary tree. A complete binary tree is a binary tree in which every level, except maybe last level, is full, and all nodes are as far as left as possible.\n\nCommonly, there are two kinds of heap, the one is max-heap, and the other is min-heap.\n\nMax-heap is the heap that parent's value is greater than their children's value, and the parent's value of min-heap is less than their children.\n\n# Operations\n\n## Insert a node\n\n1. Make a new node in the last level, as far left as possible. If the last level is full, make a new one;\n\n2. If the new one breaks heap property, swap with its parent node;\n\n3. Repeat former two steps until every node is satisfied with heap property;\n\n4. Time complexity `O(log H)` H is the height of tree\n\n## Delete a node\n\n1. Remove the root node, and bring the last node (rightmost node in the last level) to the root;\n\n2. If the root breaks heap property, look at its children and swap it with the larger one;\n\n3. Repeat former two steps until no nodes conflict heap property;\n\n4. Time complexity `O(log H)` H is the height of tree\n\n\n# Implement Max-heap with python\n\n```\nclass MaxHeap:\n    def __init__(self, maxSize=None):\n        self.maxSize = maxSize\n        self.elements = []\n        self.count = 0\n\n    def addNode(self, value):\n\n        if self.count > self.maxSize:\n            raise Exception('The heap is full.')\n\n        self.elements.append(value)\n        self.siftUp(self.count)\n        self.count += 1\n\n    def popNode(self):\n\n        if self.count == 0:\n            raise Exception('The heap is empty.')\n\n        value = self.elements[0]\n        self.count -= 1\n        self.elements[0] = self.elements[self.count]\n        self.siftDown(0)\n        return value\n\n    def siftUp(self, index):\n\n        if index > 0:\n            parent = (index - 1) // 2\n            if self.elements[index] > self.elements[parent]:\n                self.elements[index], self.elements[parent] = self.elements[parent], self.elements[index]\n                self.siftUp(parent)\n\n    def siftDown(self, index):\n\n        left = 2 * index + 1\n        right = 2 * index + 2\n        largest = index\n        if (left <= self.count\n                and self.elements[left] >= self.elements[largest]\n                and self.elements[left] >= self.elements[right]):\n            largest = left\n\n        elif (right < self.count\n              and self.elements[right] >= self.elements[largest]):\n            largest = right\n\n        if largest != index:\n            self.elements[index], self.elements[largest] = self.elements[largest], self.elements[index]\n            self.siftDown(largest)\n```\n\n# Heap sort\n\nFrom the above narrate, it is not hard to find no matter max-heap and min-heap, the top of heap is largest or least value of the whole heap, therefore, it\n\n```\n\n    def heapSort(arr):\n\n      length = len(arr)\n      heap = MaxHeap(length)\n\n      for item in arr:\n        heap.addNode(item)\n\n      res = []\n      count = heap.count\n      while count > 0:\n        node = heap.popNode()\n        res.insert(0, node)\n        count -= 1\n\n      return res\n\n```\n\nTime complexity `O(N)` N is the length of array\nSpace complexity `O(N)` N is the length of array\n\n\nReference:\n\n1. https://web.stanford.edu/class/cs97si/03-data-structures.pdf\n\n2. https://python-data-structures-and-algorithms.readthedocs.io/zh/latest/15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/\n","slug":"Heap-and-heapSort","published":1,"updated":"2021-04-09T02:06:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet6q0008o24mbjffgcxh","content":"<h1>Definition</h1>\n<p>Heap is a kind of complete binary tree. A complete binary tree is a binary tree in which every level, except maybe last level, is full, and all nodes are as far as left as possible.</p>\n<p>Commonly, there are two kinds of heap, the one is max-heap, and the other is min-heap.</p>\n<p>Max-heap is the heap that parent’s value is greater than their children’s value, and the parent’s value of min-heap is less than their children.</p>\n<h1>Operations</h1>\n<h2 id=\"Insert-a-node\">Insert a node</h2>\n<ol>\n<li>\n<p>Make a new node in the last level, as far left as possible. If the last level is full, make a new one;</p>\n</li>\n<li>\n<p>If the new one breaks heap property, swap with its parent node;</p>\n</li>\n<li>\n<p>Repeat former two steps until every node is satisfied with heap property;</p>\n</li>\n<li>\n<p>Time complexity <code>O(log H)</code> H is the height of tree</p>\n</li>\n</ol>\n<h2 id=\"Delete-a-node\">Delete a node</h2>\n<ol>\n<li>\n<p>Remove the root node, and bring the last node (rightmost node in the last level) to the root;</p>\n</li>\n<li>\n<p>If the root breaks heap property, look at its children and swap it with the larger one;</p>\n</li>\n<li>\n<p>Repeat former two steps until no nodes conflict heap property;</p>\n</li>\n<li>\n<p>Time complexity <code>O(log H)</code> H is the height of tree</p>\n</li>\n</ol>\n<h1>Implement Max-heap with python</h1>\n<pre><code>class MaxHeap:\n    def __init__(self, maxSize=None):\n        self.maxSize = maxSize\n        self.elements = []\n        self.count = 0\n\n    def addNode(self, value):\n\n        if self.count &gt; self.maxSize:\n            raise Exception('The heap is full.')\n\n        self.elements.append(value)\n        self.siftUp(self.count)\n        self.count += 1\n\n    def popNode(self):\n\n        if self.count == 0:\n            raise Exception('The heap is empty.')\n\n        value = self.elements[0]\n        self.count -= 1\n        self.elements[0] = self.elements[self.count]\n        self.siftDown(0)\n        return value\n\n    def siftUp(self, index):\n\n        if index &gt; 0:\n            parent = (index - 1) // 2\n            if self.elements[index] &gt; self.elements[parent]:\n                self.elements[index], self.elements[parent] = self.elements[parent], self.elements[index]\n                self.siftUp(parent)\n\n    def siftDown(self, index):\n\n        left = 2 * index + 1\n        right = 2 * index + 2\n        largest = index\n        if (left &lt;= self.count\n                and self.elements[left] &gt;= self.elements[largest]\n                and self.elements[left] &gt;= self.elements[right]):\n            largest = left\n\n        elif (right &lt; self.count\n              and self.elements[right] &gt;= self.elements[largest]):\n            largest = right\n\n        if largest != index:\n            self.elements[index], self.elements[largest] = self.elements[largest], self.elements[index]\n            self.siftDown(largest)\n</code></pre>\n<h1>Heap sort</h1>\n<p>From the above narrate, it is not hard to find no matter max-heap and min-heap, the top of heap is largest or least value of the whole heap, therefore, it</p>\n<pre><code>\n    def heapSort(arr):\n\n      length = len(arr)\n      heap = MaxHeap(length)\n\n      for item in arr:\n        heap.addNode(item)\n\n      res = []\n      count = heap.count\n      while count &gt; 0:\n        node = heap.popNode()\n        res.insert(0, node)\n        count -= 1\n\n      return res\n\n</code></pre>\n<p>Time complexity <code>O(N)</code> N is the length of array<br>\nSpace complexity <code>O(N)</code> N is the length of array</p>\n<p>Reference:</p>\n<ol>\n<li>\n<p><a href=\"https://web.stanford.edu/class/cs97si/03-data-structures.pdf\">https://web.stanford.edu/class/cs97si/03-data-structures.pdf</a></p>\n</li>\n<li>\n<p><a href=\"https://python-data-structures-and-algorithms.readthedocs.io/zh/latest/15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/\">https://python-data-structures-and-algorithms.readthedocs.io/zh/latest/15_堆与堆排序/heap_and_heapsort/</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1>Definition</h1>\n<p>Heap is a kind of complete binary tree. A complete binary tree is a binary tree in which every level, except maybe last level, is full, and all nodes are as far as left as possible.</p>\n<p>Commonly, there are two kinds of heap, the one is max-heap, and the other is min-heap.</p>\n<p>Max-heap is the heap that parent’s value is greater than their children’s value, and the parent’s value of min-heap is less than their children.</p>\n<h1>Operations</h1>\n<h2 id=\"Insert-a-node\">Insert a node</h2>\n<ol>\n<li>\n<p>Make a new node in the last level, as far left as possible. If the last level is full, make a new one;</p>\n</li>\n<li>\n<p>If the new one breaks heap property, swap with its parent node;</p>\n</li>\n<li>\n<p>Repeat former two steps until every node is satisfied with heap property;</p>\n</li>\n<li>\n<p>Time complexity <code>O(log H)</code> H is the height of tree</p>\n</li>\n</ol>\n<h2 id=\"Delete-a-node\">Delete a node</h2>\n<ol>\n<li>\n<p>Remove the root node, and bring the last node (rightmost node in the last level) to the root;</p>\n</li>\n<li>\n<p>If the root breaks heap property, look at its children and swap it with the larger one;</p>\n</li>\n<li>\n<p>Repeat former two steps until no nodes conflict heap property;</p>\n</li>\n<li>\n<p>Time complexity <code>O(log H)</code> H is the height of tree</p>\n</li>\n</ol>\n<h1>Implement Max-heap with python</h1>\n<pre><code>class MaxHeap:\n    def __init__(self, maxSize=None):\n        self.maxSize = maxSize\n        self.elements = []\n        self.count = 0\n\n    def addNode(self, value):\n\n        if self.count &gt; self.maxSize:\n            raise Exception('The heap is full.')\n\n        self.elements.append(value)\n        self.siftUp(self.count)\n        self.count += 1\n\n    def popNode(self):\n\n        if self.count == 0:\n            raise Exception('The heap is empty.')\n\n        value = self.elements[0]\n        self.count -= 1\n        self.elements[0] = self.elements[self.count]\n        self.siftDown(0)\n        return value\n\n    def siftUp(self, index):\n\n        if index &gt; 0:\n            parent = (index - 1) // 2\n            if self.elements[index] &gt; self.elements[parent]:\n                self.elements[index], self.elements[parent] = self.elements[parent], self.elements[index]\n                self.siftUp(parent)\n\n    def siftDown(self, index):\n\n        left = 2 * index + 1\n        right = 2 * index + 2\n        largest = index\n        if (left &lt;= self.count\n                and self.elements[left] &gt;= self.elements[largest]\n                and self.elements[left] &gt;= self.elements[right]):\n            largest = left\n\n        elif (right &lt; self.count\n              and self.elements[right] &gt;= self.elements[largest]):\n            largest = right\n\n        if largest != index:\n            self.elements[index], self.elements[largest] = self.elements[largest], self.elements[index]\n            self.siftDown(largest)\n</code></pre>\n<h1>Heap sort</h1>\n<p>From the above narrate, it is not hard to find no matter max-heap and min-heap, the top of heap is largest or least value of the whole heap, therefore, it</p>\n<pre><code>\n    def heapSort(arr):\n\n      length = len(arr)\n      heap = MaxHeap(length)\n\n      for item in arr:\n        heap.addNode(item)\n\n      res = []\n      count = heap.count\n      while count &gt; 0:\n        node = heap.popNode()\n        res.insert(0, node)\n        count -= 1\n\n      return res\n\n</code></pre>\n<p>Time complexity <code>O(N)</code> N is the length of array<br>\nSpace complexity <code>O(N)</code> N is the length of array</p>\n<p>Reference:</p>\n<ol>\n<li>\n<p><a href=\"https://web.stanford.edu/class/cs97si/03-data-structures.pdf\">https://web.stanford.edu/class/cs97si/03-data-structures.pdf</a></p>\n</li>\n<li>\n<p><a href=\"https://python-data-structures-and-algorithms.readthedocs.io/zh/latest/15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/\">https://python-data-structures-and-algorithms.readthedocs.io/zh/latest/15_堆与堆排序/heap_and_heapsort/</a></p>\n</li>\n</ol>\n"},{"title":"House Robber II","date":"2021-04-15T05:41:31.000Z","_content":"\n![House-robber](https://github.com/Corner-MVP/hexo-picture/blob/main/house-robber.jpg?raw=true)\n\n# 213. House Robber II\n---\n\n**Description**\n\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle**. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it **will automatically contact the police if two adjacent houses were broken into on the same night.**\n\nGiven an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight **without alerting the police.**\n\n**Input and output**\n\n```\nInput: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n```\n\n**Solution**\n\nIt is a classical **dp** question, if all houses are not arranged in a circle(Leetcode 198). Making a list `dp` and `dp[i]` means most money can be achieved in position `i`. From the description, the state transition equation is:\n\n<center>{% mathjax %} dp[i] = max(dp[i-2] + nums[i], dp[i-1]) {% endmathjax %}</center>\n\nand the boundary condition is:\n\n<center>{% mathjax %}\ndp[i]=\n\\begin{cases}\nnums[0], i = 1 \\\\\nmax(nums[0], nums[1]), i = 2\n\\end{cases}\n{% endmathjax %}</center>\n\nAnd in order to avoid stolen the first, and the last house at the same time, we can split this question into two conditions. When stealing the first house, the last one cannot be stolen, thus, the range is the first to the last second house. When stealing the last house, the first one cannot be stolen, therefore, the range is the second to the last house.\n\nIf the length of array is `n`, the first condition's range is `[0, n-2]` and the other's range is `[1, n-1]`. After determining the ranges, the method mentioned above can be used to get highest stolen value respectively. The maximum value is the maximum total amount that can be stolen in `n` houses\n\n\n```\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n        return max(self.rob2(nums[1:]), self.rob2(nums[: len(nums) - 1]))\n    \n    def rob2(self, nums):\n        if not nums:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n\n        first, second = nums[0], max(nums[0], nums[1])\n\n        for i in range(2, len(nums)):\n            first, second = second, max(second, first + nums[i])\n\n        return max(first, second)\n```\n\n\n**Time and space complexity**\n\nTime complexity: `O(n)`, `n` is the length of nums, it need traverse array twice.\n\nSpace complexity: `O(1)`\n","source":"_posts/House-Robber-II.md","raw":"---\ntitle: House Robber II\ndate: 2021-04-15 13:41:31\ntags:\n    - algorithm\n    - Leetcode\ncategories:\n    - Data structure and algorithm\n---\n\n![House-robber](https://github.com/Corner-MVP/hexo-picture/blob/main/house-robber.jpg?raw=true)\n\n# 213. House Robber II\n---\n\n**Description**\n\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle**. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it **will automatically contact the police if two adjacent houses were broken into on the same night.**\n\nGiven an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight **without alerting the police.**\n\n**Input and output**\n\n```\nInput: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n```\n\n**Solution**\n\nIt is a classical **dp** question, if all houses are not arranged in a circle(Leetcode 198). Making a list `dp` and `dp[i]` means most money can be achieved in position `i`. From the description, the state transition equation is:\n\n<center>{% mathjax %} dp[i] = max(dp[i-2] + nums[i], dp[i-1]) {% endmathjax %}</center>\n\nand the boundary condition is:\n\n<center>{% mathjax %}\ndp[i]=\n\\begin{cases}\nnums[0], i = 1 \\\\\nmax(nums[0], nums[1]), i = 2\n\\end{cases}\n{% endmathjax %}</center>\n\nAnd in order to avoid stolen the first, and the last house at the same time, we can split this question into two conditions. When stealing the first house, the last one cannot be stolen, thus, the range is the first to the last second house. When stealing the last house, the first one cannot be stolen, therefore, the range is the second to the last house.\n\nIf the length of array is `n`, the first condition's range is `[0, n-2]` and the other's range is `[1, n-1]`. After determining the ranges, the method mentioned above can be used to get highest stolen value respectively. The maximum value is the maximum total amount that can be stolen in `n` houses\n\n\n```\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n        return max(self.rob2(nums[1:]), self.rob2(nums[: len(nums) - 1]))\n    \n    def rob2(self, nums):\n        if not nums:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n\n        first, second = nums[0], max(nums[0], nums[1])\n\n        for i in range(2, len(nums)):\n            first, second = second, max(second, first + nums[i])\n\n        return max(first, second)\n```\n\n\n**Time and space complexity**\n\nTime complexity: `O(n)`, `n` is the length of nums, it need traverse array twice.\n\nSpace complexity: `O(1)`\n","slug":"House-Robber-II","published":1,"updated":"2021-04-15T06:21:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet6r0009o24m3tg2hjqi","content":"<p><img src=\"https://github.com/Corner-MVP/hexo-picture/blob/main/house-robber.jpg?raw=true\" alt=\"House-robber\"></p>\n<h1>213. House Robber II</h1>\n<hr>\n<p><strong>Description</strong></p>\n<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle</strong>. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it <strong>will automatically contact the police if two adjacent houses were broken into on the same night.</strong></p>\n<p>Given an integer array <code>nums</code> representing the amount of money of each house, return the maximum amount of money you can rob tonight <strong>without alerting the police.</strong></p>\n<p><strong>Input and output</strong></p>\n<pre><code>Input: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n</code></pre>\n<p><strong>Solution</strong></p>\n<p>It is a classical <strong>dp</strong> question, if all houses are not arranged in a circle(Leetcode 198). Making a list <code>dp</code> and <code>dp[i]</code> means most money can be achieved in position <code>i</code>. From the description, the state transition equation is:</p>\n<center><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"41.617ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 18394.6 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-4-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path><path id=\"MJX-4-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path><path id=\"MJX-4-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path><path id=\"MJX-4-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-N-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path><path id=\"MJX-4-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-4-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-4-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-4-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-4-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-4-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-4-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-4-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-4-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-4-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-4-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(520, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1023, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1301, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1646, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2201.8, 0)\"><use xlink:href=\"#MJX-4-TEX-N-3D\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3257.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4135.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4664.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5236.6, 0)\"><use xlink:href=\"#MJX-4-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5625.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6145.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6648.6, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6926.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7493.8, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(8494, 0)\"><use xlink:href=\"#MJX-4-TEX-N-32\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8994, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9494.2, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(10494.4, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(11094.4, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D462\"></use></g><g data-mml-node=\"mi\" transform=\"translate(11666.4, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(12544.4, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(13013.4, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(13291.4, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(13636.4, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(13914.4, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(14359.1, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(14879.1, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(15382.1, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(15660.1, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(16227.3, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(17227.6, 0)\"><use xlink:href=\"#MJX-4-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(17727.6, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(18005.6, 0)\"><use xlink:href=\"#MJX-4-TEX-N-29\"></use></g></g></g></svg></mjx-container></center>\n<p>and the boundary condition is:</p>\n<center><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.148ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"38.422ex\" height=\"5.428ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1449.5 16982.4 2399\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-4-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path><path id=\"MJX-4-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path><path id=\"MJX-4-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path><path id=\"MJX-4-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-N-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path><path id=\"MJX-4-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-4-TEX-S3-7B\" d=\"M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z\"></path><path id=\"MJX-4-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-4-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-4-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-4-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-4-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-4-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-4-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-4-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path><path id=\"MJX-4-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(520, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1023, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1301, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1646, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2201.8, 0)\"><use xlink:href=\"#MJX-4-TEX-N-3D\"></use></g><g data-mml-node=\"mrow\" transform=\"translate(3257.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-4-TEX-S3-7B\"></use></g><g data-mml-node=\"mtable\" transform=\"translate(750, 0)\"><g data-mml-node=\"mtr\" transform=\"translate(0, 600)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(600, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D462\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1172, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2050, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2519, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(2797, 0)\"><use xlink:href=\"#MJX-4-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3297, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3575, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4019.7, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4642.4, 0)\"><use xlink:href=\"#MJX-4-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(5698.2, 0)\"><use xlink:href=\"#MJX-4-TEX-N-31\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -600)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(878, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1407, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1979, 0)\"><use xlink:href=\"#MJX-4-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2368, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2968, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D462\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3540, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4418, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4887, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(5165, 0)\"><use xlink:href=\"#MJX-4-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5665, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5943, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6387.7, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6987.7, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D462\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7559.7, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8437.7, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8906.7, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(9184.7, 0)\"><use xlink:href=\"#MJX-4-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9684.7, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9962.7, 0)\"><use xlink:href=\"#MJX-4-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(10351.7, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(10796.3, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(11419.1, 0)\"><use xlink:href=\"#MJX-4-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(12474.9, 0)\"><use xlink:href=\"#MJX-4-TEX-N-32\"></use></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(13724.9, 0)\"></g></g></g></g></svg></mjx-container></center>\n<p>And in order to avoid stolen the first, and the last house at the same time, we can split this question into two conditions. When stealing the first house, the last one cannot be stolen, thus, the range is the first to the last second house. When stealing the last house, the first one cannot be stolen, therefore, the range is the second to the last house.</p>\n<p>If the length of array is <code>n</code>, the first condition’s range is <code>[0, n-2]</code> and the other’s range is <code>[1, n-1]</code>. After determining the ranges, the method mentioned above can be used to get highest stolen value respectively. The maximum value is the maximum total amount that can be stolen in <code>n</code> houses</p>\n<pre><code>class Solution:\n    def rob(self, nums: List[int]) -&gt; int:\n        if not nums:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n        return max(self.rob2(nums[1:]), self.rob2(nums[: len(nums) - 1]))\n    \n    def rob2(self, nums):\n        if not nums:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n\n        first, second = nums[0], max(nums[0], nums[1])\n\n        for i in range(2, len(nums)):\n            first, second = second, max(second, first + nums[i])\n\n        return max(first, second)\n</code></pre>\n<p><strong>Time and space complexity</strong></p>\n<p>Time complexity: <code>O(n)</code>, <code>n</code> is the length of nums, it need traverse array twice.</p>\n<p>Space complexity: <code>O(1)</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://github.com/Corner-MVP/hexo-picture/blob/main/house-robber.jpg?raw=true\" alt=\"House-robber\"></p>\n<h1>213. House Robber II</h1>\n<hr>\n<p><strong>Description</strong></p>\n<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle</strong>. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it <strong>will automatically contact the police if two adjacent houses were broken into on the same night.</strong></p>\n<p>Given an integer array <code>nums</code> representing the amount of money of each house, return the maximum amount of money you can rob tonight <strong>without alerting the police.</strong></p>\n<p><strong>Input and output</strong></p>\n<pre><code>Input: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n</code></pre>\n<p><strong>Solution</strong></p>\n<p>It is a classical <strong>dp</strong> question, if all houses are not arranged in a circle(Leetcode 198). Making a list <code>dp</code> and <code>dp[i]</code> means most money can be achieved in position <code>i</code>. From the description, the state transition equation is:</p>\n<center><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"41.617ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 18394.6 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-4-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path><path id=\"MJX-4-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path><path id=\"MJX-4-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path><path id=\"MJX-4-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-N-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path><path id=\"MJX-4-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-4-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-4-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-4-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-4-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path><path id=\"MJX-4-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-4-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-4-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-4-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-4-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-4-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(520, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1023, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1301, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1646, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2201.8, 0)\"><use xlink:href=\"#MJX-4-TEX-N-3D\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3257.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4135.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4664.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5236.6, 0)\"><use xlink:href=\"#MJX-4-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5625.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6145.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6648.6, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6926.6, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7493.8, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(8494, 0)\"><use xlink:href=\"#MJX-4-TEX-N-32\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8994, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9494.2, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(10494.4, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(11094.4, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D462\"></use></g><g data-mml-node=\"mi\" transform=\"translate(11666.4, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(12544.4, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(13013.4, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(13291.4, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(13636.4, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(13914.4, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(14359.1, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(14879.1, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(15382.1, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(15660.1, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(16227.3, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2212\"></use></g><g data-mml-node=\"mn\" transform=\"translate(17227.6, 0)\"><use xlink:href=\"#MJX-4-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(17727.6, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(18005.6, 0)\"><use xlink:href=\"#MJX-4-TEX-N-29\"></use></g></g></g></svg></mjx-container></center>\n<p>and the boundary condition is:</p>\n<center><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.148ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"38.422ex\" height=\"5.428ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1449.5 16982.4 2399\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-4-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path><path id=\"MJX-4-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path><path id=\"MJX-4-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path><path id=\"MJX-4-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-N-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path><path id=\"MJX-4-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-4-TEX-S3-7B\" d=\"M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z\"></path><path id=\"MJX-4-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path><path id=\"MJX-4-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-4-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-4-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-4-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-4-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-4-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-4-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path><path id=\"MJX-4-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(520, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1023, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1301, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1646, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2201.8, 0)\"><use xlink:href=\"#MJX-4-TEX-N-3D\"></use></g><g data-mml-node=\"mrow\" transform=\"translate(3257.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-4-TEX-S3-7B\"></use></g><g data-mml-node=\"mtable\" transform=\"translate(750, 0)\"><g data-mml-node=\"mtr\" transform=\"translate(0, 600)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(600, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D462\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1172, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2050, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2519, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(2797, 0)\"><use xlink:href=\"#MJX-4-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3297, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3575, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4019.7, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4642.4, 0)\"><use xlink:href=\"#MJX-4-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(5698.2, 0)\"><use xlink:href=\"#MJX-4-TEX-N-31\"></use></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0, -600)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(878, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1407, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1979, 0)\"><use xlink:href=\"#MJX-4-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2368, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2968, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D462\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3540, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4418, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4887, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(5165, 0)\"><use xlink:href=\"#MJX-4-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5665, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5943, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6387.7, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6987.7, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D462\"></use></g><g data-mml-node=\"mi\" transform=\"translate(7559.7, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(8437.7, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D460\"></use></g><g data-mml-node=\"mo\" transform=\"translate(8906.7, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5B\"></use></g><g data-mml-node=\"mn\" transform=\"translate(9184.7, 0)\"><use xlink:href=\"#MJX-4-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9684.7, 0)\"><use xlink:href=\"#MJX-4-TEX-N-5D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(9962.7, 0)\"><use xlink:href=\"#MJX-4-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(10351.7, 0)\"><use xlink:href=\"#MJX-4-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(10796.3, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D456\"></use></g><g data-mml-node=\"mo\" transform=\"translate(11419.1, 0)\"><use xlink:href=\"#MJX-4-TEX-N-3D\"></use></g><g data-mml-node=\"mn\" transform=\"translate(12474.9, 0)\"><use xlink:href=\"#MJX-4-TEX-N-32\"></use></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(13724.9, 0)\"></g></g></g></g></svg></mjx-container></center>\n<p>And in order to avoid stolen the first, and the last house at the same time, we can split this question into two conditions. When stealing the first house, the last one cannot be stolen, thus, the range is the first to the last second house. When stealing the last house, the first one cannot be stolen, therefore, the range is the second to the last house.</p>\n<p>If the length of array is <code>n</code>, the first condition’s range is <code>[0, n-2]</code> and the other’s range is <code>[1, n-1]</code>. After determining the ranges, the method mentioned above can be used to get highest stolen value respectively. The maximum value is the maximum total amount that can be stolen in <code>n</code> houses</p>\n<pre><code>class Solution:\n    def rob(self, nums: List[int]) -&gt; int:\n        if not nums:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n        return max(self.rob2(nums[1:]), self.rob2(nums[: len(nums) - 1]))\n    \n    def rob2(self, nums):\n        if not nums:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n\n        first, second = nums[0], max(nums[0], nums[1])\n\n        for i in range(2, len(nums)):\n            first, second = second, max(second, first + nums[i])\n\n        return max(first, second)\n</code></pre>\n<p><strong>Time and space complexity</strong></p>\n<p>Time complexity: <code>O(n)</code>, <code>n</code> is the length of nums, it need traverse array twice.</p>\n<p>Space complexity: <code>O(1)</code></p>\n"},{"title":"Leetcode 165. Compare Version Number","date":"2021-09-03T00:30:43.000Z","_content":"\n## Description\nGiven two version numbers, `version1` and `version2`, compare them.\n\nVersion numbers consist of **one or more revisions** joined by a dot `'.'`. Each revision consists of **digits** and may contain leading **zeros**. Every revision contains **at least one character**. Revisions are **0-indexed from left to right**, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.\n\nTo compare version numbers, compare their revisions in **left-to-right order**. Revisions are compared using their **integer value ignoring any leading zeros**. This means that revisions `1` and `001` are considered **equal**. If a version number does not specify a revision at an index, then **treat the revision as `0`**. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.\n\n*Return the following:*\n\n- If `version1 < version2`, return `1`.\n- If `version1 > version2`, return `1`.\n- Otherwise, return `0`.\n\n## Examples\n### example 1\n```\nInput: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n```\n\n### example 2\n```\nInput: version1 = \"1.0\", version2 = \"1.0.0\"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".\n```\n\n### example 3\n```\nInput: version1 = \"0.1\", version2 = \"1.1\"\nOutput: -1\nExplanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.\n```\n\n### example 4\n```\nInput: version1 = \"1.0.1\", version2 = \"1\"\nOutput: 1\n```\n\n### example 5\n```\nInput: version1 = \"7.5.2.4\", version2 = \"7.5.3\"\nOutput: -1\n```\n\n### constraints\n- `1 <= version1.length, version2.length <= 500`\n- `version1` and `version2` only contain digits and `'.'`.\n- `version1` and `version2` **are valid version numbers**.\n- All the given revisions in `version1` and `version2` can be stored in a **32-bit integer**.\n\n## Idea\nIn order to compare version number, we can split `version1` and `version2` by dot(`.`) and transfer string to number respectively and compare them.\n\n## Code\n### Python\n```\nclass Solution:\n    def compareVersion(self, version1, version2):\n        len1, len2 = len(version1), len(version2)\n        index1, index2 = 0, 0\n\n        while index1 < len1 or index2 < len2:\n            value1 = 0\n            while index1 < len1 and version1[index1] != '.':\n                value1 = value1 * 10 + ord(version1[index1]) - ord('0')\n                index1 += 1\n            index1 += 1\n\n            value2 = 0\n            while index2 < len2 and version2[index2] != '.':\n                value2 = value2 * 10 + ord(version2[index2]) - ord('0')\n                index2 += 1\n            index2 += 1\n            if value1 > value2:\n                return 1\n            elif value1 < value2:\n                return -1\n        \n        return 0\n```\n\n### JavaScript\n```\n/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */\nvar compareVersion = function(version1, version2) {\n\n  let p1 = 0, p2 = 0\n  const len1 = version1.length, len2 = version2.length\n  \n  while (p1 < len1 || p2 < len2) {\n      \n      let i1 = getNextChunk(version1, len1, p1).res\n      p1 = getNextChunk(version1, len1, p1).start\n      \n      let i2 = getNextChunk(version2, len2, p2).res\n      p2 = getNextChunk(version2, len2, p2).start\n      \n      if (i1 !== i2) {\n          return i1 > i2 ? 1 : -1\n      }\n      \n      \n  }\n  \n  return 0\n  \n};\n\nlet getNextChunk = (version, length, start) => {\n  \n  if (start > length - 1) return{ res: 0, start}\n  \n  let index = start\n  \n  while (index < length && version[index] !== '.') {\n      index += 1\n  }\n  console.log('index is: ', index)\n  const res = index >= length ? Number(version.substring(start, length)) : Number(version.substring(start, index))\n  \n  start = index + 1\n  \n  return {res, start}\n  \n}\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(max(m, n)){% endmathjax %}, `m` is the length of `version1` and `n` is the number of `version2`;\n- space complexity: {% mathjax %}O(1){% endmathjax %}.","source":"_posts/Leetcode-165-Compare-Version-Number.md","raw":"---\ntitle: Leetcode 165. Compare Version Number\ndate: 2021-09-03 08:30:43\ntags: \n    - algorithm\n    - Leetcode\n    - two-pointers\ncategories:\n    - Data structure and algorithm\n---\n\n## Description\nGiven two version numbers, `version1` and `version2`, compare them.\n\nVersion numbers consist of **one or more revisions** joined by a dot `'.'`. Each revision consists of **digits** and may contain leading **zeros**. Every revision contains **at least one character**. Revisions are **0-indexed from left to right**, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.\n\nTo compare version numbers, compare their revisions in **left-to-right order**. Revisions are compared using their **integer value ignoring any leading zeros**. This means that revisions `1` and `001` are considered **equal**. If a version number does not specify a revision at an index, then **treat the revision as `0`**. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.\n\n*Return the following:*\n\n- If `version1 < version2`, return `1`.\n- If `version1 > version2`, return `1`.\n- Otherwise, return `0`.\n\n## Examples\n### example 1\n```\nInput: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n```\n\n### example 2\n```\nInput: version1 = \"1.0\", version2 = \"1.0.0\"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".\n```\n\n### example 3\n```\nInput: version1 = \"0.1\", version2 = \"1.1\"\nOutput: -1\nExplanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.\n```\n\n### example 4\n```\nInput: version1 = \"1.0.1\", version2 = \"1\"\nOutput: 1\n```\n\n### example 5\n```\nInput: version1 = \"7.5.2.4\", version2 = \"7.5.3\"\nOutput: -1\n```\n\n### constraints\n- `1 <= version1.length, version2.length <= 500`\n- `version1` and `version2` only contain digits and `'.'`.\n- `version1` and `version2` **are valid version numbers**.\n- All the given revisions in `version1` and `version2` can be stored in a **32-bit integer**.\n\n## Idea\nIn order to compare version number, we can split `version1` and `version2` by dot(`.`) and transfer string to number respectively and compare them.\n\n## Code\n### Python\n```\nclass Solution:\n    def compareVersion(self, version1, version2):\n        len1, len2 = len(version1), len(version2)\n        index1, index2 = 0, 0\n\n        while index1 < len1 or index2 < len2:\n            value1 = 0\n            while index1 < len1 and version1[index1] != '.':\n                value1 = value1 * 10 + ord(version1[index1]) - ord('0')\n                index1 += 1\n            index1 += 1\n\n            value2 = 0\n            while index2 < len2 and version2[index2] != '.':\n                value2 = value2 * 10 + ord(version2[index2]) - ord('0')\n                index2 += 1\n            index2 += 1\n            if value1 > value2:\n                return 1\n            elif value1 < value2:\n                return -1\n        \n        return 0\n```\n\n### JavaScript\n```\n/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */\nvar compareVersion = function(version1, version2) {\n\n  let p1 = 0, p2 = 0\n  const len1 = version1.length, len2 = version2.length\n  \n  while (p1 < len1 || p2 < len2) {\n      \n      let i1 = getNextChunk(version1, len1, p1).res\n      p1 = getNextChunk(version1, len1, p1).start\n      \n      let i2 = getNextChunk(version2, len2, p2).res\n      p2 = getNextChunk(version2, len2, p2).start\n      \n      if (i1 !== i2) {\n          return i1 > i2 ? 1 : -1\n      }\n      \n      \n  }\n  \n  return 0\n  \n};\n\nlet getNextChunk = (version, length, start) => {\n  \n  if (start > length - 1) return{ res: 0, start}\n  \n  let index = start\n  \n  while (index < length && version[index] !== '.') {\n      index += 1\n  }\n  console.log('index is: ', index)\n  const res = index >= length ? Number(version.substring(start, length)) : Number(version.substring(start, index))\n  \n  start = index + 1\n  \n  return {res, start}\n  \n}\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(max(m, n)){% endmathjax %}, `m` is the length of `version1` and `n` is the number of `version2`;\n- space complexity: {% mathjax %}O(1){% endmathjax %}.","slug":"Leetcode-165-Compare-Version-Number","published":1,"updated":"2021-09-03T02:33:19.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet6u000co24m10lt90p2","content":"<h2 id=\"Description\">Description</h2>\n<p>Given two version numbers,&nbsp;<code>version1</code>&nbsp;and&nbsp;<code>version2</code>, compare them.</p>\n<p>Version numbers consist of&nbsp;<strong>one or more revisions</strong>&nbsp;joined by a dot&nbsp;<code>'.'</code>. Each revision&nbsp;consists of&nbsp;<strong>digits</strong>&nbsp;and may contain leading&nbsp;<strong>zeros</strong>. Every revision contains&nbsp;<strong>at least one character</strong>. Revisions are&nbsp;<strong>0-indexed from left to right</strong>, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example&nbsp;<code>2.5.33</code>&nbsp;and&nbsp;<code>0.1</code>&nbsp;are valid version numbers.</p>\n<p>To compare version numbers, compare their revisions in&nbsp;<strong>left-to-right order</strong>. Revisions are compared using their&nbsp;<strong>integer value ignoring any leading zeros</strong>. This means that revisions&nbsp;<code>1</code>&nbsp;and&nbsp;<code>001</code>&nbsp;are considered&nbsp;<strong>equal</strong>. If a version number does not specify a revision at an index, then&nbsp;<strong>treat the revision as&nbsp;<code>0</code></strong>. For example, version&nbsp;<code>1.0</code>&nbsp;is less than version&nbsp;<code>1.1</code>&nbsp;because their revision 0s are the same, but their revision 1s are&nbsp;<code>0</code>&nbsp;and&nbsp;<code>1</code>&nbsp;respectively, and&nbsp;<code>0 &lt; 1</code>.</p>\n<p><em>Return the following:</em></p>\n<ul>\n<li>If&nbsp;<code>version1 &lt; version2</code>, return&nbsp;<code>1</code>.</li>\n<li>If&nbsp;<code>version1 &gt; version2</code>, return&nbsp;<code>1</code>.</li>\n<li>Otherwise, return&nbsp;<code>0</code>.</li>\n</ul>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<pre><code>Input: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n</code></pre>\n<h3 id=\"example-2\">example 2</h3>\n<pre><code>Input: version1 = \"1.0\", version2 = \"1.0.0\"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".\n</code></pre>\n<h3 id=\"example-3\">example 3</h3>\n<pre><code>Input: version1 = \"0.1\", version2 = \"1.1\"\nOutput: -1\nExplanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 &lt; 1, so version1 &lt; version2.\n</code></pre>\n<h3 id=\"example-4\">example 4</h3>\n<pre><code>Input: version1 = \"1.0.1\", version2 = \"1\"\nOutput: 1\n</code></pre>\n<h3 id=\"example-5\">example 5</h3>\n<pre><code>Input: version1 = \"7.5.2.4\", version2 = \"7.5.3\"\nOutput: -1\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li>\n<li><code>version1</code>&nbsp;and&nbsp;<code>version2</code>&nbsp;only contain digits and&nbsp;<code>'.'</code>.</li>\n<li><code>version1</code>&nbsp;and&nbsp;<code>version2</code>&nbsp;<strong>are valid version numbers</strong>.</li>\n<li>All the given revisions in&nbsp;<code>version1</code>&nbsp;and&nbsp;<code>version2</code>&nbsp;can be stored in&nbsp;a&nbsp;<strong>32-bit integer</strong>.</li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>In order to compare version number, we can split <code>version1</code> and <code>version2</code> by dot(<code>.</code>) and transfer string to number respectively and compare them.</p>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code>class Solution:\n    def compareVersion(self, version1, version2):\n        len1, len2 = len(version1), len(version2)\n        index1, index2 = 0, 0\n\n        while index1 &lt; len1 or index2 &lt; len2:\n            value1 = 0\n            while index1 &lt; len1 and version1[index1] != '.':\n                value1 = value1 * 10 + ord(version1[index1]) - ord('0')\n                index1 += 1\n            index1 += 1\n\n            value2 = 0\n            while index2 &lt; len2 and version2[index2] != '.':\n                value2 = value2 * 10 + ord(version2[index2]) - ord('0')\n                index2 += 1\n            index2 += 1\n            if value1 &gt; value2:\n                return 1\n            elif value1 &lt; value2:\n                return -1\n        \n        return 0\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */\nvar compareVersion = function(version1, version2) {\n\n  let p1 = 0, p2 = 0\n  const len1 = version1.length, len2 = version2.length\n  \n  while (p1 &lt; len1 || p2 &lt; len2) {\n      \n      let i1 = getNextChunk(version1, len1, p1).res\n      p1 = getNextChunk(version1, len1, p1).start\n      \n      let i2 = getNextChunk(version2, len2, p2).res\n      p2 = getNextChunk(version2, len2, p2).start\n      \n      if (i1 !== i2) {\n          return i1 &gt; i2 ? 1 : -1\n      }\n      \n      \n  }\n  \n  return 0\n  \n};\n\nlet getNextChunk = (version, length, start) =&gt; {\n  \n  if (start &gt; length - 1) return{ res: 0, start}\n  \n  let index = start\n  \n  while (index &lt; length &amp;&amp; version[index] !== '.') {\n      index += 1\n  }\n  console.log('index is: ', index)\n  const res = index &gt;= length ? Number(version.substring(start, length)) : Number(version.substring(start, index))\n  \n  start = index + 1\n  \n  return {res, start}\n  \n}\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.074ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6220.7 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-5-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-5-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-5-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-5-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-5-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-5-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-5-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-5-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-5-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-5-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-5-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2030, 0)\"><use xlink:href=\"#MJX-5-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2559, 0)\"><use xlink:href=\"#MJX-5-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3131, 0)\"><use xlink:href=\"#MJX-5-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3520, 0)\"><use xlink:href=\"#MJX-5-TEX-I-1D45A\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4398, 0)\"><use xlink:href=\"#MJX-5-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4842.7, 0)\"><use xlink:href=\"#MJX-5-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5442.7, 0)\"><use xlink:href=\"#MJX-5-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5831.7, 0)\"><use xlink:href=\"#MJX-5-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>m</code> is the length of <code>version1</code> and <code>n</code> is the number of <code>version2</code>;</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.618ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2041 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-5-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-5-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-5-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-5-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-5-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-5-TEX-N-28\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-5-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1652, 0)\"><use xlink:href=\"#MJX-5-TEX-N-29\"></use></g></g></g></svg></mjx-container>.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Description\">Description</h2>\n<p>Given two version numbers, <code>version1</code> and <code>version2</code>, compare them.</p>\n<p>Version numbers consist of <strong>one or more revisions</strong> joined by a dot <code>'.'</code>. Each revision consists of <strong>digits</strong> and may contain leading <strong>zeros</strong>. Every revision contains <strong>at least one character</strong>. Revisions are <strong>0-indexed from left to right</strong>, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example <code>2.5.33</code> and <code>0.1</code> are valid version numbers.</p>\n<p>To compare version numbers, compare their revisions in <strong>left-to-right order</strong>. Revisions are compared using their <strong>integer value ignoring any leading zeros</strong>. This means that revisions <code>1</code> and <code>001</code> are considered <strong>equal</strong>. If a version number does not specify a revision at an index, then <strong>treat the revision as <code>0</code></strong>. For example, version <code>1.0</code> is less than version <code>1.1</code> because their revision 0s are the same, but their revision 1s are <code>0</code> and <code>1</code> respectively, and <code>0 &lt; 1</code>.</p>\n<p><em>Return the following:</em></p>\n<ul>\n<li>If <code>version1 &lt; version2</code>, return <code>1</code>.</li>\n<li>If <code>version1 &gt; version2</code>, return <code>1</code>.</li>\n<li>Otherwise, return <code>0</code>.</li>\n</ul>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<pre><code>Input: version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;\nOutput: 0\nExplanation: Ignoring leading zeroes, both &quot;01&quot; and &quot;001&quot; represent the same integer &quot;1&quot;.\n</code></pre>\n<h3 id=\"example-2\">example 2</h3>\n<pre><code>Input: version1 = &quot;1.0&quot;, version2 = &quot;1.0.0&quot;\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as &quot;0&quot;.\n</code></pre>\n<h3 id=\"example-3\">example 3</h3>\n<pre><code>Input: version1 = &quot;0.1&quot;, version2 = &quot;1.1&quot;\nOutput: -1\nExplanation: version1's revision 0 is &quot;0&quot;, while version2's revision 0 is &quot;1&quot;. 0 &lt; 1, so version1 &lt; version2.\n</code></pre>\n<h3 id=\"example-4\">example 4</h3>\n<pre><code>Input: version1 = &quot;1.0.1&quot;, version2 = &quot;1&quot;\nOutput: 1\n</code></pre>\n<h3 id=\"example-5\">example 5</h3>\n<pre><code>Input: version1 = &quot;7.5.2.4&quot;, version2 = &quot;7.5.3&quot;\nOutput: -1\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li>\n<li><code>version1</code> and <code>version2</code> only contain digits and <code>'.'</code>.</li>\n<li><code>version1</code> and <code>version2</code> <strong>are valid version numbers</strong>.</li>\n<li>All the given revisions in <code>version1</code> and <code>version2</code> can be stored in a <strong>32-bit integer</strong>.</li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>In order to compare version number, we can split <code>version1</code> and <code>version2</code> by dot(<code>.</code>) and transfer string to number respectively and compare them.</p>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code>class Solution:\n    def compareVersion(self, version1, version2):\n        len1, len2 = len(version1), len(version2)\n        index1, index2 = 0, 0\n\n        while index1 &lt; len1 or index2 &lt; len2:\n            value1 = 0\n            while index1 &lt; len1 and version1[index1] != '.':\n                value1 = value1 * 10 + ord(version1[index1]) - ord('0')\n                index1 += 1\n            index1 += 1\n\n            value2 = 0\n            while index2 &lt; len2 and version2[index2] != '.':\n                value2 = value2 * 10 + ord(version2[index2]) - ord('0')\n                index2 += 1\n            index2 += 1\n            if value1 &gt; value2:\n                return 1\n            elif value1 &lt; value2:\n                return -1\n        \n        return 0\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>/**\n * @param &#123;string&#125; version1\n * @param &#123;string&#125; version2\n * @return &#123;number&#125;\n */\nvar compareVersion = function(version1, version2) &#123;\n\n  let p1 = 0, p2 = 0\n  const len1 = version1.length, len2 = version2.length\n  \n  while (p1 &lt; len1 || p2 &lt; len2) &#123;\n      \n      let i1 = getNextChunk(version1, len1, p1).res\n      p1 = getNextChunk(version1, len1, p1).start\n      \n      let i2 = getNextChunk(version2, len2, p2).res\n      p2 = getNextChunk(version2, len2, p2).start\n      \n      if (i1 !== i2) &#123;\n          return i1 &gt; i2 ? 1 : -1\n      &#125;\n      \n      \n  &#125;\n  \n  return 0\n  \n&#125;;\n\nlet getNextChunk = (version, length, start) =&gt; &#123;\n  \n  if (start &gt; length - 1) return&#123; res: 0, start&#125;\n  \n  let index = start\n  \n  while (index &lt; length &amp;&amp; version[index] !== '.') &#123;\n      index += 1\n  &#125;\n  console.log('index is: ', index)\n  const res = index &gt;= length ? Number(version.substring(start, length)) : Number(version.substring(start, index))\n  \n  start = index + 1\n  \n  return &#123;res, start&#125;\n  \n&#125;\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.074ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6220.7 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-5-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-5-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-5-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-5-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-5-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-5-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-5-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-5-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-5-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-5-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-5-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2030, 0)\"><use xlink:href=\"#MJX-5-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2559, 0)\"><use xlink:href=\"#MJX-5-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3131, 0)\"><use xlink:href=\"#MJX-5-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3520, 0)\"><use xlink:href=\"#MJX-5-TEX-I-1D45A\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4398, 0)\"><use xlink:href=\"#MJX-5-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4842.7, 0)\"><use xlink:href=\"#MJX-5-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5442.7, 0)\"><use xlink:href=\"#MJX-5-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5831.7, 0)\"><use xlink:href=\"#MJX-5-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>m</code> is the length of <code>version1</code> and <code>n</code> is the number of <code>version2</code>;</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.618ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2041 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-5-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-5-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-5-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-5-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-5-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-5-TEX-N-28\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-5-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1652, 0)\"><use xlink:href=\"#MJX-5-TEX-N-29\"></use></g></g></g></svg></mjx-container>.</li>\n</ul>\n"},{"title":"Leetcode 19. Remove Nth Node From End of List","date":"2021-09-02T15:07:08.000Z","_content":"## Description\nGiven two version numbers, `version1` and `version2`, compare them.\n\nVersion numbers consist of **one or more revisions** joined by a dot `'.'`. Each revision consists of **digits** and may contain leading **zeros**. Every revision contains **at least one character**. Revisions are **0-indexed from left to right**, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.\n\nTo compare version numbers, compare their revisions in **left-to-right order**. Revisions are compared using their **integer value ignoring any leading zeros**. This means that revisions `1` and `001` are considered **equal**. If a version number does not specify a revision at an index, then **treat the revision as `0`**. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.\n\n*Return the following:*\n\n- If `version1 < version2`, return `1`.\n- If `version1 > version2`, return `1`.\n- Otherwise, return `0`.\n\n## Examples\n### example 1\n![avatar](https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg)\n```\nInput: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n```\n\n### example 2\n```\nInput: version1 = \"1.0\", version2 = \"1.0.0\"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".\n```\n\n### example 3\n```\nInput: version1 = \"0.1\", version2 = \"1.1\"\nOutput: -1\nExplanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.\n```\n\n### example 4\n```\nInput: version1 = \"1.0.1\", version2 = \"1\"\nOutput: 1\n```\n\n### example 5\n```\nInput: version1 = \"7.5.2.4\", version2 = \"7.5.3\"\nOutput: -1\n```\n\n### constraints\n- `1 <= version1.length, version2.length <= 500`\n- `version1` and `version2` only contain digits and `'.'`.\n- `version1` and `version2` **are valid version numbers**.\n- All the given revisions in `version1` and `version2` can be stored in a **32-bit integer**.\n\n## Idea\nIn order to compare version number, we can split `version1` and `version2` by dot(`.`) and transfer string to number respectively and compare them.\n\n## Code\n### Python\n```\nclass Solution:\n    def compareVersion(self, version1, version2):\n        len1, len2 = len(version1), len(version2)\n        index1, index2 = 0, 0\n\n        while index1 < len1 or index2 < len2:\n            value1 = 0\n            while index1 < len1 and version1[index1] != '.':\n                value1 = value1 * 10 + ord(version1[index1]) - ord('0')\n                index1 += 1\n            index1 += 1\n\n            value2 = 0\n            while index2 < len2 and version2[index2] != '.':\n                value2 = value2 * 10 + ord(version2[index2]) - ord('0')\n                index2 += 1\n            index2 += 1\n            if value1 > value2:\n                return 1\n            elif value1 < value2:\n                return -1\n        \n        return 0\n```\n\n### JavaScript\n```\n/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */\nvar compareVersion = function(version1, version2) {\n\n  let p1 = 0, p2 = 0\n  const len1 = version1.length, len2 = version2.length\n  \n  while (p1 < len1 || p2 < len2) {\n      \n      let i1 = getNextChunk(version1, len1, p1).res\n      p1 = getNextChunk(version1, len1, p1).start\n      \n      let i2 = getNextChunk(version2, len2, p2).res\n      p2 = getNextChunk(version2, len2, p2).start\n      \n      if (i1 !== i2) {\n          return i1 > i2 ? 1 : -1\n      }\n      \n      \n  }\n  \n  return 0\n  \n};\n\nlet getNextChunk = (version, length, start) => {\n  \n  if (start > length - 1) return{ res: 0, start}\n  \n  let index = start\n  \n  while (index < length && version[index] !== '.') {\n      index += 1\n  }\n  console.log('index is: ', index)\n  const res = index >= length ? Number(version.substring(start, length)) : Number(version.substring(start, index))\n  \n  start = index + 1\n  \n  return {res, start}\n  \n}\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(max(m, n)){% endmathjax %}, `m` is the length of `version1` and `n` is the number of `version2`;\n- space complexity: {% mathjax %}O(1){% endmathjax %}.","source":"_posts/Leetcode-19-Remove-Nth-Node-From-End-of-List.md","raw":"---\ntitle: Leetcode 19. Remove Nth Node From End of List\ndate: 2021-09-02 23:07:08\ntags: \n    - algorithm\n    - Leetcode\n    - two-pointers\ncategories:\n    - Data structure and algorithm\n---\n## Description\nGiven two version numbers, `version1` and `version2`, compare them.\n\nVersion numbers consist of **one or more revisions** joined by a dot `'.'`. Each revision consists of **digits** and may contain leading **zeros**. Every revision contains **at least one character**. Revisions are **0-indexed from left to right**, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.\n\nTo compare version numbers, compare their revisions in **left-to-right order**. Revisions are compared using their **integer value ignoring any leading zeros**. This means that revisions `1` and `001` are considered **equal**. If a version number does not specify a revision at an index, then **treat the revision as `0`**. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.\n\n*Return the following:*\n\n- If `version1 < version2`, return `1`.\n- If `version1 > version2`, return `1`.\n- Otherwise, return `0`.\n\n## Examples\n### example 1\n![avatar](https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg)\n```\nInput: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n```\n\n### example 2\n```\nInput: version1 = \"1.0\", version2 = \"1.0.0\"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".\n```\n\n### example 3\n```\nInput: version1 = \"0.1\", version2 = \"1.1\"\nOutput: -1\nExplanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.\n```\n\n### example 4\n```\nInput: version1 = \"1.0.1\", version2 = \"1\"\nOutput: 1\n```\n\n### example 5\n```\nInput: version1 = \"7.5.2.4\", version2 = \"7.5.3\"\nOutput: -1\n```\n\n### constraints\n- `1 <= version1.length, version2.length <= 500`\n- `version1` and `version2` only contain digits and `'.'`.\n- `version1` and `version2` **are valid version numbers**.\n- All the given revisions in `version1` and `version2` can be stored in a **32-bit integer**.\n\n## Idea\nIn order to compare version number, we can split `version1` and `version2` by dot(`.`) and transfer string to number respectively and compare them.\n\n## Code\n### Python\n```\nclass Solution:\n    def compareVersion(self, version1, version2):\n        len1, len2 = len(version1), len(version2)\n        index1, index2 = 0, 0\n\n        while index1 < len1 or index2 < len2:\n            value1 = 0\n            while index1 < len1 and version1[index1] != '.':\n                value1 = value1 * 10 + ord(version1[index1]) - ord('0')\n                index1 += 1\n            index1 += 1\n\n            value2 = 0\n            while index2 < len2 and version2[index2] != '.':\n                value2 = value2 * 10 + ord(version2[index2]) - ord('0')\n                index2 += 1\n            index2 += 1\n            if value1 > value2:\n                return 1\n            elif value1 < value2:\n                return -1\n        \n        return 0\n```\n\n### JavaScript\n```\n/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */\nvar compareVersion = function(version1, version2) {\n\n  let p1 = 0, p2 = 0\n  const len1 = version1.length, len2 = version2.length\n  \n  while (p1 < len1 || p2 < len2) {\n      \n      let i1 = getNextChunk(version1, len1, p1).res\n      p1 = getNextChunk(version1, len1, p1).start\n      \n      let i2 = getNextChunk(version2, len2, p2).res\n      p2 = getNextChunk(version2, len2, p2).start\n      \n      if (i1 !== i2) {\n          return i1 > i2 ? 1 : -1\n      }\n      \n      \n  }\n  \n  return 0\n  \n};\n\nlet getNextChunk = (version, length, start) => {\n  \n  if (start > length - 1) return{ res: 0, start}\n  \n  let index = start\n  \n  while (index < length && version[index] !== '.') {\n      index += 1\n  }\n  console.log('index is: ', index)\n  const res = index >= length ? Number(version.substring(start, length)) : Number(version.substring(start, index))\n  \n  start = index + 1\n  \n  return {res, start}\n  \n}\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(max(m, n)){% endmathjax %}, `m` is the length of `version1` and `n` is the number of `version2`;\n- space complexity: {% mathjax %}O(1){% endmathjax %}.","slug":"Leetcode-19-Remove-Nth-Node-From-End-of-List","published":1,"updated":"2021-09-03T02:33:19.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet6u000do24mh70oh5nk","content":"<h2 id=\"Description\">Description</h2>\n<p>Given two version numbers,&nbsp;<code>version1</code>&nbsp;and&nbsp;<code>version2</code>, compare them.</p>\n<p>Version numbers consist of&nbsp;<strong>one or more revisions</strong>&nbsp;joined by a dot&nbsp;<code>'.'</code>. Each revision&nbsp;consists of&nbsp;<strong>digits</strong>&nbsp;and may contain leading&nbsp;<strong>zeros</strong>. Every revision contains&nbsp;<strong>at least one character</strong>. Revisions are&nbsp;<strong>0-indexed from left to right</strong>, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example&nbsp;<code>2.5.33</code>&nbsp;and&nbsp;<code>0.1</code>&nbsp;are valid version numbers.</p>\n<p>To compare version numbers, compare their revisions in&nbsp;<strong>left-to-right order</strong>. Revisions are compared using their&nbsp;<strong>integer value ignoring any leading zeros</strong>. This means that revisions&nbsp;<code>1</code>&nbsp;and&nbsp;<code>001</code>&nbsp;are considered&nbsp;<strong>equal</strong>. If a version number does not specify a revision at an index, then&nbsp;<strong>treat the revision as&nbsp;<code>0</code></strong>. For example, version&nbsp;<code>1.0</code>&nbsp;is less than version&nbsp;<code>1.1</code>&nbsp;because their revision 0s are the same, but their revision 1s are&nbsp;<code>0</code>&nbsp;and&nbsp;<code>1</code>&nbsp;respectively, and&nbsp;<code>0 &lt; 1</code>.</p>\n<p><em>Return the following:</em></p>\n<ul>\n<li>If&nbsp;<code>version1 &lt; version2</code>, return&nbsp;<code>1</code>.</li>\n<li>If&nbsp;<code>version1 &gt; version2</code>, return&nbsp;<code>1</code>.</li>\n<li>Otherwise, return&nbsp;<code>0</code>.</li>\n</ul>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" alt=\"avatar\"></p>\n<pre><code>Input: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n</code></pre>\n<h3 id=\"example-2\">example 2</h3>\n<pre><code>Input: version1 = \"1.0\", version2 = \"1.0.0\"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".\n</code></pre>\n<h3 id=\"example-3\">example 3</h3>\n<pre><code>Input: version1 = \"0.1\", version2 = \"1.1\"\nOutput: -1\nExplanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 &lt; 1, so version1 &lt; version2.\n</code></pre>\n<h3 id=\"example-4\">example 4</h3>\n<pre><code>Input: version1 = \"1.0.1\", version2 = \"1\"\nOutput: 1\n</code></pre>\n<h3 id=\"example-5\">example 5</h3>\n<pre><code>Input: version1 = \"7.5.2.4\", version2 = \"7.5.3\"\nOutput: -1\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li>\n<li><code>version1</code>&nbsp;and&nbsp;<code>version2</code>&nbsp;only contain digits and&nbsp;<code>'.'</code>.</li>\n<li><code>version1</code>&nbsp;and&nbsp;<code>version2</code>&nbsp;<strong>are valid version numbers</strong>.</li>\n<li>All the given revisions in&nbsp;<code>version1</code>&nbsp;and&nbsp;<code>version2</code>&nbsp;can be stored in&nbsp;a&nbsp;<strong>32-bit integer</strong>.</li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>In order to compare version number, we can split <code>version1</code> and <code>version2</code> by dot(<code>.</code>) and transfer string to number respectively and compare them.</p>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code>class Solution:\n    def compareVersion(self, version1, version2):\n        len1, len2 = len(version1), len(version2)\n        index1, index2 = 0, 0\n\n        while index1 &lt; len1 or index2 &lt; len2:\n            value1 = 0\n            while index1 &lt; len1 and version1[index1] != '.':\n                value1 = value1 * 10 + ord(version1[index1]) - ord('0')\n                index1 += 1\n            index1 += 1\n\n            value2 = 0\n            while index2 &lt; len2 and version2[index2] != '.':\n                value2 = value2 * 10 + ord(version2[index2]) - ord('0')\n                index2 += 1\n            index2 += 1\n            if value1 &gt; value2:\n                return 1\n            elif value1 &lt; value2:\n                return -1\n        \n        return 0\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */\nvar compareVersion = function(version1, version2) {\n\n  let p1 = 0, p2 = 0\n  const len1 = version1.length, len2 = version2.length\n  \n  while (p1 &lt; len1 || p2 &lt; len2) {\n      \n      let i1 = getNextChunk(version1, len1, p1).res\n      p1 = getNextChunk(version1, len1, p1).start\n      \n      let i2 = getNextChunk(version2, len2, p2).res\n      p2 = getNextChunk(version2, len2, p2).start\n      \n      if (i1 !== i2) {\n          return i1 &gt; i2 ? 1 : -1\n      }\n      \n      \n  }\n  \n  return 0\n  \n};\n\nlet getNextChunk = (version, length, start) =&gt; {\n  \n  if (start &gt; length - 1) return{ res: 0, start}\n  \n  let index = start\n  \n  while (index &lt; length &amp;&amp; version[index] !== '.') {\n      index += 1\n  }\n  console.log('index is: ', index)\n  const res = index &gt;= length ? Number(version.substring(start, length)) : Number(version.substring(start, index))\n  \n  start = index + 1\n  \n  return {res, start}\n  \n}\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.074ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6220.7 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-6-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-6-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-6-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-6-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-6-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-6-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-6-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-6-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-6-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-6-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-6-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2030, 0)\"><use xlink:href=\"#MJX-6-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2559, 0)\"><use xlink:href=\"#MJX-6-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3131, 0)\"><use xlink:href=\"#MJX-6-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3520, 0)\"><use xlink:href=\"#MJX-6-TEX-I-1D45A\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4398, 0)\"><use xlink:href=\"#MJX-6-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4842.7, 0)\"><use xlink:href=\"#MJX-6-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5442.7, 0)\"><use xlink:href=\"#MJX-6-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5831.7, 0)\"><use xlink:href=\"#MJX-6-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>m</code> is the length of <code>version1</code> and <code>n</code> is the number of <code>version2</code>;</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.618ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2041 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-6-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-6-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-6-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-6-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-6-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-6-TEX-N-28\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-6-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1652, 0)\"><use xlink:href=\"#MJX-6-TEX-N-29\"></use></g></g></g></svg></mjx-container>.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Description\">Description</h2>\n<p>Given two version numbers, <code>version1</code> and <code>version2</code>, compare them.</p>\n<p>Version numbers consist of <strong>one or more revisions</strong> joined by a dot <code>'.'</code>. Each revision consists of <strong>digits</strong> and may contain leading <strong>zeros</strong>. Every revision contains <strong>at least one character</strong>. Revisions are <strong>0-indexed from left to right</strong>, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example <code>2.5.33</code> and <code>0.1</code> are valid version numbers.</p>\n<p>To compare version numbers, compare their revisions in <strong>left-to-right order</strong>. Revisions are compared using their <strong>integer value ignoring any leading zeros</strong>. This means that revisions <code>1</code> and <code>001</code> are considered <strong>equal</strong>. If a version number does not specify a revision at an index, then <strong>treat the revision as <code>0</code></strong>. For example, version <code>1.0</code> is less than version <code>1.1</code> because their revision 0s are the same, but their revision 1s are <code>0</code> and <code>1</code> respectively, and <code>0 &lt; 1</code>.</p>\n<p><em>Return the following:</em></p>\n<ul>\n<li>If <code>version1 &lt; version2</code>, return <code>1</code>.</li>\n<li>If <code>version1 &gt; version2</code>, return <code>1</code>.</li>\n<li>Otherwise, return <code>0</code>.</li>\n</ul>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" alt=\"avatar\"></p>\n<pre><code>Input: version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;\nOutput: 0\nExplanation: Ignoring leading zeroes, both &quot;01&quot; and &quot;001&quot; represent the same integer &quot;1&quot;.\n</code></pre>\n<h3 id=\"example-2\">example 2</h3>\n<pre><code>Input: version1 = &quot;1.0&quot;, version2 = &quot;1.0.0&quot;\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as &quot;0&quot;.\n</code></pre>\n<h3 id=\"example-3\">example 3</h3>\n<pre><code>Input: version1 = &quot;0.1&quot;, version2 = &quot;1.1&quot;\nOutput: -1\nExplanation: version1's revision 0 is &quot;0&quot;, while version2's revision 0 is &quot;1&quot;. 0 &lt; 1, so version1 &lt; version2.\n</code></pre>\n<h3 id=\"example-4\">example 4</h3>\n<pre><code>Input: version1 = &quot;1.0.1&quot;, version2 = &quot;1&quot;\nOutput: 1\n</code></pre>\n<h3 id=\"example-5\">example 5</h3>\n<pre><code>Input: version1 = &quot;7.5.2.4&quot;, version2 = &quot;7.5.3&quot;\nOutput: -1\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li>\n<li><code>version1</code> and <code>version2</code> only contain digits and <code>'.'</code>.</li>\n<li><code>version1</code> and <code>version2</code> <strong>are valid version numbers</strong>.</li>\n<li>All the given revisions in <code>version1</code> and <code>version2</code> can be stored in a <strong>32-bit integer</strong>.</li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>In order to compare version number, we can split <code>version1</code> and <code>version2</code> by dot(<code>.</code>) and transfer string to number respectively and compare them.</p>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code>class Solution:\n    def compareVersion(self, version1, version2):\n        len1, len2 = len(version1), len(version2)\n        index1, index2 = 0, 0\n\n        while index1 &lt; len1 or index2 &lt; len2:\n            value1 = 0\n            while index1 &lt; len1 and version1[index1] != '.':\n                value1 = value1 * 10 + ord(version1[index1]) - ord('0')\n                index1 += 1\n            index1 += 1\n\n            value2 = 0\n            while index2 &lt; len2 and version2[index2] != '.':\n                value2 = value2 * 10 + ord(version2[index2]) - ord('0')\n                index2 += 1\n            index2 += 1\n            if value1 &gt; value2:\n                return 1\n            elif value1 &lt; value2:\n                return -1\n        \n        return 0\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>/**\n * @param &#123;string&#125; version1\n * @param &#123;string&#125; version2\n * @return &#123;number&#125;\n */\nvar compareVersion = function(version1, version2) &#123;\n\n  let p1 = 0, p2 = 0\n  const len1 = version1.length, len2 = version2.length\n  \n  while (p1 &lt; len1 || p2 &lt; len2) &#123;\n      \n      let i1 = getNextChunk(version1, len1, p1).res\n      p1 = getNextChunk(version1, len1, p1).start\n      \n      let i2 = getNextChunk(version2, len2, p2).res\n      p2 = getNextChunk(version2, len2, p2).start\n      \n      if (i1 !== i2) &#123;\n          return i1 &gt; i2 ? 1 : -1\n      &#125;\n      \n      \n  &#125;\n  \n  return 0\n  \n&#125;;\n\nlet getNextChunk = (version, length, start) =&gt; &#123;\n  \n  if (start &gt; length - 1) return&#123; res: 0, start&#125;\n  \n  let index = start\n  \n  while (index &lt; length &amp;&amp; version[index] !== '.') &#123;\n      index += 1\n  &#125;\n  console.log('index is: ', index)\n  const res = index &gt;= length ? Number(version.substring(start, length)) : Number(version.substring(start, index))\n  \n  start = index + 1\n  \n  return &#123;res, start&#125;\n  \n&#125;\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.074ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6220.7 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-6-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-6-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-6-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-6-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-6-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path><path id=\"MJX-6-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-6-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-6-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-6-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-6-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-6-TEX-I-1D45A\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2030, 0)\"><use xlink:href=\"#MJX-6-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2559, 0)\"><use xlink:href=\"#MJX-6-TEX-I-1D465\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3131, 0)\"><use xlink:href=\"#MJX-6-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3520, 0)\"><use xlink:href=\"#MJX-6-TEX-I-1D45A\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4398, 0)\"><use xlink:href=\"#MJX-6-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4842.7, 0)\"><use xlink:href=\"#MJX-6-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5442.7, 0)\"><use xlink:href=\"#MJX-6-TEX-N-29\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5831.7, 0)\"><use xlink:href=\"#MJX-6-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>m</code> is the length of <code>version1</code> and <code>n</code> is the number of <code>version2</code>;</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.618ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2041 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-6-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-6-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-6-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-6-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-6-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-6-TEX-N-28\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-6-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1652, 0)\"><use xlink:href=\"#MJX-6-TEX-N-29\"></use></g></g></g></svg></mjx-container>.</li>\n</ul>\n"},{"title":"Leetcode 430. Flatten a Multilevel Doubly Linked List","date":"2021-09-24T05:28:37.000Z","_content":"## Description\nYou are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.\n\nFlatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.\n\n## Examples\n### example 1\n```\nInput: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation:\n\nThe multilevel linked list in the input is as follows:\n```\n!['https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png'](https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png)\n`After flattening the multilevel linked list it becomes:`\n![https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png](https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png)\n\n\n### example 2\n```\nInput: head = [1,2,null,3]\nOutput: [1,3,2]\nExplanation:\n\nThe input multilevel linked list is as follows:\n\n  1---2---NULL\n  |\n  3---NULL\n```\n\n### constraints\n- The number of Nodes will not exceed `1000`.\n- {% mathjax %}1 <= Node.val <= 105{% endmathjax %}\n\n## Idea\nWhen we traverse to a certain node `node`, if its `child` is not empty, then we need to flatten the linked list structure which the `child` points to and insert between `node` and `node.next`.\n\nTherefore, when meeting `child` is not empty, we must first process the linked list pointed to `child`, that is a **depth first seach** process. After we have completed the flattening of the linked list pointed to `child`, we can backtrack to the `node`.\n\nIn order to be able to insert a flat linked list between `node` and `node.next`, we need to know the last node of flattend linked list and store it.\n\n## Code\n### Python\n```\nclass Node:\n    def __init__(self, val, prev, next, child):\n          self.val = val\n          self.prev = prev\n          self.next = next\n          self.child = child\n\nclass Solution:\n    def flatten(self, head):\n        if not head: return\n\n        dummy = Node(0, None, head, None)\n        self.dfs(dummy, head)\n\n        dummy.next.prev = None\n        return dummy.next\n\n    def dfs(self, prev, curr):\n        if not curr:\n          return prev\n        \n        curr.prev = prev\n        prev.next = curr\n\n        tempNext = curr.next\n        tail = self.dfs(curr, curr.child)\n        curr.child = None\n        return self.dfs(tail, tempNext)\n```\n\n### JavaScript\n```\nfunction Node(val,prev,next,child) {\n  this.val = val;\n  this.prev = prev;\n  this.next = next;\n  this.child = child;\n}\n\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    if (!head) return\n\n    const dummy = new Node(0)\n    dummy.next = head;\n    dfs(dummy, head)\n    dummy.next.prev = null\n    return dummy.next\n};\n\nconst dfs = (prev, curr) => {\n  if (!curr) return prev\n\n  curr.prev = prev;\n  prev.next = curr;\n\n  const tempNext = curr.next;\n  const tail = dfs(curr, curr.child);\n  curr.child = null;\n  return dfs(tail, tempNext)\n\n}\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(n){% endmathjax %}, `n` is the length of linked list.\n- space complexity: {% mathjax %}O(n){% endmathjax %}, space is used in stack space for depth first seach. ","source":"_posts/Leetcode-430-Flatten-a-Multilevel-Doubly-Linked-List.md","raw":"---\ntitle: Leetcode 430. Flatten a Multilevel Doubly Linked List\ndate: 2021-09-24 13:28:37\ntags: \n    - algorithm\n    - Leetcode\n    - Linked-list\n    - DFS\ncategories:\n    - Data structure and algorithm\n---\n## Description\nYou are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.\n\nFlatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.\n\n## Examples\n### example 1\n```\nInput: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation:\n\nThe multilevel linked list in the input is as follows:\n```\n!['https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png'](https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png)\n`After flattening the multilevel linked list it becomes:`\n![https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png](https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png)\n\n\n### example 2\n```\nInput: head = [1,2,null,3]\nOutput: [1,3,2]\nExplanation:\n\nThe input multilevel linked list is as follows:\n\n  1---2---NULL\n  |\n  3---NULL\n```\n\n### constraints\n- The number of Nodes will not exceed `1000`.\n- {% mathjax %}1 <= Node.val <= 105{% endmathjax %}\n\n## Idea\nWhen we traverse to a certain node `node`, if its `child` is not empty, then we need to flatten the linked list structure which the `child` points to and insert between `node` and `node.next`.\n\nTherefore, when meeting `child` is not empty, we must first process the linked list pointed to `child`, that is a **depth first seach** process. After we have completed the flattening of the linked list pointed to `child`, we can backtrack to the `node`.\n\nIn order to be able to insert a flat linked list between `node` and `node.next`, we need to know the last node of flattend linked list and store it.\n\n## Code\n### Python\n```\nclass Node:\n    def __init__(self, val, prev, next, child):\n          self.val = val\n          self.prev = prev\n          self.next = next\n          self.child = child\n\nclass Solution:\n    def flatten(self, head):\n        if not head: return\n\n        dummy = Node(0, None, head, None)\n        self.dfs(dummy, head)\n\n        dummy.next.prev = None\n        return dummy.next\n\n    def dfs(self, prev, curr):\n        if not curr:\n          return prev\n        \n        curr.prev = prev\n        prev.next = curr\n\n        tempNext = curr.next\n        tail = self.dfs(curr, curr.child)\n        curr.child = None\n        return self.dfs(tail, tempNext)\n```\n\n### JavaScript\n```\nfunction Node(val,prev,next,child) {\n  this.val = val;\n  this.prev = prev;\n  this.next = next;\n  this.child = child;\n}\n\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    if (!head) return\n\n    const dummy = new Node(0)\n    dummy.next = head;\n    dfs(dummy, head)\n    dummy.next.prev = null\n    return dummy.next\n};\n\nconst dfs = (prev, curr) => {\n  if (!curr) return prev\n\n  curr.prev = prev;\n  prev.next = curr;\n\n  const tempNext = curr.next;\n  const tail = dfs(curr, curr.child);\n  curr.child = null;\n  return dfs(tail, tempNext)\n\n}\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(n){% endmathjax %}, `n` is the length of linked list.\n- space complexity: {% mathjax %}O(n){% endmathjax %}, space is used in stack space for depth first seach. ","slug":"Leetcode-430-Flatten-a-Multilevel-Doubly-Linked-List","published":1,"updated":"2021-09-24T05:30:35.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet6w000ho24mbo9y9e5n","content":"<h2 id=\"Description\">Description</h2>\n<p>You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.</p>\n<p>Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.</p>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<pre><code>Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation:\n\nThe multilevel linked list in the input is as follows:\n</code></pre>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png\" alt=\"'https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png'\"><br>\n<code>After flattening the multilevel linked list it becomes:</code><br>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png\" alt=\"https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png\"></p>\n<h3 id=\"example-2\">example 2</h3>\n<pre><code>Input: head = [1,2,null,3]\nOutput: [1,3,2]\nExplanation:\n\nThe input multilevel linked list is as follows:\n\n  1---2---NULL\n  |\n  3---NULL\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li>The number of Nodes will not exceed&nbsp;<code>1000</code>.</li>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.391ex\" height=\"1.756ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 10338.8 776\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-7-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-7-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-7-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-7-TEX-I-1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path><path id=\"MJX-7-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-7-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path><path id=\"MJX-7-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-7-TEX-N-2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path><path id=\"MJX-7-TEX-I-1D463\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"></path><path id=\"MJX-7-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-7-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-7-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-7-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-7-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-7-TEX-N-3C\"></use><use xlink:href=\"#MJX-7-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D441\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3499.6, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3984.6, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4504.6, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D452\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4970.6, 0)\"><use xlink:href=\"#MJX-7-TEX-N-2E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5415.2, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D463\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5900.2, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6429.2, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D459\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7005, 0)\"><use xlink:href=\"#MJX-7-TEX-N-3C\"></use><use xlink:href=\"#MJX-7-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(8838.8, 0)\"><use xlink:href=\"#MJX-7-TEX-N-31\"></use><use xlink:href=\"#MJX-7-TEX-N-30\" transform=\"translate(500, 0)\"></use><use xlink:href=\"#MJX-7-TEX-N-35\" transform=\"translate(1000, 0)\"></use></g></g></g></svg></mjx-container>\n</li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>When we traverse to a certain node <code>node</code>, if its <code>child</code> is not empty, then we need to flatten the linked list structure which the <code>child</code> points to and insert between <code>node</code> and <code>node.next</code>.</p>\n<p>Therefore, when meeting <code>child</code> is not empty, we must first process the linked list pointed to <code>child</code>, that is a <strong>depth first seach</strong> process. After we have completed the flattening of the linked list pointed to <code>child</code>, we can backtrack to the <code>node</code>.</p>\n<p>In order to be able to insert a flat linked list between <code>node</code> and <code>node.next</code>, we need to know the last node of flattend linked list and store it.</p>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code>class Node:\n    def __init__(self, val, prev, next, child):\n          self.val = val\n          self.prev = prev\n          self.next = next\n          self.child = child\n\nclass Solution:\n    def flatten(self, head):\n        if not head: return\n\n        dummy = Node(0, None, head, None)\n        self.dfs(dummy, head)\n\n        dummy.next.prev = None\n        return dummy.next\n\n    def dfs(self, prev, curr):\n        if not curr:\n          return prev\n        \n        curr.prev = prev\n        prev.next = curr\n\n        tempNext = curr.next\n        tail = self.dfs(curr, curr.child)\n        curr.child = None\n        return self.dfs(tail, tempNext)\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>function Node(val,prev,next,child) {\n  this.val = val;\n  this.prev = prev;\n  this.next = next;\n  this.child = child;\n}\n\n/**\n * @param {Node} head\n * @return {Node}\n */\nvar flatten = function(head) {\n    if (!head) return\n\n    const dummy = new Node(0)\n    dummy.next = head;\n    dfs(dummy, head)\n    dummy.next.prev = null\n    return dummy.next\n};\n\nconst dfs = (prev, curr) =&gt; {\n  if (!curr) return prev\n\n  curr.prev = prev;\n  prev.next = curr;\n\n  const tempNext = curr.next;\n  const tail = dfs(curr, curr.child);\n  curr.child = null;\n  return dfs(tail, tempNext)\n\n}\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.844ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2141 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-7-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-7-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-7-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-7-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-7-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-7-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-7-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>n</code> is the length of linked list.</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.844ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2141 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-4-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-4-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-4-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-4-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-4-TEX-N-29\"></use></g></g></g></svg></mjx-container>, space is used in stack space for depth first seach.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Description\">Description</h2>\n<p>You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.</p>\n<p>Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.</p>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<pre><code>Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation:\n\nThe multilevel linked list in the input is as follows:\n</code></pre>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png\" alt=\"'https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png'\"><br>\n<code>After flattening the multilevel linked list it becomes:</code><br>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png\" alt=\"https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png\"></p>\n<h3 id=\"example-2\">example 2</h3>\n<pre><code>Input: head = [1,2,null,3]\nOutput: [1,3,2]\nExplanation:\n\nThe input multilevel linked list is as follows:\n\n  1---2---NULL\n  |\n  3---NULL\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li>The number of Nodes will not exceed <code>1000</code>.</li>\n<li>\n<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.391ex\" height=\"1.756ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 10338.8 776\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-7-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-7-TEX-N-3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path><path id=\"MJX-7-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-7-TEX-I-1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path><path id=\"MJX-7-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-7-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path><path id=\"MJX-7-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-7-TEX-N-2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path><path id=\"MJX-7-TEX-I-1D463\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"></path><path id=\"MJX-7-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-7-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-7-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-7-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-7-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(777.8, 0)\"><use xlink:href=\"#MJX-7-TEX-N-3C\"></use><use xlink:href=\"#MJX-7-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2611.6, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D441\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3499.6, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3984.6, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D451\"></use></g><g data-mml-node=\"mi\" transform=\"translate(4504.6, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D452\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4970.6, 0)\"><use xlink:href=\"#MJX-7-TEX-N-2E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5415.2, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D463\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5900.2, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D44E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(6429.2, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D459\"></use></g><g data-mml-node=\"mo\" transform=\"translate(7005, 0)\"><use xlink:href=\"#MJX-7-TEX-N-3C\"></use><use xlink:href=\"#MJX-7-TEX-N-3D\" transform=\"translate(778, 0)\"></use></g><g data-mml-node=\"mn\" transform=\"translate(8838.8, 0)\"><use xlink:href=\"#MJX-7-TEX-N-31\"></use><use xlink:href=\"#MJX-7-TEX-N-30\" transform=\"translate(500, 0)\"></use><use xlink:href=\"#MJX-7-TEX-N-35\" transform=\"translate(1000, 0)\"></use></g></g></g></svg></mjx-container>\n</li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>When we traverse to a certain node <code>node</code>, if its <code>child</code> is not empty, then we need to flatten the linked list structure which the <code>child</code> points to and insert between <code>node</code> and <code>node.next</code>.</p>\n<p>Therefore, when meeting <code>child</code> is not empty, we must first process the linked list pointed to <code>child</code>, that is a <strong>depth first seach</strong> process. After we have completed the flattening of the linked list pointed to <code>child</code>, we can backtrack to the <code>node</code>.</p>\n<p>In order to be able to insert a flat linked list between <code>node</code> and <code>node.next</code>, we need to know the last node of flattend linked list and store it.</p>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code>class Node:\n    def __init__(self, val, prev, next, child):\n          self.val = val\n          self.prev = prev\n          self.next = next\n          self.child = child\n\nclass Solution:\n    def flatten(self, head):\n        if not head: return\n\n        dummy = Node(0, None, head, None)\n        self.dfs(dummy, head)\n\n        dummy.next.prev = None\n        return dummy.next\n\n    def dfs(self, prev, curr):\n        if not curr:\n          return prev\n        \n        curr.prev = prev\n        prev.next = curr\n\n        tempNext = curr.next\n        tail = self.dfs(curr, curr.child)\n        curr.child = None\n        return self.dfs(tail, tempNext)\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>function Node(val,prev,next,child) &#123;\n  this.val = val;\n  this.prev = prev;\n  this.next = next;\n  this.child = child;\n&#125;\n\n/**\n * @param &#123;Node&#125; head\n * @return &#123;Node&#125;\n */\nvar flatten = function(head) &#123;\n    if (!head) return\n\n    const dummy = new Node(0)\n    dummy.next = head;\n    dfs(dummy, head)\n    dummy.next.prev = null\n    return dummy.next\n&#125;;\n\nconst dfs = (prev, curr) =&gt; &#123;\n  if (!curr) return prev\n\n  curr.prev = prev;\n  prev.next = curr;\n\n  const tempNext = curr.next;\n  const tail = dfs(curr, curr.child);\n  curr.child = null;\n  return dfs(tail, tempNext)\n\n&#125;\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.844ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2141 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-7-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-7-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-7-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-7-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-7-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-7-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-7-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-7-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>n</code> is the length of linked list.</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.844ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2141 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-4-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-4-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-4-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-4-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-4-TEX-N-29\"></use></g></g></g></svg></mjx-container>, space is used in stack space for depth first seach.</li>\n</ul>\n"},{"title":"Leetcode 725. Split Linked List in Parts","date":"2021-09-22T05:19:53.000Z","_content":"## Description\nGiven the `head` of a singly linked list and an integer `k`, split the linked list into `k` consecutive linked list parts.\n\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.\n\nThe parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\n\nReturn *an array of the* `k` *parts*.\n\n## Examples\n### example 1\n![https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg](https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg)\n```\nInput: head = [1,2,3], k = 5\nOutput: [[1],[2],[3],[],[]]\nExplanation:\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].\n```\n\n### example 2\n![https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg](https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg)\n```\nInput: head = [1,2,3,4,5,6,7,8,9,10], k = 3\nOutput: [[1,2,3,4],[5,6,7],[8,9,10]]\nExplanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n```\n\n### constraints\n- The number of nodes in the list is in the range `[0, 1000]`.\n- `0 <= Node.val <= 1000`\n- `1 <= k <= 50`\n\n## Idea\nIn order to split the linked list, we need to get the length of linked list `length` by traversal at first. \n\nAfter getting `length`, {% mathjax %}quotient = \\lfloor \\frac{length}{k} \\rfloor{% endmathjax %} and `remainder = length mod k`. It shows that in k parts, there are `remainder` parts that their length is `quotient + 1` and the remaining's length is `quotient`.\n\nDuring spliting linked list, start from head node, current node is `curr` and the follow these steps\n\n- take `curr` as head node of current part and store as `start`;\n- calculate current part's length `len`;\n- move `curr` in `len` steps, `curr` is the end node of current part;\n- `curr` need to be splited from origin linked list and store next node as `nxt` before splitting;\n- `next` pointer of `curr` points to `null`;\n- `curr` points to `nxt`\n\nThrough above steps, we can get one part from origin linked list and repeat the above operations to get the final result.\n\n\n## Code\n### Python\n```\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def splitListToParts(self, root, k):\n        length, node = 0, root\n        \n        while node:\n            length += 1\n            node = node.next\n        \n        n, remaining = divmod(length, k)\n        \n        # split the linked list\n        res, curr = [], root\n        \n        for i in range(k):\n            head = curr\n            for _ in range(n + (i < remaining) - 1):\n                if curr: curr = curr.next\n            if curr:\n                curr.next, curr = None, curr.next\n            res.append(head)\n        return res\n```\n\n### JavaScript\n```\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode[]}\n */\n var splitListToParts = function(head, k) {\n  let length = 0, curr = head;\n  while (curr) {\n      length += 1;\n      curr = curr.next;\n  }\n  \n  let n = Math.floor(length / k), remaining = length % k;\n  \n  const res = []; \n  curr = head;\n  \n  for (let i = 0; i < k; i++) {\n      const node = curr;\n      const width = n + (i < remaining ? 1 : 0);\n      for (let j = 1; j < width; j++) {\n          if (curr) curr = curr.next;\n      }\n      if (curr) {\n          const next = curr.next;\n          curr.next = null;\n          curr = next;\n      }\n      res.push(node);\n  }\n  \n  return res\n  \n};\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(n){% endmathjax %}, `n` is the length of linked list, there are two traverse to get the length of linked list and split linked list;\n- space complexity: {% mathjax %}O(1){% endmathjax %}.","source":"_posts/Leetcode-725-Split-Linked-List-in-Parts.md","raw":"---\ntitle: Leetcode 725. Split Linked List in Parts\ndate: 2021-09-22 13:19:53\ntags:\n    - algorithm\n    - Leetcode\n    - Linked-list\ncategories:\n    - Data structure adn algorithm\n---\n## Description\nGiven the `head` of a singly linked list and an integer `k`, split the linked list into `k` consecutive linked list parts.\n\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.\n\nThe parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\n\nReturn *an array of the* `k` *parts*.\n\n## Examples\n### example 1\n![https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg](https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg)\n```\nInput: head = [1,2,3], k = 5\nOutput: [[1],[2],[3],[],[]]\nExplanation:\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].\n```\n\n### example 2\n![https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg](https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg)\n```\nInput: head = [1,2,3,4,5,6,7,8,9,10], k = 3\nOutput: [[1,2,3,4],[5,6,7],[8,9,10]]\nExplanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n```\n\n### constraints\n- The number of nodes in the list is in the range `[0, 1000]`.\n- `0 <= Node.val <= 1000`\n- `1 <= k <= 50`\n\n## Idea\nIn order to split the linked list, we need to get the length of linked list `length` by traversal at first. \n\nAfter getting `length`, {% mathjax %}quotient = \\lfloor \\frac{length}{k} \\rfloor{% endmathjax %} and `remainder = length mod k`. It shows that in k parts, there are `remainder` parts that their length is `quotient + 1` and the remaining's length is `quotient`.\n\nDuring spliting linked list, start from head node, current node is `curr` and the follow these steps\n\n- take `curr` as head node of current part and store as `start`;\n- calculate current part's length `len`;\n- move `curr` in `len` steps, `curr` is the end node of current part;\n- `curr` need to be splited from origin linked list and store next node as `nxt` before splitting;\n- `next` pointer of `curr` points to `null`;\n- `curr` points to `nxt`\n\nThrough above steps, we can get one part from origin linked list and repeat the above operations to get the final result.\n\n\n## Code\n### Python\n```\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def splitListToParts(self, root, k):\n        length, node = 0, root\n        \n        while node:\n            length += 1\n            node = node.next\n        \n        n, remaining = divmod(length, k)\n        \n        # split the linked list\n        res, curr = [], root\n        \n        for i in range(k):\n            head = curr\n            for _ in range(n + (i < remaining) - 1):\n                if curr: curr = curr.next\n            if curr:\n                curr.next, curr = None, curr.next\n            res.append(head)\n        return res\n```\n\n### JavaScript\n```\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode[]}\n */\n var splitListToParts = function(head, k) {\n  let length = 0, curr = head;\n  while (curr) {\n      length += 1;\n      curr = curr.next;\n  }\n  \n  let n = Math.floor(length / k), remaining = length % k;\n  \n  const res = []; \n  curr = head;\n  \n  for (let i = 0; i < k; i++) {\n      const node = curr;\n      const width = n + (i < remaining ? 1 : 0);\n      for (let j = 1; j < width; j++) {\n          if (curr) curr = curr.next;\n      }\n      if (curr) {\n          const next = curr.next;\n          curr.next = null;\n          curr = next;\n      }\n      res.push(node);\n  }\n  \n  return res\n  \n};\n```\n\n## Time and space complexity\n- time complexity: {% mathjax %}O(n){% endmathjax %}, `n` is the length of linked list, there are two traverse to get the length of linked list and split linked list;\n- space complexity: {% mathjax %}O(1){% endmathjax %}.","slug":"Leetcode-725-Split-Linked-List-in-Parts","published":1,"updated":"2021-09-22T05:26:46.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet6x000ko24mbaghgf8s","content":"<h2 id=\"Description\">Description</h2>\n<p>Given the&nbsp;<code>head</code>&nbsp;of a singly linked list and an integer&nbsp;<code>k</code>, split the linked list into&nbsp;<code>k</code>&nbsp;consecutive linked list parts.</p>\n<p>The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.</p>\n<p>The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.</p>\n<p>Return&nbsp;<em>an array of the</em>&nbsp;<code>k</code>&nbsp;<em>parts</em>.</p>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg\" alt=\"https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg\"></p>\n<pre><code>Input: head = [1,2,3], k = 5\nOutput: [[1],[2],[3],[],[]]\nExplanation:\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].\n</code></pre>\n<h3 id=\"example-2\">example 2</h3>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg\" alt=\"https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg\"></p>\n<pre><code>Input: head = [1,2,3,4,5,6,7,8,9,10], k = 3\nOutput: [[1,2,3,4],[5,6,7],[8,9,10]]\nExplanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li>The number of nodes in the list is in the range&nbsp;<code>[0, 1000]</code>.</li>\n<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>In order to split the linked list, we need to get the length of linked list <code>length</code> by traversal at first.</p>\n<p>After getting <code>length</code>, <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.577ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.565ex\" height=\"4.676ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1370 9089.6 2067\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-8-TEX-I-1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path><path id=\"MJX-8-TEX-I-1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-8-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-8-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-8-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-8-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-8-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-8-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-8-TEX-N-230A\" d=\"M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z\"></path><path id=\"MJX-8-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-8-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-8-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path><path id=\"MJX-8-TEX-I-1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path><path id=\"MJX-8-TEX-N-230B\" d=\"M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-8-TEX-I-1D45E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(460, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D462\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1032, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1517, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1878, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D456\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2223, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2689, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3289, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D461\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3927.8, 0)\"><use xlink:href=\"#MJX-8-TEX-N-3D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4983.6, 0)\"><use xlink:href=\"#MJX-8-TEX-N-230A\"></use></g><g data-mml-node=\"mfrac\" transform=\"translate(5427.6, 0)\"><g data-mml-node=\"mrow\" transform=\"translate(220, 676)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-8-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(298, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(764, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1364, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D454\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1841, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2202, 0)\"><use xlink:href=\"#MJX-8-TEX-I-210E\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(1348.5, -686)\"><use xlink:href=\"#MJX-8-TEX-I-1D458\"></use></g><rect width=\"2978\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(8645.6, 0)\"><use xlink:href=\"#MJX-8-TEX-N-230B\"></use></g></g></g></svg></mjx-container> and <code>remainder = length mod k</code>. It shows that in k parts, there are <code>remainder</code> parts that their length is <code>quotient + 1</code> and the remaining’s length is <code>quotient</code>.</p>\n<p>During spliting linked list, start from head node, current node is <code>curr</code> and the follow these steps</p>\n<ul>\n<li>take <code>curr</code> as head node of current part and store as <code>start</code>;</li>\n<li>calculate current part’s length <code>len</code>;</li>\n<li>move <code>curr</code> in <code>len</code> steps, <code>curr</code> is the end node of current part;</li>\n<li><code>curr</code> need to be splited from origin linked list and store next node as <code>nxt</code> before splitting;</li>\n<li><code>next</code> pointer of <code>curr</code> points to <code>null</code>;</li>\n<li><code>curr</code> points to <code>nxt</code></li>\n</ul>\n<p>Through above steps, we can get one part from origin linked list and repeat the above operations to get the final result.</p>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code># Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def splitListToParts(self, root, k):\n        length, node = 0, root\n        \n        while node:\n            length += 1\n            node = node.next\n        \n        n, remaining = divmod(length, k)\n        \n        # split the linked list\n        res, curr = [], root\n        \n        for i in range(k):\n            head = curr\n            for _ in range(n + (i &lt; remaining) - 1):\n                if curr: curr = curr.next\n            if curr:\n                curr.next, curr = None, curr.next\n            res.append(head)\n        return res\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode[]}\n */\n var splitListToParts = function(head, k) {\n  let length = 0, curr = head;\n  while (curr) {\n      length += 1;\n      curr = curr.next;\n  }\n  \n  let n = Math.floor(length / k), remaining = length % k;\n  \n  const res = []; \n  curr = head;\n  \n  for (let i = 0; i &lt; k; i++) {\n      const node = curr;\n      const width = n + (i &lt; remaining ? 1 : 0);\n      for (let j = 1; j &lt; width; j++) {\n          if (curr) curr = curr.next;\n      }\n      if (curr) {\n          const next = curr.next;\n          curr.next = null;\n          curr = next;\n      }\n      res.push(node);\n  }\n  \n  return res\n  \n};\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.844ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2141 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-8-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-8-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-8-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-8-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-8-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-8-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-8-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>n</code> is the length of linked list, there are two traverse to get the length of linked list and split linked list;</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.618ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2041 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-5-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-5-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-5-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-5-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-5-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-5-TEX-N-28\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-5-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1652, 0)\"><use xlink:href=\"#MJX-5-TEX-N-29\"></use></g></g></g></svg></mjx-container>.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Description\">Description</h2>\n<p>Given the <code>head</code> of a singly linked list and an integer <code>k</code>, split the linked list into <code>k</code> consecutive linked list parts.</p>\n<p>The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.</p>\n<p>The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.</p>\n<p>Return <em>an array of the</em> <code>k</code> <em>parts</em>.</p>\n<h2 id=\"Examples\">Examples</h2>\n<h3 id=\"example-1\">example 1</h3>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg\" alt=\"https://assets.leetcode.com/uploads/2021/06/13/split1-lc.jpg\"></p>\n<pre><code>Input: head = [1,2,3], k = 5\nOutput: [[1],[2],[3],[],[]]\nExplanation:\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].\n</code></pre>\n<h3 id=\"example-2\">example 2</h3>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg\" alt=\"https://assets.leetcode.com/uploads/2021/06/13/split2-lc.jpg\"></p>\n<pre><code>Input: head = [1,2,3,4,5,6,7,8,9,10], k = 3\nOutput: [[1,2,3,4],[5,6,7],[8,9,10]]\nExplanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n</code></pre>\n<h3 id=\"constraints\">constraints</h3>\n<ul>\n<li>The number of nodes in the list is in the range <code>[0, 1000]</code>.</li>\n<li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n<h2 id=\"Idea\">Idea</h2>\n<p>In order to split the linked list, we need to get the length of linked list <code>length</code> by traversal at first.</p>\n<p>After getting <code>length</code>, <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.577ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.565ex\" height=\"4.676ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1370 9089.6 2067\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-8-TEX-I-1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path><path id=\"MJX-8-TEX-I-1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-8-TEX-I-1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path><path id=\"MJX-8-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-8-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-8-TEX-I-1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path><path id=\"MJX-8-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-8-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-8-TEX-N-230A\" d=\"M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z\"></path><path id=\"MJX-8-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path><path id=\"MJX-8-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path><path id=\"MJX-8-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path><path id=\"MJX-8-TEX-I-1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path><path id=\"MJX-8-TEX-N-230B\" d=\"M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-8-TEX-I-1D45E\"></use></g><g data-mml-node=\"mi\" transform=\"translate(460, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D462\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1032, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D45C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1517, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1878, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D456\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2223, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2689, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(3289, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D461\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3927.8, 0)\"><use xlink:href=\"#MJX-8-TEX-N-3D\"></use></g><g data-mml-node=\"mo\" transform=\"translate(4983.6, 0)\"><use xlink:href=\"#MJX-8-TEX-N-230A\"></use></g><g data-mml-node=\"mfrac\" transform=\"translate(5427.6, 0)\"><g data-mml-node=\"mrow\" transform=\"translate(220, 676)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-8-TEX-I-1D459\"></use></g><g data-mml-node=\"mi\" transform=\"translate(298, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D452\"></use></g><g data-mml-node=\"mi\" transform=\"translate(764, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D45B\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1364, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D454\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1841, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2202, 0)\"><use xlink:href=\"#MJX-8-TEX-I-210E\"></use></g></g><g data-mml-node=\"mi\" transform=\"translate(1348.5, -686)\"><use xlink:href=\"#MJX-8-TEX-I-1D458\"></use></g><rect width=\"2978\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(8645.6, 0)\"><use xlink:href=\"#MJX-8-TEX-N-230B\"></use></g></g></g></svg></mjx-container> and <code>remainder = length mod k</code>. It shows that in k parts, there are <code>remainder</code> parts that their length is <code>quotient + 1</code> and the remaining’s length is <code>quotient</code>.</p>\n<p>During spliting linked list, start from head node, current node is <code>curr</code> and the follow these steps</p>\n<ul>\n<li>take <code>curr</code> as head node of current part and store as <code>start</code>;</li>\n<li>calculate current part’s length <code>len</code>;</li>\n<li>move <code>curr</code> in <code>len</code> steps, <code>curr</code> is the end node of current part;</li>\n<li><code>curr</code> need to be splited from origin linked list and store next node as <code>nxt</code> before splitting;</li>\n<li><code>next</code> pointer of <code>curr</code> points to <code>null</code>;</li>\n<li><code>curr</code> points to <code>nxt</code></li>\n</ul>\n<p>Through above steps, we can get one part from origin linked list and repeat the above operations to get the final result.</p>\n<h2 id=\"Code\">Code</h2>\n<h3 id=\"Python\">Python</h3>\n<pre><code># Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def splitListToParts(self, root, k):\n        length, node = 0, root\n        \n        while node:\n            length += 1\n            node = node.next\n        \n        n, remaining = divmod(length, k)\n        \n        # split the linked list\n        res, curr = [], root\n        \n        for i in range(k):\n            head = curr\n            for _ in range(n + (i &lt; remaining) - 1):\n                if curr: curr = curr.next\n            if curr:\n                curr.next, curr = None, curr.next\n            res.append(head)\n        return res\n</code></pre>\n<h3 id=\"JavaScript\">JavaScript</h3>\n<pre><code>/**\n * Definition for singly-linked list.\n * function ListNode(val, next) &#123;\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * &#125;\n */\n/**\n * @param &#123;ListNode&#125; head\n * @param &#123;number&#125; k\n * @return &#123;ListNode[]&#125;\n */\n var splitListToParts = function(head, k) &#123;\n  let length = 0, curr = head;\n  while (curr) &#123;\n      length += 1;\n      curr = curr.next;\n  &#125;\n  \n  let n = Math.floor(length / k), remaining = length % k;\n  \n  const res = []; \n  curr = head;\n  \n  for (let i = 0; i &lt; k; i++) &#123;\n      const node = curr;\n      const width = n + (i &lt; remaining ? 1 : 0);\n      for (let j = 1; j &lt; width; j++) &#123;\n          if (curr) curr = curr.next;\n      &#125;\n      if (curr) &#123;\n          const next = curr.next;\n          curr.next = null;\n          curr = next;\n      &#125;\n      res.push(node);\n  &#125;\n  \n  return res\n  \n&#125;;\n</code></pre>\n<h2 id=\"Time-and-space-complexity\">Time and space complexity</h2>\n<ul>\n<li>time complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.844ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2141 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-8-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-8-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-8-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-8-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-8-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-8-TEX-N-28\"></use></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-8-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1752, 0)\"><use xlink:href=\"#MJX-8-TEX-N-29\"></use></g></g></g></svg></mjx-container>, <code>n</code> is the length of linked list, there are two traverse to get the length of linked list and split linked list;</li>\n<li>space complexity: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.618ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2041 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-5-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path><path id=\"MJX-5-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path id=\"MJX-5-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path id=\"MJX-5-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-5-TEX-I-1D442\"></use></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-5-TEX-N-28\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-5-TEX-N-31\"></use></g><g data-mml-node=\"mo\" transform=\"translate(1652, 0)\"><use xlink:href=\"#MJX-5-TEX-N-29\"></use></g></g></g></svg></mjx-container>.</li>\n</ul>\n"},{"title":"Sliding window","date":"2021-04-08T01:12:39.000Z","_content":"\n# Sliding Window Algorithm\n---\n\nSliding window algorithm is a kind of two pointers. This algorithm mostly used in string match.\n\n## template\n---\n\n```\ndef slidingWindow(s, t):\n    need, window, valid = {}, {}, 0\n\n    left, right = 0, 0\n    while right < len(s):\n        node = s[right]\n        right += 1\n\n        // update date\n        ...\n\n        while (window needs shrink):\n            deleteNode = s[left]\n            left += 1\n\n            // update data\n            ...\n\n```\n\n\n## Notice\n---\n\nThere are 4 questions need to be thought in sliding window algorithm\n\n1. When move `right` to expand window indicating add characters, which data need to update?\n\n2. Under what conditions, the window should pause to expand, and start to move `left` to shrink the window?\n\n3. When move `left`, which means delete characters, which data need to update?\n\n4. Should the result we want be updated when the window is enlarged or when the window is reduced?\n\n\n## Example\n---\n\n### leetcode 76 Minimum Window Substring (hard)\n\n#### Description\nGiven two strings `s` and `t`, return the minimum window in `s` which will contain all the characters in `t`. If there is no such window in `s` that covers all characters in `t`, return the empty string `\"\".`\n\n**Note** that If there is such a window, it is guaranteed that there will always be only one unique minimum window in `s`.\n\n#### Example\n```\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\n```\n\n#### Code\n```\ndef minWindow(self, s, t):\n    need, window, valid, length = {}, {}, 0, float('inf')\n\n    for node in t:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right < len(s):\n\n        node = s[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while valid == len(need):\n            if right - left < length:\n                start = left\n                length = right - left\n\n            deleteNode = s[left]\n            left += 1\n\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return '' if length == float('inf') else s[start: start+length]\n```\n\n### leetcode 567 Permutation in String (Medium)\n\n#### Description:\nGiven two strings **s1** and **s2**, write a function to return true if **s2** contains the permutation of **s1**. In other words, one of the first string's permutations is the **substring** of the second string.\n\n#### Example\n\n```\nInput: s1 = \"ab\" s2 = \"eidbaooo\"\nOutput: True\nExplanation: s2 contains one permutation of s1 (\"ba\").\n```\n\n#### Code\n```\n\ndef checkInclusion(self, s1, s2):\n    need, window, valid, = {}, {}, 0\n\n    for node in s1:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right < len(s2):\n        node = s2[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while right - left >= len(s1):\n            if valid == len(need):\n                return True\n\n            deleteNode = s2[left]\n            left += 1\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return False\n```\n\n\n### leetcode 438 Find All Anagrams in a String (Medium)\n\n#### Description:\nGiven a string s and a non-empty string p, find all the start indices of p's anagrams in s.\n\nStrings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.\n\nThe order of output does not matter.\n\n#### Example\n\n```\nInput:\ns: \"cbaebabacd\" p: \"abc\"\n\nOutput:\n[0, 6]\n\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n```\n\n#### Code\n```\ndef findAnagrams(self, s, p):\n\n    need, window, valid, res = {}, {}, 0, []\n\n    for node in p:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right < len(s):\n        node = s[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while right - left >= len(p):\n            if valid == len(need):\n                res.append(left)\n\n            deleteNode = s[left]\n            left += 1\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return res\n\n```\n\n### leetcode 3 Longest Substring Without Repeating Characters (Medium)\n\n#### Description:\nGiven a string s, find the length of the longest substring without repeating characters.\n\n#### Example\n\n```\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n```\n\n#### Code\n```\ndef lengthOfLongestSubstring(self, s):\n    if not s: return 0\n\n    left, right, res, window = 0, 0, 0, {}\n\n    while right < len(s):\n        node = s[right]\n        right += 1\n\n        if node not in window:\n            window[node] = 1\n        else:\n            window[node] += 1\n\n        while window[node] > 1:\n            deleteNode = s[left]\n            left += 1\n\n            window[deleteNode] -= 1\n\n        res = max(res, right - left)\n\n    return res\n```\n","source":"_posts/Sliding-window.md","raw":"---\ntitle: Sliding window\ndate: 2021-04-08 09:12:39\ntags:\n    - algorithm\n    - Leetcode\ncategories:\n    - Data structure and algorithm\n---\n\n# Sliding Window Algorithm\n---\n\nSliding window algorithm is a kind of two pointers. This algorithm mostly used in string match.\n\n## template\n---\n\n```\ndef slidingWindow(s, t):\n    need, window, valid = {}, {}, 0\n\n    left, right = 0, 0\n    while right < len(s):\n        node = s[right]\n        right += 1\n\n        // update date\n        ...\n\n        while (window needs shrink):\n            deleteNode = s[left]\n            left += 1\n\n            // update data\n            ...\n\n```\n\n\n## Notice\n---\n\nThere are 4 questions need to be thought in sliding window algorithm\n\n1. When move `right` to expand window indicating add characters, which data need to update?\n\n2. Under what conditions, the window should pause to expand, and start to move `left` to shrink the window?\n\n3. When move `left`, which means delete characters, which data need to update?\n\n4. Should the result we want be updated when the window is enlarged or when the window is reduced?\n\n\n## Example\n---\n\n### leetcode 76 Minimum Window Substring (hard)\n\n#### Description\nGiven two strings `s` and `t`, return the minimum window in `s` which will contain all the characters in `t`. If there is no such window in `s` that covers all characters in `t`, return the empty string `\"\".`\n\n**Note** that If there is such a window, it is guaranteed that there will always be only one unique minimum window in `s`.\n\n#### Example\n```\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\n```\n\n#### Code\n```\ndef minWindow(self, s, t):\n    need, window, valid, length = {}, {}, 0, float('inf')\n\n    for node in t:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right < len(s):\n\n        node = s[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while valid == len(need):\n            if right - left < length:\n                start = left\n                length = right - left\n\n            deleteNode = s[left]\n            left += 1\n\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return '' if length == float('inf') else s[start: start+length]\n```\n\n### leetcode 567 Permutation in String (Medium)\n\n#### Description:\nGiven two strings **s1** and **s2**, write a function to return true if **s2** contains the permutation of **s1**. In other words, one of the first string's permutations is the **substring** of the second string.\n\n#### Example\n\n```\nInput: s1 = \"ab\" s2 = \"eidbaooo\"\nOutput: True\nExplanation: s2 contains one permutation of s1 (\"ba\").\n```\n\n#### Code\n```\n\ndef checkInclusion(self, s1, s2):\n    need, window, valid, = {}, {}, 0\n\n    for node in s1:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right < len(s2):\n        node = s2[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while right - left >= len(s1):\n            if valid == len(need):\n                return True\n\n            deleteNode = s2[left]\n            left += 1\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return False\n```\n\n\n### leetcode 438 Find All Anagrams in a String (Medium)\n\n#### Description:\nGiven a string s and a non-empty string p, find all the start indices of p's anagrams in s.\n\nStrings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.\n\nThe order of output does not matter.\n\n#### Example\n\n```\nInput:\ns: \"cbaebabacd\" p: \"abc\"\n\nOutput:\n[0, 6]\n\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n```\n\n#### Code\n```\ndef findAnagrams(self, s, p):\n\n    need, window, valid, res = {}, {}, 0, []\n\n    for node in p:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right < len(s):\n        node = s[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while right - left >= len(p):\n            if valid == len(need):\n                res.append(left)\n\n            deleteNode = s[left]\n            left += 1\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return res\n\n```\n\n### leetcode 3 Longest Substring Without Repeating Characters (Medium)\n\n#### Description:\nGiven a string s, find the length of the longest substring without repeating characters.\n\n#### Example\n\n```\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n```\n\n#### Code\n```\ndef lengthOfLongestSubstring(self, s):\n    if not s: return 0\n\n    left, right, res, window = 0, 0, 0, {}\n\n    while right < len(s):\n        node = s[right]\n        right += 1\n\n        if node not in window:\n            window[node] = 1\n        else:\n            window[node] += 1\n\n        while window[node] > 1:\n            deleteNode = s[left]\n            left += 1\n\n            window[deleteNode] -= 1\n\n        res = max(res, right - left)\n\n    return res\n```\n","slug":"Sliding-window","published":1,"updated":"2021-04-10T02:18:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet6z000oo24m4bovfk6b","content":"<h1>Sliding Window Algorithm</h1>\n<hr>\n<p>Sliding window algorithm is a kind of two pointers. This algorithm mostly used in string match.</p>\n<h2 id=\"template\">template</h2>\n<hr>\n<pre><code>def slidingWindow(s, t):\n    need, window, valid = {}, {}, 0\n\n    left, right = 0, 0\n    while right &lt; len(s):\n        node = s[right]\n        right += 1\n\n        // update date\n        ...\n\n        while (window needs shrink):\n            deleteNode = s[left]\n            left += 1\n\n            // update data\n            ...\n\n</code></pre>\n<h2 id=\"Notice\">Notice</h2>\n<hr>\n<p>There are 4 questions need to be thought in sliding window algorithm</p>\n<ol>\n<li>\n<p>When move <code>right</code> to expand window indicating add characters, which data need to update?</p>\n</li>\n<li>\n<p>Under what conditions, the window should pause to expand, and start to move <code>left</code> to shrink the window?</p>\n</li>\n<li>\n<p>When move <code>left</code>, which means delete characters, which data need to update?</p>\n</li>\n<li>\n<p>Should the result we want be updated when the window is enlarged or when the window is reduced?</p>\n</li>\n</ol>\n<h2 id=\"Example\">Example</h2>\n<hr>\n<h3 id=\"leetcode-76-Minimum-Window-Substring-hard\">leetcode 76 Minimum Window Substring (hard)</h3>\n<h4 id=\"Description\">Description</h4>\n<p>Given two strings <code>s</code> and <code>t</code>, return the minimum window in <code>s</code> which will contain all the characters in <code>t</code>. If there is no such window in <code>s</code> that covers all characters in <code>t</code>, return the empty string <code>\"\".</code></p>\n<p><strong>Note</strong> that If there is such a window, it is guaranteed that there will always be only one unique minimum window in <code>s</code>.</p>\n<h4 id=\"Example-2\">Example</h4>\n<pre><code>Input: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\n</code></pre>\n<h4 id=\"Code\">Code</h4>\n<pre><code>def minWindow(self, s, t):\n    need, window, valid, length = {}, {}, 0, float('inf')\n\n    for node in t:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right &lt; len(s):\n\n        node = s[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while valid == len(need):\n            if right - left &lt; length:\n                start = left\n                length = right - left\n\n            deleteNode = s[left]\n            left += 1\n\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return '' if length == float('inf') else s[start: start+length]\n</code></pre>\n<h3 id=\"leetcode-567-Permutation-in-String-Medium\">leetcode 567 Permutation in String (Medium)</h3>\n<h4 id=\"Description-2\">Description:</h4>\n<p>Given two strings <strong>s1</strong> and <strong>s2</strong>, write a function to return true if <strong>s2</strong> contains the permutation of <strong>s1</strong>. In other words, one of the first string’s permutations is the <strong>substring</strong> of the second string.</p>\n<h4 id=\"Example-3\">Example</h4>\n<pre><code>Input: s1 = \"ab\" s2 = \"eidbaooo\"\nOutput: True\nExplanation: s2 contains one permutation of s1 (\"ba\").\n</code></pre>\n<h4 id=\"Code-2\">Code</h4>\n<pre><code>\ndef checkInclusion(self, s1, s2):\n    need, window, valid, = {}, {}, 0\n\n    for node in s1:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right &lt; len(s2):\n        node = s2[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while right - left &gt;= len(s1):\n            if valid == len(need):\n                return True\n\n            deleteNode = s2[left]\n            left += 1\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return False\n</code></pre>\n<h3 id=\"leetcode-438-Find-All-Anagrams-in-a-String-Medium\">leetcode 438 Find All Anagrams in a String (Medium)</h3>\n<h4 id=\"Description-3\">Description:</h4>\n<p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p>\n<p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p>\n<p>The order of output does not matter.</p>\n<h4 id=\"Example-4\">Example</h4>\n<pre><code>Input:\ns: \"cbaebabacd\" p: \"abc\"\n\nOutput:\n[0, 6]\n\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n</code></pre>\n<h4 id=\"Code-3\">Code</h4>\n<pre><code>def findAnagrams(self, s, p):\n\n    need, window, valid, res = {}, {}, 0, []\n\n    for node in p:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right &lt; len(s):\n        node = s[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while right - left &gt;= len(p):\n            if valid == len(need):\n                res.append(left)\n\n            deleteNode = s[left]\n            left += 1\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return res\n\n</code></pre>\n<h3 id=\"leetcode-3-Longest-Substring-Without-Repeating-Characters-Medium\">leetcode 3 Longest Substring Without Repeating Characters (Medium)</h3>\n<h4 id=\"Description-4\">Description:</h4>\n<p>Given a string s, find the length of the longest substring without repeating characters.</p>\n<h4 id=\"Example-5\">Example</h4>\n<pre><code>Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n</code></pre>\n<h4 id=\"Code-4\">Code</h4>\n<pre><code>def lengthOfLongestSubstring(self, s):\n    if not s: return 0\n\n    left, right, res, window = 0, 0, 0, {}\n\n    while right &lt; len(s):\n        node = s[right]\n        right += 1\n\n        if node not in window:\n            window[node] = 1\n        else:\n            window[node] += 1\n\n        while window[node] &gt; 1:\n            deleteNode = s[left]\n            left += 1\n\n            window[deleteNode] -= 1\n\n        res = max(res, right - left)\n\n    return res\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1>Sliding Window Algorithm</h1>\n<hr>\n<p>Sliding window algorithm is a kind of two pointers. This algorithm mostly used in string match.</p>\n<h2 id=\"template\">template</h2>\n<hr>\n<pre><code>def slidingWindow(s, t):\n    need, window, valid = &#123;&#125;, &#123;&#125;, 0\n\n    left, right = 0, 0\n    while right &lt; len(s):\n        node = s[right]\n        right += 1\n\n        // update date\n        ...\n\n        while (window needs shrink):\n            deleteNode = s[left]\n            left += 1\n\n            // update data\n            ...\n\n</code></pre>\n<h2 id=\"Notice\">Notice</h2>\n<hr>\n<p>There are 4 questions need to be thought in sliding window algorithm</p>\n<ol>\n<li>\n<p>When move <code>right</code> to expand window indicating add characters, which data need to update?</p>\n</li>\n<li>\n<p>Under what conditions, the window should pause to expand, and start to move <code>left</code> to shrink the window?</p>\n</li>\n<li>\n<p>When move <code>left</code>, which means delete characters, which data need to update?</p>\n</li>\n<li>\n<p>Should the result we want be updated when the window is enlarged or when the window is reduced?</p>\n</li>\n</ol>\n<h2 id=\"Example\">Example</h2>\n<hr>\n<h3 id=\"leetcode-76-Minimum-Window-Substring-hard\">leetcode 76 Minimum Window Substring (hard)</h3>\n<h4 id=\"Description\">Description</h4>\n<p>Given two strings <code>s</code> and <code>t</code>, return the minimum window in <code>s</code> which will contain all the characters in <code>t</code>. If there is no such window in <code>s</code> that covers all characters in <code>t</code>, return the empty string <code>&quot;&quot;.</code></p>\n<p><strong>Note</strong> that If there is such a window, it is guaranteed that there will always be only one unique minimum window in <code>s</code>.</p>\n<h4 id=\"Example-2\">Example</h4>\n<pre><code>Input: s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;\nOutput: &quot;BANC&quot;\n</code></pre>\n<h4 id=\"Code\">Code</h4>\n<pre><code>def minWindow(self, s, t):\n    need, window, valid, length = &#123;&#125;, &#123;&#125;, 0, float('inf')\n\n    for node in t:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right &lt; len(s):\n\n        node = s[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while valid == len(need):\n            if right - left &lt; length:\n                start = left\n                length = right - left\n\n            deleteNode = s[left]\n            left += 1\n\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return '' if length == float('inf') else s[start: start+length]\n</code></pre>\n<h3 id=\"leetcode-567-Permutation-in-String-Medium\">leetcode 567 Permutation in String (Medium)</h3>\n<h4 id=\"Description-2\">Description:</h4>\n<p>Given two strings <strong>s1</strong> and <strong>s2</strong>, write a function to return true if <strong>s2</strong> contains the permutation of <strong>s1</strong>. In other words, one of the first string’s permutations is the <strong>substring</strong> of the second string.</p>\n<h4 id=\"Example-3\">Example</h4>\n<pre><code>Input: s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;\nOutput: True\nExplanation: s2 contains one permutation of s1 (&quot;ba&quot;).\n</code></pre>\n<h4 id=\"Code-2\">Code</h4>\n<pre><code>\ndef checkInclusion(self, s1, s2):\n    need, window, valid, = &#123;&#125;, &#123;&#125;, 0\n\n    for node in s1:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right &lt; len(s2):\n        node = s2[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while right - left &gt;= len(s1):\n            if valid == len(need):\n                return True\n\n            deleteNode = s2[left]\n            left += 1\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return False\n</code></pre>\n<h3 id=\"leetcode-438-Find-All-Anagrams-in-a-String-Medium\">leetcode 438 Find All Anagrams in a String (Medium)</h3>\n<h4 id=\"Description-3\">Description:</h4>\n<p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p>\n<p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p>\n<p>The order of output does not matter.</p>\n<h4 id=\"Example-4\">Example</h4>\n<pre><code>Input:\ns: &quot;cbaebabacd&quot; p: &quot;abc&quot;\n\nOutput:\n[0, 6]\n\nExplanation:\nThe substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.\nThe substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.\n</code></pre>\n<h4 id=\"Code-3\">Code</h4>\n<pre><code>def findAnagrams(self, s, p):\n\n    need, window, valid, res = &#123;&#125;, &#123;&#125;, 0, []\n\n    for node in p:\n        if node not in need:\n            need[node] = 1\n        else:\n            need[node] += 1\n\n    left, right = 0, 0\n\n    while right &lt; len(s):\n        node = s[right]\n        right += 1\n\n        if node in need.keys():\n            if node not in window:\n                window[node] = 1\n            else:\n                window[node] += 1\n\n            if window[node] == need[node]:\n                valid += 1\n\n        while right - left &gt;= len(p):\n            if valid == len(need):\n                res.append(left)\n\n            deleteNode = s[left]\n            left += 1\n            if deleteNode in need.keys():\n                if window[deleteNode] == need[deleteNode]:\n                    valid -= 1\n                window[deleteNode] -= 1\n\n    return res\n\n</code></pre>\n<h3 id=\"leetcode-3-Longest-Substring-Without-Repeating-Characters-Medium\">leetcode 3 Longest Substring Without Repeating Characters (Medium)</h3>\n<h4 id=\"Description-4\">Description:</h4>\n<p>Given a string s, find the length of the longest substring without repeating characters.</p>\n<h4 id=\"Example-5\">Example</h4>\n<pre><code>Input: s = &quot;abcabcbb&quot;\nOutput: 3\nExplanation: The answer is &quot;abc&quot;, with the length of 3.\n</code></pre>\n<h4 id=\"Code-4\">Code</h4>\n<pre><code>def lengthOfLongestSubstring(self, s):\n    if not s: return 0\n\n    left, right, res, window = 0, 0, 0, &#123;&#125;\n\n    while right &lt; len(s):\n        node = s[right]\n        right += 1\n\n        if node not in window:\n            window[node] = 1\n        else:\n            window[node] += 1\n\n        while window[node] &gt; 1:\n            deleteNode = s[left]\n            left += 1\n\n            window[deleteNode] -= 1\n\n        res = max(res, right - left)\n\n    return res\n</code></pre>\n"},{"title":"Stack and queue","date":"2021-04-07T12:03:06.000Z","_content":"\n# Definition\n\n**Stack**: Last in, first out (LIFO)\n\n**Queue**: First in, first out (FIFO)\n\n# Operations\n\n## Stack\n\n1. push(x): inserts x into a stack.\n\n2. pop(): removes the newest item from a stack.\n\n3. top(): returns the newest item from a stack.\n\n## Queue\n\n1. Enqueue(x): inserts x into the queue.\n\n2. Dequeue(): removes the oldest item from the queue.\n\n3. Front(): returns the oldest item from the queue.\n\n# Implement with python\n\n## Stack\n\n```\nclass Stack:\n    def __init__(self):\n        self.stack = []\n\n    def _push(self, value):\n        self.stack.append(value)\n\n    def _pop(self):\n\n        if not self.stack:\n            raise Exception('The stack is empty.')\n        return self.stack.pop()\n\n    def _top(self):\n\n        if not self.stack:\n            raise Exception('The stack is empty.')\n        return self.stack[-1]\n```\n\n## Queue\n\n```\nclass Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, value):\n        self.queue.append(value)\n\n    def dequeue(self):\n\n        if not self.queue:\n            raise Exception('The queue is empty.')\n        return self.queue.pop(0)\n\n    def front(self):\n        if not self.queue:\n            raise Exception('The queue is empty.')\n        return self.queue[0]\n```\n\nReference:\n\n1. https://web.stanford.edu/class/cs97si/03-data-structures.pdf\n","source":"_posts/Stack-and-queue.md","raw":"---\ntitle: Stack and queue\ndate: 2021-04-07 20:03:06\ntags: \n    - Data structure\ncategories:\n    - Data structure and algorithm\n---\n\n# Definition\n\n**Stack**: Last in, first out (LIFO)\n\n**Queue**: First in, first out (FIFO)\n\n# Operations\n\n## Stack\n\n1. push(x): inserts x into a stack.\n\n2. pop(): removes the newest item from a stack.\n\n3. top(): returns the newest item from a stack.\n\n## Queue\n\n1. Enqueue(x): inserts x into the queue.\n\n2. Dequeue(): removes the oldest item from the queue.\n\n3. Front(): returns the oldest item from the queue.\n\n# Implement with python\n\n## Stack\n\n```\nclass Stack:\n    def __init__(self):\n        self.stack = []\n\n    def _push(self, value):\n        self.stack.append(value)\n\n    def _pop(self):\n\n        if not self.stack:\n            raise Exception('The stack is empty.')\n        return self.stack.pop()\n\n    def _top(self):\n\n        if not self.stack:\n            raise Exception('The stack is empty.')\n        return self.stack[-1]\n```\n\n## Queue\n\n```\nclass Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, value):\n        self.queue.append(value)\n\n    def dequeue(self):\n\n        if not self.queue:\n            raise Exception('The queue is empty.')\n        return self.queue.pop(0)\n\n    def front(self):\n        if not self.queue:\n            raise Exception('The queue is empty.')\n        return self.queue[0]\n```\n\nReference:\n\n1. https://web.stanford.edu/class/cs97si/03-data-structures.pdf\n","slug":"Stack-and-queue","published":1,"updated":"2021-04-09T02:06:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet70000ro24mgbtm0qih","content":"<h1>Definition</h1>\n<p><strong>Stack</strong>: Last in, first out (LIFO)</p>\n<p><strong>Queue</strong>: First in, first out (FIFO)</p>\n<h1>Operations</h1>\n<h2 id=\"Stack\">Stack</h2>\n<ol>\n<li>\n<p>push(x): inserts x into a stack.</p>\n</li>\n<li>\n<p>pop(): removes the newest item from a stack.</p>\n</li>\n<li>\n<p>top(): returns the newest item from a stack.</p>\n</li>\n</ol>\n<h2 id=\"Queue\">Queue</h2>\n<ol>\n<li>\n<p>Enqueue(x): inserts x into the queue.</p>\n</li>\n<li>\n<p>Dequeue(): removes the oldest item from the queue.</p>\n</li>\n<li>\n<p>Front(): returns the oldest item from the queue.</p>\n</li>\n</ol>\n<h1>Implement with python</h1>\n<h2 id=\"Stack-2\">Stack</h2>\n<pre><code>class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def _push(self, value):\n        self.stack.append(value)\n\n    def _pop(self):\n\n        if not self.stack:\n            raise Exception('The stack is empty.')\n        return self.stack.pop()\n\n    def _top(self):\n\n        if not self.stack:\n            raise Exception('The stack is empty.')\n        return self.stack[-1]\n</code></pre>\n<h2 id=\"Queue-2\">Queue</h2>\n<pre><code>class Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, value):\n        self.queue.append(value)\n\n    def dequeue(self):\n\n        if not self.queue:\n            raise Exception('The queue is empty.')\n        return self.queue.pop(0)\n\n    def front(self):\n        if not self.queue:\n            raise Exception('The queue is empty.')\n        return self.queue[0]\n</code></pre>\n<p>Reference:</p>\n<ol>\n<li><a href=\"https://web.stanford.edu/class/cs97si/03-data-structures.pdf\">https://web.stanford.edu/class/cs97si/03-data-structures.pdf</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1>Definition</h1>\n<p><strong>Stack</strong>: Last in, first out (LIFO)</p>\n<p><strong>Queue</strong>: First in, first out (FIFO)</p>\n<h1>Operations</h1>\n<h2 id=\"Stack\">Stack</h2>\n<ol>\n<li>\n<p>push(x): inserts x into a stack.</p>\n</li>\n<li>\n<p>pop(): removes the newest item from a stack.</p>\n</li>\n<li>\n<p>top(): returns the newest item from a stack.</p>\n</li>\n</ol>\n<h2 id=\"Queue\">Queue</h2>\n<ol>\n<li>\n<p>Enqueue(x): inserts x into the queue.</p>\n</li>\n<li>\n<p>Dequeue(): removes the oldest item from the queue.</p>\n</li>\n<li>\n<p>Front(): returns the oldest item from the queue.</p>\n</li>\n</ol>\n<h1>Implement with python</h1>\n<h2 id=\"Stack-2\">Stack</h2>\n<pre><code>class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def _push(self, value):\n        self.stack.append(value)\n\n    def _pop(self):\n\n        if not self.stack:\n            raise Exception('The stack is empty.')\n        return self.stack.pop()\n\n    def _top(self):\n\n        if not self.stack:\n            raise Exception('The stack is empty.')\n        return self.stack[-1]\n</code></pre>\n<h2 id=\"Queue-2\">Queue</h2>\n<pre><code>class Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, value):\n        self.queue.append(value)\n\n    def dequeue(self):\n\n        if not self.queue:\n            raise Exception('The queue is empty.')\n        return self.queue.pop(0)\n\n    def front(self):\n        if not self.queue:\n            raise Exception('The queue is empty.')\n        return self.queue[0]\n</code></pre>\n<p>Reference:</p>\n<ol>\n<li><a href=\"https://web.stanford.edu/class/cs97si/03-data-structures.pdf\">https://web.stanford.edu/class/cs97si/03-data-structures.pdf</a></li>\n</ol>\n"},{"title":"Ugly Number","date":"2021-04-10T02:12:43.000Z","_content":"\n# Definition\n---\n\n**Ugly number** is a positive number whose prime factors only include 2, 3, and/or 5.\n\n# Leetcode\n\n## 263. Ugly Number\n---\n\n**Description**\n\nGiven an integer `n`, return true if `n` is an ugly number.\n\n**Input and output**\n\n```\nInput: n = 6\nOutput: true\nExplanation: 6 = 2 × 3\n```\n\n**Solution**\n\nFrom the ugly number definition, we can know that the ugly number is combined with at most three factors that are 2, 3 and/or 5. Therefore, every ugly number `n` can be rewritten as {% mathjax %}n = 2^a + 3^b + 5^c {% endmathjax %}and {% mathjax %}a \\geq 0, b \\geq 0, c \\geq 0 {% endmathjax %}.\n\nIn order to judge whether target number is ugly number. We  can divisor 2, 3 and 5 until the number cannot be divisor by 2, 3 and 5. If the remaining number equals to 1, it indicates that the target number is ugly number and vice versa.\n\n```\nclass Solution:\n    def isUgly(self, n: int) -> bool:\n\n        if n <= 0: return False\n\n        factors = [2, 3, 5]\n\n        for factor in factors:\n            while n % factor == 0:\n                n //= factor\n        \n        return n == 1\n```\n\n## 264. Ugly Number II\n---\n\n**Description**\n\nGiven an integer `n`, return the $n^{th}$ **ugly number**.\n\n**Input and output**\n\n```\nInput: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n```\n\n**Solution**\n\nThe factors of ugly number are 2, 3 and/or 5, therefore, every ugly number comes from former ugly number multiply by 2, 3 and/or 5. For example, 1 is the first ugly number and 2, 3 and 5 have qualification to be multiplied by 1. Taking the mines one, that is 2 and put 2 into ugly number sequence. 2 lose the qualification to be multiplied by 1 and 2 has qualification to be multiplied by 2. Therefore, 3 and 5 has qualification to be multiplied by 1 and 2 can be multiplied by 2 and then continue to take mines number and so on.\n\n```\nclass Solution:\n    def nthUglyNumber(self, n):\n\n        dp = [0] * (n+1)\n        dp[1] = 1\n        p2, p3, p5 = 1, 1, 1\n\n        for i in range(2, n+1):\n\n            target = min(dp[p2] * 2, dp[p3] * 3, dp[p5] * 5)\n            dp[i] = target\n            if target == dp[p2] * 2: p2 += 1\n            if target == dp[p3] * 3: p3 += 1\n            if target == dp[p5] * 5: p5 += 1\n\n        return dp[n]\n```\n\n## 313. Super Ugly Number\n---\n\n**Description**\n\nGiven an integer `n` and an array of integers primes, return the {% mathjax %} n ^ {th} {% endmathjax %} **super ugly number**.\n\n**Super ugly number** is a positive number whose all prime factors are in the array `primes`.\n\nThe {% mathjax %} n ^ {th} {% endmathjax %} **super ugly number** is **guaranteed** to fit in a **32-bit** signed integer.\n\n**Input and output**\n\n```\nInput: n = 12, primes = [2,7,13,19]\nOutput: 32\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19].\n```\n\n**Solution**\n\nThe solution is similar with the former one. The only difference is that the factors are not 2, 3 and/or 5, but given primes.\n\n```\nclass Solution:\n    def nthSuperUglyNumber(self, n, primes):\n\n        nums = [1]\n        k = len(primse)\n        i_index = [0] * k\n        for i in range(1, n):\n            ugly = min([primes[j] * nums[i_index[j]] for j in range(k)])\n            nums.append(ugly)\n            for j in range(k):\n                if ugly == primes[j] * nums[i_index[j]]:\n                    i_index[j] += 1\n                \n        return nums[n - 1]\n``` \n","source":"_posts/Ugly-Number.md","raw":"---\ntitle: Ugly Number\ndate: 2021-04-10 10:12:43\ntags: \n    - algorithm\n    - Leetcode\ncategories:\n    - Data structure and algorithm\n---\n\n# Definition\n---\n\n**Ugly number** is a positive number whose prime factors only include 2, 3, and/or 5.\n\n# Leetcode\n\n## 263. Ugly Number\n---\n\n**Description**\n\nGiven an integer `n`, return true if `n` is an ugly number.\n\n**Input and output**\n\n```\nInput: n = 6\nOutput: true\nExplanation: 6 = 2 × 3\n```\n\n**Solution**\n\nFrom the ugly number definition, we can know that the ugly number is combined with at most three factors that are 2, 3 and/or 5. Therefore, every ugly number `n` can be rewritten as {% mathjax %}n = 2^a + 3^b + 5^c {% endmathjax %}and {% mathjax %}a \\geq 0, b \\geq 0, c \\geq 0 {% endmathjax %}.\n\nIn order to judge whether target number is ugly number. We  can divisor 2, 3 and 5 until the number cannot be divisor by 2, 3 and 5. If the remaining number equals to 1, it indicates that the target number is ugly number and vice versa.\n\n```\nclass Solution:\n    def isUgly(self, n: int) -> bool:\n\n        if n <= 0: return False\n\n        factors = [2, 3, 5]\n\n        for factor in factors:\n            while n % factor == 0:\n                n //= factor\n        \n        return n == 1\n```\n\n## 264. Ugly Number II\n---\n\n**Description**\n\nGiven an integer `n`, return the $n^{th}$ **ugly number**.\n\n**Input and output**\n\n```\nInput: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n```\n\n**Solution**\n\nThe factors of ugly number are 2, 3 and/or 5, therefore, every ugly number comes from former ugly number multiply by 2, 3 and/or 5. For example, 1 is the first ugly number and 2, 3 and 5 have qualification to be multiplied by 1. Taking the mines one, that is 2 and put 2 into ugly number sequence. 2 lose the qualification to be multiplied by 1 and 2 has qualification to be multiplied by 2. Therefore, 3 and 5 has qualification to be multiplied by 1 and 2 can be multiplied by 2 and then continue to take mines number and so on.\n\n```\nclass Solution:\n    def nthUglyNumber(self, n):\n\n        dp = [0] * (n+1)\n        dp[1] = 1\n        p2, p3, p5 = 1, 1, 1\n\n        for i in range(2, n+1):\n\n            target = min(dp[p2] * 2, dp[p3] * 3, dp[p5] * 5)\n            dp[i] = target\n            if target == dp[p2] * 2: p2 += 1\n            if target == dp[p3] * 3: p3 += 1\n            if target == dp[p5] * 5: p5 += 1\n\n        return dp[n]\n```\n\n## 313. Super Ugly Number\n---\n\n**Description**\n\nGiven an integer `n` and an array of integers primes, return the {% mathjax %} n ^ {th} {% endmathjax %} **super ugly number**.\n\n**Super ugly number** is a positive number whose all prime factors are in the array `primes`.\n\nThe {% mathjax %} n ^ {th} {% endmathjax %} **super ugly number** is **guaranteed** to fit in a **32-bit** signed integer.\n\n**Input and output**\n\n```\nInput: n = 12, primes = [2,7,13,19]\nOutput: 32\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19].\n```\n\n**Solution**\n\nThe solution is similar with the former one. The only difference is that the factors are not 2, 3 and/or 5, but given primes.\n\n```\nclass Solution:\n    def nthSuperUglyNumber(self, n, primes):\n\n        nums = [1]\n        k = len(primse)\n        i_index = [0] * k\n        for i in range(1, n):\n            ugly = min([primes[j] * nums[i_index[j]] for j in range(k)])\n            nums.append(ugly)\n            for j in range(k):\n                if ugly == primes[j] * nums[i_index[j]]:\n                    i_index[j] += 1\n                \n        return nums[n - 1]\n``` \n","slug":"Ugly-Number","published":1,"updated":"2021-04-10T21:09:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktxxet780020o24mh55qf1ic","content":"<h1>Definition</h1>\n<hr>\n<p><strong>Ugly number</strong> is a positive number whose prime factors only include 2, 3, and/or 5.</p>\n<h1>Leetcode</h1>\n<h2 id=\"263-Ugly-Number\">263. Ugly Number</h2>\n<hr>\n<p><strong>Description</strong></p>\n<p>Given an integer <code>n</code>, return true if <code>n</code> is an ugly number.</p>\n<p><strong>Input and output</strong></p>\n<pre><code>Input: n = 6\nOutput: true\nExplanation: 6 = 2 × 3\n</code></pre>\n<p><strong>Solution</strong></p>\n<p>From the ugly number definition, we can know that the ugly number is combined with at most three factors that are 2, 3 and/or 5. Therefore, every ugly number <code>n</code> can be rewritten as <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.864ex\" height=\"2.23ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -903.7 7012 985.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-9-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-9-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-9-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-9-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-9-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-9-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-9-TEX-I-1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path><path id=\"MJX-9-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-9-TEX-I-1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-9-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(877.8, 0)\"><use xlink:href=\"#MJX-9-TEX-N-3D\"></use></g><g data-mml-node=\"msup\" transform=\"translate(1933.6, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-9-TEX-N-32\"></use></g><g data-mml-node=\"mi\" transform=\"translate(500, 413) scale(0.707)\"><use xlink:href=\"#MJX-9-TEX-I-1D44E\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(3079.8, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2B\"></use></g><g data-mml-node=\"msup\" transform=\"translate(4080.1, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-9-TEX-N-33\"></use></g><g data-mml-node=\"mi\" transform=\"translate(500, 413) scale(0.707)\"><use xlink:href=\"#MJX-9-TEX-I-1D44F\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(5155.6, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2B\"></use></g><g data-mml-node=\"msup\" transform=\"translate(6155.9, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-9-TEX-N-35\"></use></g><g data-mml-node=\"mi\" transform=\"translate(500, 413) scale(0.707)\"><use xlink:href=\"#MJX-9-TEX-I-1D450\"></use></g></g></g></g></svg></mjx-container>and <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.439ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"17.604ex\" height=\"2.009ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 7781 888\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-9-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-9-TEX-N-2265\" d=\"M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path><path id=\"MJX-9-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-9-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-9-TEX-I-1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path><path id=\"MJX-9-TEX-I-1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-9-TEX-I-1D44E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(806.8, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2265\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1862.6, 0)\"><use xlink:href=\"#MJX-9-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2362.6, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2807.2, 0)\"><use xlink:href=\"#MJX-9-TEX-I-1D44F\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3514, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2265\"></use></g><g data-mml-node=\"mn\" transform=\"translate(4569.8, 0)\"><use xlink:href=\"#MJX-9-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5069.8, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5514.4, 0)\"><use xlink:href=\"#MJX-9-TEX-I-1D450\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6225.2, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2265\"></use></g><g data-mml-node=\"mn\" transform=\"translate(7281, 0)\"><use xlink:href=\"#MJX-9-TEX-N-30\"></use></g></g></g></svg></mjx-container>.</p>\n<p>In order to judge whether target number is ugly number. We  can divisor 2, 3 and 5 until the number cannot be divisor by 2, 3 and 5. If the remaining number equals to 1, it indicates that the target number is ugly number and vice versa.</p>\n<pre><code>class Solution:\n    def isUgly(self, n: int) -&gt; bool:\n\n        if n &lt;= 0: return False\n\n        factors = [2, 3, 5]\n\n        for factor in factors:\n            while n % factor == 0:\n                n //= factor\n        \n        return n == 1\n</code></pre>\n<h2 id=\"264-Ugly-Number-II\">264. Ugly Number II</h2>\n<hr>\n<p><strong>Description</strong></p>\n<p>Given an integer <code>n</code>, return the $n^{th}$ <strong>ugly number</strong>.</p>\n<p><strong>Input and output</strong></p>\n<pre><code>Input: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n</code></pre>\n<p><strong>Solution</strong></p>\n<p>The factors of ugly number are 2, 3 and/or 5, therefore, every ugly number comes from former ugly number multiply by 2, 3 and/or 5. For example, 1 is the first ugly number and 2, 3 and 5 have qualification to be multiplied by 1. Taking the mines one, that is 2 and put 2 into ugly number sequence. 2 lose the qualification to be multiplied by 1 and 2 has qualification to be multiplied by 2. Therefore, 3 and 5 has qualification to be multiplied by 1 and 2 can be multiplied by 2 and then continue to take mines number and so on.</p>\n<pre><code>class Solution:\n    def nthUglyNumber(self, n):\n\n        dp = [0] * (n+1)\n        dp[1] = 1\n        p2, p3, p5 = 1, 1, 1\n\n        for i in range(2, n+1):\n\n            target = min(dp[p2] * 2, dp[p3] * 3, dp[p5] * 5)\n            dp[i] = target\n            if target == dp[p2] * 2: p2 += 1\n            if target == dp[p3] * 3: p3 += 1\n            if target == dp[p5] * 5: p5 += 1\n\n        return dp[n]\n</code></pre>\n<h2 id=\"313-Super-Ugly-Number\">313. Super Ugly Number</h2>\n<hr>\n<p><strong>Description</strong></p>\n<p>Given an integer <code>n</code> and an array of integers primes, return the <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.025ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.97ex\" height=\"2.07ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -903.7 1312.6 914.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-6-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-6-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-6-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-6-TEX-I-1D45B\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(600, 413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-6-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(361, 0)\"><use xlink:href=\"#MJX-6-TEX-I-210E\"></use></g></g></g></g></g></svg></mjx-container> <strong>super ugly number</strong>.</p>\n<p><strong>Super ugly number</strong> is a positive number whose all prime factors are in the array <code>primes</code>.</p>\n<p>The <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.025ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.97ex\" height=\"2.07ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -903.7 1312.6 914.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-4-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-4-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(600, 413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(361, 0)\"><use xlink:href=\"#MJX-4-TEX-I-210E\"></use></g></g></g></g></g></svg></mjx-container> <strong>super ugly number</strong> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> signed integer.</p>\n<p><strong>Input and output</strong></p>\n<pre><code>Input: n = 12, primes = [2,7,13,19]\nOutput: 32\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19].\n</code></pre>\n<p><strong>Solution</strong></p>\n<p>The solution is similar with the former one. The only difference is that the factors are not 2, 3 and/or 5, but given primes.</p>\n<pre><code>class Solution:\n    def nthSuperUglyNumber(self, n, primes):\n\n        nums = [1]\n        k = len(primse)\n        i_index = [0] * k\n        for i in range(1, n):\n            ugly = min([primes[j] * nums[i_index[j]] for j in range(k)])\n            nums.append(ugly)\n            for j in range(k):\n                if ugly == primes[j] * nums[i_index[j]]:\n                    i_index[j] += 1\n                \n        return nums[n - 1]\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1>Definition</h1>\n<hr>\n<p><strong>Ugly number</strong> is a positive number whose prime factors only include 2, 3, and/or 5.</p>\n<h1>Leetcode</h1>\n<h2 id=\"263-Ugly-Number\">263. Ugly Number</h2>\n<hr>\n<p><strong>Description</strong></p>\n<p>Given an integer <code>n</code>, return true if <code>n</code> is an ugly number.</p>\n<p><strong>Input and output</strong></p>\n<pre><code>Input: n = 6\nOutput: true\nExplanation: 6 = 2 × 3\n</code></pre>\n<p><strong>Solution</strong></p>\n<p>From the ugly number definition, we can know that the ugly number is combined with at most three factors that are 2, 3 and/or 5. Therefore, every ugly number <code>n</code> can be rewritten as <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.864ex\" height=\"2.23ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -903.7 7012 985.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-9-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-9-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path><path id=\"MJX-9-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path id=\"MJX-9-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-9-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path><path id=\"MJX-9-TEX-N-33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path id=\"MJX-9-TEX-I-1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path><path id=\"MJX-9-TEX-N-35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path><path id=\"MJX-9-TEX-I-1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-9-TEX-I-1D45B\"></use></g><g data-mml-node=\"mo\" transform=\"translate(877.8, 0)\"><use xlink:href=\"#MJX-9-TEX-N-3D\"></use></g><g data-mml-node=\"msup\" transform=\"translate(1933.6, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-9-TEX-N-32\"></use></g><g data-mml-node=\"mi\" transform=\"translate(500, 413) scale(0.707)\"><use xlink:href=\"#MJX-9-TEX-I-1D44E\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(3079.8, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2B\"></use></g><g data-mml-node=\"msup\" transform=\"translate(4080.1, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-9-TEX-N-33\"></use></g><g data-mml-node=\"mi\" transform=\"translate(500, 413) scale(0.707)\"><use xlink:href=\"#MJX-9-TEX-I-1D44F\"></use></g></g><g data-mml-node=\"mo\" transform=\"translate(5155.6, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2B\"></use></g><g data-mml-node=\"msup\" transform=\"translate(6155.9, 0)\"><g data-mml-node=\"mn\"><use xlink:href=\"#MJX-9-TEX-N-35\"></use></g><g data-mml-node=\"mi\" transform=\"translate(500, 413) scale(0.707)\"><use xlink:href=\"#MJX-9-TEX-I-1D450\"></use></g></g></g></g></svg></mjx-container>and <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.439ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"17.604ex\" height=\"2.009ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 7781 888\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-9-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path><path id=\"MJX-9-TEX-N-2265\" d=\"M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path><path id=\"MJX-9-TEX-N-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path id=\"MJX-9-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path><path id=\"MJX-9-TEX-I-1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path><path id=\"MJX-9-TEX-I-1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-9-TEX-I-1D44E\"></use></g><g data-mml-node=\"mo\" transform=\"translate(806.8, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2265\"></use></g><g data-mml-node=\"mn\" transform=\"translate(1862.6, 0)\"><use xlink:href=\"#MJX-9-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(2362.6, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(2807.2, 0)\"><use xlink:href=\"#MJX-9-TEX-I-1D44F\"></use></g><g data-mml-node=\"mo\" transform=\"translate(3514, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2265\"></use></g><g data-mml-node=\"mn\" transform=\"translate(4569.8, 0)\"><use xlink:href=\"#MJX-9-TEX-N-30\"></use></g><g data-mml-node=\"mo\" transform=\"translate(5069.8, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2C\"></use></g><g data-mml-node=\"mi\" transform=\"translate(5514.4, 0)\"><use xlink:href=\"#MJX-9-TEX-I-1D450\"></use></g><g data-mml-node=\"mo\" transform=\"translate(6225.2, 0)\"><use xlink:href=\"#MJX-9-TEX-N-2265\"></use></g><g data-mml-node=\"mn\" transform=\"translate(7281, 0)\"><use xlink:href=\"#MJX-9-TEX-N-30\"></use></g></g></g></svg></mjx-container>.</p>\n<p>In order to judge whether target number is ugly number. We  can divisor 2, 3 and 5 until the number cannot be divisor by 2, 3 and 5. If the remaining number equals to 1, it indicates that the target number is ugly number and vice versa.</p>\n<pre><code>class Solution:\n    def isUgly(self, n: int) -&gt; bool:\n\n        if n &lt;= 0: return False\n\n        factors = [2, 3, 5]\n\n        for factor in factors:\n            while n % factor == 0:\n                n //= factor\n        \n        return n == 1\n</code></pre>\n<h2 id=\"264-Ugly-Number-II\">264. Ugly Number II</h2>\n<hr>\n<p><strong>Description</strong></p>\n<p>Given an integer <code>n</code>, return the $n^{th}$ <strong>ugly number</strong>.</p>\n<p><strong>Input and output</strong></p>\n<pre><code>Input: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n</code></pre>\n<p><strong>Solution</strong></p>\n<p>The factors of ugly number are 2, 3 and/or 5, therefore, every ugly number comes from former ugly number multiply by 2, 3 and/or 5. For example, 1 is the first ugly number and 2, 3 and 5 have qualification to be multiplied by 1. Taking the mines one, that is 2 and put 2 into ugly number sequence. 2 lose the qualification to be multiplied by 1 and 2 has qualification to be multiplied by 2. Therefore, 3 and 5 has qualification to be multiplied by 1 and 2 can be multiplied by 2 and then continue to take mines number and so on.</p>\n<pre><code>class Solution:\n    def nthUglyNumber(self, n):\n\n        dp = [0] * (n+1)\n        dp[1] = 1\n        p2, p3, p5 = 1, 1, 1\n\n        for i in range(2, n+1):\n\n            target = min(dp[p2] * 2, dp[p3] * 3, dp[p5] * 5)\n            dp[i] = target\n            if target == dp[p2] * 2: p2 += 1\n            if target == dp[p3] * 3: p3 += 1\n            if target == dp[p5] * 5: p5 += 1\n\n        return dp[n]\n</code></pre>\n<h2 id=\"313-Super-Ugly-Number\">313. Super Ugly Number</h2>\n<hr>\n<p><strong>Description</strong></p>\n<p>Given an integer <code>n</code> and an array of integers primes, return the <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.025ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.97ex\" height=\"2.07ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -903.7 1312.6 914.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-6-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-6-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-6-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-6-TEX-I-1D45B\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(600, 413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-6-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(361, 0)\"><use xlink:href=\"#MJX-6-TEX-I-210E\"></use></g></g></g></g></g></svg></mjx-container> <strong>super ugly number</strong>.</p>\n<p><strong>Super ugly number</strong> is a positive number whose all prime factors are in the array <code>primes</code>.</p>\n<p>The <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.025ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.97ex\" height=\"2.07ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -903.7 1312.6 914.7\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-4-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path><path id=\"MJX-4-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path><path id=\"MJX-4-TEX-I-210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D45B\"></use></g><g data-mml-node=\"TeXAtom\" transform=\"translate(600, 413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-4-TEX-I-1D461\"></use></g><g data-mml-node=\"mi\" transform=\"translate(361, 0)\"><use xlink:href=\"#MJX-4-TEX-I-210E\"></use></g></g></g></g></g></svg></mjx-container> <strong>super ugly number</strong> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> signed integer.</p>\n<p><strong>Input and output</strong></p>\n<pre><code>Input: n = 12, primes = [2,7,13,19]\nOutput: 32\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19].\n</code></pre>\n<p><strong>Solution</strong></p>\n<p>The solution is similar with the former one. The only difference is that the factors are not 2, 3 and/or 5, but given primes.</p>\n<pre><code>class Solution:\n    def nthSuperUglyNumber(self, n, primes):\n\n        nums = [1]\n        k = len(primse)\n        i_index = [0] * k\n        for i in range(1, n):\n            ugly = min([primes[j] * nums[i_index[j]] for j in range(k)])\n            nums.append(ugly)\n            for j in range(k):\n                if ugly == primes[j] * nums[i_index[j]]:\n                    i_index[j] += 1\n                \n        return nums[n - 1]\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cktxxet6q0008o24mbjffgcxh","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet6v000eo24mgpft09g7"},{"post_id":"cktxxet6j0001o24m738f8g5q","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet6x000io24mgpjj3s9y"},{"post_id":"cktxxet6r0009o24m3tg2hjqi","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet6y000lo24m956k9vle"},{"post_id":"cktxxet6u000co24m10lt90p2","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet6z000po24m9o3wbr4q"},{"post_id":"cktxxet6m0003o24m423ee9aa","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet70000so24m1ff8aoyn"},{"post_id":"cktxxet6u000do24mh70oh5nk","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet71000vo24m0t3v1cgu"},{"post_id":"cktxxet6w000ho24mbo9y9e5n","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet71000xo24m9ubb2irl"},{"post_id":"cktxxet6p0007o24m9t6s0yyn","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet71000zo24m49qi5a9d"},{"post_id":"cktxxet6z000oo24m4bovfk6b","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet720010o24m0c277ek4"},{"post_id":"cktxxet70000ro24mgbtm0qih","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet720012o24m7y7m82d9"},{"post_id":"cktxxet6x000ko24mbaghgf8s","category_id":"cktxxet6z000qo24m61k29lx1","_id":"cktxxet720014o24mbz7zcb9u"},{"post_id":"cktxxet780020o24mh55qf1ic","category_id":"cktxxet6n0004o24m9ecy1ri4","_id":"cktxxet790023o24mafnw9gkm"}],"PostTag":[{"post_id":"cktxxet6j0001o24m738f8g5q","tag_id":"cktxxet6o0005o24m24494lfx","_id":"cktxxet6x000jo24mhuddh9cn"},{"post_id":"cktxxet6j0001o24m738f8g5q","tag_id":"cktxxet6r000bo24mdhgsfigp","_id":"cktxxet6y000mo24m1mu25ztm"},{"post_id":"cktxxet6z000oo24m4bovfk6b","tag_id":"cktxxet6o0005o24m24494lfx","_id":"cktxxet71000uo24m61r956se"},{"post_id":"cktxxet6z000oo24m4bovfk6b","tag_id":"cktxxet6r000bo24mdhgsfigp","_id":"cktxxet71000wo24mbimo37zy"},{"post_id":"cktxxet6m0003o24m423ee9aa","tag_id":"cktxxet6o0005o24m24494lfx","_id":"cktxxet720013o24mc3a228yx"},{"post_id":"cktxxet6m0003o24m423ee9aa","tag_id":"cktxxet6r000bo24mdhgsfigp","_id":"cktxxet720015o24mb1wn7wio"},{"post_id":"cktxxet6m0003o24m423ee9aa","tag_id":"cktxxet70000to24m963z5cjg","_id":"cktxxet730017o24mhjfqbfee"},{"post_id":"cktxxet6m0003o24m423ee9aa","tag_id":"cktxxet71000yo24m66chdphf","_id":"cktxxet730018o24mbpcvbp96"},{"post_id":"cktxxet6p0007o24m9t6s0yyn","tag_id":"cktxxet6o0005o24m24494lfx","_id":"cktxxet73001ao24m328adwpg"},{"post_id":"cktxxet6p0007o24m9t6s0yyn","tag_id":"cktxxet6r000bo24mdhgsfigp","_id":"cktxxet73001bo24mc98tgvyw"},{"post_id":"cktxxet6q0008o24mbjffgcxh","tag_id":"cktxxet730019o24mgwfe6r1t","_id":"cktxxet73001do24m2sp9fl1q"},{"post_id":"cktxxet6r0009o24m3tg2hjqi","tag_id":"cktxxet6o0005o24m24494lfx","_id":"cktxxet74001fo24m2sbehst0"},{"post_id":"cktxxet6r0009o24m3tg2hjqi","tag_id":"cktxxet6r000bo24mdhgsfigp","_id":"cktxxet74001go24m6oo56wr1"},{"post_id":"cktxxet6u000co24m10lt90p2","tag_id":"cktxxet6o0005o24m24494lfx","_id":"cktxxet74001io24m27kifqzh"},{"post_id":"cktxxet6u000co24m10lt90p2","tag_id":"cktxxet6r000bo24mdhgsfigp","_id":"cktxxet75001jo24m82a18s7l"},{"post_id":"cktxxet6u000co24m10lt90p2","tag_id":"cktxxet70000to24m963z5cjg","_id":"cktxxet75001lo24m6l493knr"},{"post_id":"cktxxet6u000do24mh70oh5nk","tag_id":"cktxxet6o0005o24m24494lfx","_id":"cktxxet75001mo24mfxnw06b9"},{"post_id":"cktxxet6u000do24mh70oh5nk","tag_id":"cktxxet6r000bo24mdhgsfigp","_id":"cktxxet75001oo24mfo68blhb"},{"post_id":"cktxxet6u000do24mh70oh5nk","tag_id":"cktxxet70000to24m963z5cjg","_id":"cktxxet75001po24m6fhy9wao"},{"post_id":"cktxxet6w000ho24mbo9y9e5n","tag_id":"cktxxet6o0005o24m24494lfx","_id":"cktxxet76001ro24m1skn0tbp"},{"post_id":"cktxxet6w000ho24mbo9y9e5n","tag_id":"cktxxet6r000bo24mdhgsfigp","_id":"cktxxet76001so24mfltq96wj"},{"post_id":"cktxxet6w000ho24mbo9y9e5n","tag_id":"cktxxet75001ko24m0kzqfhhx","_id":"cktxxet77001uo24m07fuerts"},{"post_id":"cktxxet6w000ho24mbo9y9e5n","tag_id":"cktxxet75001no24mctbveen3","_id":"cktxxet77001vo24mdteagdww"},{"post_id":"cktxxet6x000ko24mbaghgf8s","tag_id":"cktxxet6o0005o24m24494lfx","_id":"cktxxet77001wo24mhz9ybw6c"},{"post_id":"cktxxet6x000ko24mbaghgf8s","tag_id":"cktxxet6r000bo24mdhgsfigp","_id":"cktxxet77001xo24me5slbotn"},{"post_id":"cktxxet6x000ko24mbaghgf8s","tag_id":"cktxxet75001ko24m0kzqfhhx","_id":"cktxxet77001yo24m123ue55c"},{"post_id":"cktxxet70000ro24mgbtm0qih","tag_id":"cktxxet730019o24mgwfe6r1t","_id":"cktxxet77001zo24ma2blgox7"},{"post_id":"cktxxet780020o24mh55qf1ic","tag_id":"cktxxet6o0005o24m24494lfx","_id":"cktxxet780021o24makq0cara"},{"post_id":"cktxxet780020o24mh55qf1ic","tag_id":"cktxxet6r000bo24mdhgsfigp","_id":"cktxxet790022o24mgqhz0j56"}],"Tag":[{"name":"algorithm","_id":"cktxxet6o0005o24m24494lfx"},{"name":"Leetcode","_id":"cktxxet6r000bo24mdhgsfigp"},{"name":"two-pointers","_id":"cktxxet70000to24m963z5cjg"},{"name":"greedy-algorithm","_id":"cktxxet71000yo24m66chdphf"},{"name":"Data structure","_id":"cktxxet730019o24mgwfe6r1t"},{"name":"Linked-list","_id":"cktxxet75001ko24m0kzqfhhx"},{"name":"DFS","_id":"cktxxet75001no24mctbveen3"}]}}